{"version":3,"sources":["../../src/web-mercator-viewport.js"],"names":["createMat4","zoomToScale","pixelsToWorld","lngLatToWorld","worldToLngLat","worldToPixels","getProjectionMatrix","getDistanceScales","getViewMatrix","fitBounds","getBounds","mat4","vec2","vec3","WebMercatorViewport","constructor","width","height","latitude","longitude","zoom","pitch","bearing","altitude","position","nearZMultiplier","farZMultiplier","scale","Math","max","distanceScales","center","add","mul","unitsPerMeter","projectionMatrix","viewMatrix","meterOffset","_initMatrices","equals","bind","project","unproject","projectPosition","unprojectPosition","Object","freeze","vpm","multiply","viewProjectionMatrix","m","translate","mInverse","invert","Error","pixelProjectionMatrix","pixelUnprojectionMatrix","viewport","xyz","topLeft","worldPosition","coord","x","y","y2","length","targetZ","undefined","z","targetZWorld","X","Y","Z","Number","isFinite","metersPerUnit","projectFlat","lngLat","unprojectFlat","xy","getMapCenterByLngLatPosition","pos","fromLocation","toLocation","negate","newCenter","getLocationAtPoint","bounds","options","assign","corners","getBoundingRegion","west","min","map","p","east","south","north"],"mappings":"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","sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport {createMat4} from './math-utils';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\n\nexport default class WebMercatorViewport {\n  // eslint-disable-next-line max-statements\n  constructor(\n    {\n      // Map state\n      width,\n      height,\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      altitude = 1.5,\n      position = null,\n      nearZMultiplier = 0.02,\n      farZMultiplier = 1.01\n    } = {width: 1, height: 1}\n  ) {\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const distanceScales = getDistanceScales({longitude, latitude});\n\n    const center = lngLatToWorld([longitude, latitude]);\n    center[2] = 0;\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      altitude,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    this.viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n\n    // Save parameters\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n\n    Object.freeze(this);\n  }\n\n  _initMatrices() {\n    const {width, height, projectionMatrix, viewMatrix} = this;\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, projectionMatrix);\n    mat4.multiply(vpm, vpm, viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // Calculate matrices and scales needed for projection\n    /**\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n    const m = createMat4();\n\n    // matrix for conversion from location to screen coordinates\n    mat4.scale(m, m, [width / 2, -height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, vpm);\n\n    const mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof WebMercatorViewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      mat4.equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      mat4.equals(viewport.viewMatrix, this.viewMatrix)\n    );\n  }\n\n  // Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n  // using viewport projection parameters\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  // Unproject pixel coordinates on screen onto world coordinates,\n  // (possibly [lon, lat]) on map.\n  unproject(xyz, {topLeft = true, targetZ = undefined} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = lngLatToWorld(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = worldToLngLat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n\n  // Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n  projectFlat(lngLat) {\n    return lngLatToWorld(lngLat);\n  }\n\n  // Unproject world point [x,y] on map onto {lat, lon} on sphere\n  unprojectFlat(xy) {\n    return worldToLngLat(xy);\n  }\n\n  // Get the map center that place a given [lng, lat] coordinate at screen point [x, y]\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return worldToLngLat(newCenter);\n  }\n\n  // Legacy method name\n  getLocationAtPoint({lngLat, pos}) {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n\n  // Returns a new viewport that fit around the given rectangle.\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n  getBounds(options) {\n    const corners = this.getBoundingRegion(options);\n\n    const west = Math.min(...corners.map(p => p[0]));\n    const east = Math.max(...corners.map(p => p[0]));\n    const south = Math.min(...corners.map(p => p[1]));\n    const north = Math.max(...corners.map(p => p[1]));\n    return [[west, south], [east, north]];\n  }\n\n  getBoundingRegion(options = {}) {\n    return getBounds(this, options.z || 0);\n  }\n}\n"],"file":"web-mercator-viewport.js"}