{"version":3,"sources":["../../../src/components/marker.js"],"names":["React","useMemo","PropTypes","useDraggableControl","draggableControlDefaultProps","draggableControlPropTypes","crispPixel","getTerrainElevation","propTypes","Object","assign","className","string","longitude","number","isRequired","latitude","defaultProps","getPosition","props","state","context","offsetLeft","offsetTop","dragPos","dragOffset","viewport","map","altitude","x","y","project","Marker","thisRef","containerRef","children","draggable","transform","cursor","control","containerStyle","position","left","top","container","current","style","memo"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport * as React from 'react';\nimport {useMemo} from 'react';\nimport * as PropTypes from 'prop-types';\nimport useDraggableControl, {\n  draggableControlDefaultProps,\n  draggableControlPropTypes\n} from './draggable-control';\nimport {crispPixel} from '../utils/crisp-pixel';\nimport {getTerrainElevation} from '../utils/terrain';\n\nconst propTypes = Object.assign({}, draggableControlPropTypes, {\n  // Custom className\n  className: PropTypes.string,\n  // Longitude of the anchor point\n  longitude: PropTypes.number.isRequired,\n  // Latitude of the anchor point\n  latitude: PropTypes.number.isRequired\n});\n\nconst defaultProps = Object.assign({}, draggableControlDefaultProps, {\n  className: ''\n});\n\nfunction getPosition({props, state, context}) {\n  const {longitude, latitude, offsetLeft, offsetTop} = props;\n  const {dragPos, dragOffset} = state;\n  const {viewport, map} = context;\n\n  // If dragging, just return the current drag position\n  if (dragPos && dragOffset) {\n    return [dragPos[0] + dragOffset[0], dragPos[1] + dragOffset[1]];\n  }\n\n  const altitude = getTerrainElevation(map, {longitude, latitude});\n\n  // Otherwise return the projected lat/lng with offset\n  let [x, y] = viewport.project([longitude, latitude, altitude]);\n  x += offsetLeft;\n  y += offsetTop;\n  return [x, y];\n}\n\n/*\n * PureComponent doesn't update when context changes.\n * The only way is to implement our own shouldComponentUpdate here. Considering\n * the parent component (StaticMap or InteractiveMap) is pure, and map re-render\n * is almost always triggered by a viewport change, we almost definitely need to\n * recalculate the marker's position when the parent re-renders.\n */\nfunction Marker(props) {\n  const thisRef = useDraggableControl(props);\n  const {state, containerRef} = thisRef;\n\n  const {children, className, draggable} = props;\n  const {dragPos} = state;\n\n  const [x, y] = getPosition(thisRef);\n  const transform = `translate(${crispPixel(x)}px, ${crispPixel(y)}px)`;\n  const cursor = draggable ? (dragPos ? 'grabbing' : 'grab') : 'auto';\n\n  // Perf: avoid rerendering if only the viewport changed\n  const control = useMemo(() => {\n    const containerStyle = {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      transform,\n      cursor\n    };\n\n    return (\n      <div\n        className={`mapboxgl-marker ${className}`}\n        ref={thisRef.containerRef}\n        // @ts-ignore\n        style={containerStyle}\n      >\n        {children}\n      </div>\n    );\n  }, [children, className]);\n\n  const container = containerRef.current;\n  if (container) {\n    container.style.transform = transform;\n    container.style.cursor = cursor;\n  }\n\n  return control;\n}\n\nMarker.defaultProps = defaultProps;\nMarker.propTypes = propTypes;\n\nexport default React.memo(Marker);\n"],"file":"marker.js"}