function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import pick from 'lodash.pick';
import omit from 'lodash.omit';
import { shallowEqual, setVariables, getDisplayName } from './utils';

export default function () {
  for (var _len = arguments.length, varNames = Array(_len), _key = 0; _key < _len; _key++) {
    varNames[_key] = arguments[_key];
  }

  return function (WrappedComponent) {
    return function (_Component) {
      _inherits(_class2, _Component);

      function _class2(props) {
        _classCallCheck(this, _class2);

        var _this = _possibleConstructorReturn(this, _Component.call(this, props));

        _this.displayName = getDisplayName(WrappedComponent);


        _this.state = {
          varProps: pick.apply(undefined, [props].concat(varNames)),
          ownProps: omit.apply(undefined, [props].concat(varNames))
        };
        return _this;
      }

      _class2.prototype.componentDidMount = function componentDidMount() {
        setVariables(findDOMNode(this), this.state.varProps);
      };

      _class2.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var _this2 = this;

        var prevVarProps = this.state.varProps;

        this.setState({
          varProps: pick.apply(undefined, [nextProps].concat(varNames)),
          ownProps: omit.apply(undefined, [nextProps].concat(varNames))
        }, function () {

          if (!shallowEqual(prevVarProps, _this2.state.varProps)) {
            setVariables(findDOMNode(_this2), _this2.state.varProps);
          }
        });
      };

      _class2.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
        return !shallowEqual(this.state.ownProps, nextState.ownProps);
      };

      _class2.prototype.render = function render() {
        return React.createElement(WrappedComponent, this.state.ownProps);
      };

      return _class2;
    }(Component);
  };
}