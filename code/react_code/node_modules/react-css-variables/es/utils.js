import omit from 'lodash.omit';

var hasOwn = Object.prototype.hasOwnProperty;

export function applyNodeStyle(node, styles) {
  var length = Object.keys(styles).length;

  if (length === 0) {
    return;
  } else if (length === 1) {
    node.style.setProperty(styles[0].key, styles[0].value);
  } else {
    node.setAttribute('style', styles.map(function (_ref) {
      var key = _ref.key,
          value = _ref.value;
      return key + ':' + value + ';';
    }).join(''));
  }
}

export function getStyles(props) {
  return Object.keys(props).map(function (key) {
    return { key: '--' + key, value: props[key] };
  });
}

export function setVariables(node) {
  var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (node) {
    applyNodeStyle(node, getStyles(variables));
  }
}

export function getDisplayName(WrappedComponent) {
  var name = WrappedComponent.displayName || WrappedComponent.name || 'Component';

  return 'Variables(' + name + ')';
}

export function shallowEqual(a, b) {
  if (a === b) return true;

  var countA = 0;
  var countB = 0;

  for (var key in a) {
    if (hasOwn.call(a, key) && a[key] !== b[key]) return false;
    countA++;
  }

  for (var _key in b) {
    if (hasOwn.call(b, _key)) countB++;
  }

  return countA === countB;
}