{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { parseSVG, makeViewBoxTransform } from 'zrender/lib/tool/parseSVG';\nimport Group from 'zrender/lib/graphic/Group';\nimport Rect from 'zrender/lib/graphic/shape/Rect';\nimport { assert, createHashMap } from 'zrender/lib/core/util';\nimport BoundingRect from 'zrender/lib/core/BoundingRect';\nimport { makeInner } from '../../util/model';\nvar inner = makeInner();\nexport default {\n  load: function (mapName, mapRecord) {\n    var originRoot = inner(mapRecord).originRoot;\n\n    if (originRoot) {\n      return {\n        root: originRoot,\n        boundingRect: inner(mapRecord).boundingRect\n      };\n    }\n\n    var graphic = buildGraphic(mapRecord);\n    inner(mapRecord).originRoot = graphic.root;\n    inner(mapRecord).boundingRect = graphic.boundingRect;\n    return graphic;\n  },\n  makeGraphic: function (mapName, mapRecord, hostKey) {\n    // For performance consideration (in large SVG), graphic only maked\n    // when necessary and reuse them according to hostKey.\n    var field = inner(mapRecord);\n    var rootMap = field.rootMap || (field.rootMap = createHashMap());\n    var root = rootMap.get(hostKey);\n\n    if (root) {\n      return root;\n    }\n\n    var originRoot = field.originRoot;\n    var boundingRect = field.boundingRect; // For performance, if originRoot is not used by a view,\n    // assign it to a view, but not reproduce graphic elements.\n\n    if (!field.originRootHostKey) {\n      field.originRootHostKey = hostKey;\n      root = originRoot;\n    } else {\n      root = buildGraphic(mapRecord, boundingRect).root;\n    }\n\n    return rootMap.set(hostKey, root);\n  },\n  removeGraphic: function (mapName, mapRecord, hostKey) {\n    var field = inner(mapRecord);\n    var rootMap = field.rootMap;\n    rootMap && rootMap.removeKey(hostKey);\n\n    if (hostKey === field.originRootHostKey) {\n      field.originRootHostKey = null;\n    }\n  }\n};\n\nfunction buildGraphic(mapRecord, boundingRect) {\n  var svgXML = mapRecord.svgXML;\n  var result;\n  var root;\n\n  try {\n    result = svgXML && parseSVG(svgXML, {\n      ignoreViewBox: true,\n      ignoreRootClip: true\n    }) || {};\n    root = result.root;\n    assert(root != null);\n  } catch (e) {\n    throw new Error('Invalid svg format\\n' + e.message);\n  }\n\n  var svgWidth = result.width;\n  var svgHeight = result.height;\n  var viewBoxRect = result.viewBoxRect;\n\n  if (!boundingRect) {\n    boundingRect = svgWidth == null || svgHeight == null ? // If svg width / height not specified, calculate\n    // bounding rect as the width / height\n    root.getBoundingRect() : new BoundingRect(0, 0, 0, 0);\n\n    if (svgWidth != null) {\n      boundingRect.width = svgWidth;\n    }\n\n    if (svgHeight != null) {\n      boundingRect.height = svgHeight;\n    }\n  }\n\n  if (viewBoxRect) {\n    var viewBoxTransform = makeViewBoxTransform(viewBoxRect, boundingRect.width, boundingRect.height);\n    var elRoot = root;\n    root = new Group();\n    root.add(elRoot);\n    elRoot.scaleX = elRoot.scaleY = viewBoxTransform.scale;\n    elRoot.x = viewBoxTransform.x;\n    elRoot.y = viewBoxTransform.y;\n  }\n\n  root.setClipPath(new Rect({\n    shape: boundingRect.plain()\n  }));\n  return {\n    root: root,\n    boundingRect: boundingRect\n  };\n}","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/echarts/lib/coord/geo/geoSVGLoader.js"],"names":["parseSVG","makeViewBoxTransform","Group","Rect","assert","createHashMap","BoundingRect","makeInner","inner","load","mapName","mapRecord","originRoot","root","boundingRect","graphic","buildGraphic","makeGraphic","hostKey","field","rootMap","get","originRootHostKey","set","removeGraphic","removeKey","svgXML","result","ignoreViewBox","ignoreRootClip","e","Error","message","svgWidth","width","svgHeight","height","viewBoxRect","getBoundingRect","viewBoxTransform","elRoot","add","scaleX","scaleY","scale","x","y","setClipPath","shape","plain"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { parseSVG, makeViewBoxTransform } from 'zrender/lib/tool/parseSVG';\nimport Group from 'zrender/lib/graphic/Group';\nimport Rect from 'zrender/lib/graphic/shape/Rect';\nimport { assert, createHashMap } from 'zrender/lib/core/util';\nimport BoundingRect from 'zrender/lib/core/BoundingRect';\nimport { makeInner } from '../../util/model';\nvar inner = makeInner();\nexport default {\n  load: function (mapName, mapRecord) {\n    var originRoot = inner(mapRecord).originRoot;\n\n    if (originRoot) {\n      return {\n        root: originRoot,\n        boundingRect: inner(mapRecord).boundingRect\n      };\n    }\n\n    var graphic = buildGraphic(mapRecord);\n    inner(mapRecord).originRoot = graphic.root;\n    inner(mapRecord).boundingRect = graphic.boundingRect;\n    return graphic;\n  },\n  makeGraphic: function (mapName, mapRecord, hostKey) {\n    // For performance consideration (in large SVG), graphic only maked\n    // when necessary and reuse them according to hostKey.\n    var field = inner(mapRecord);\n    var rootMap = field.rootMap || (field.rootMap = createHashMap());\n    var root = rootMap.get(hostKey);\n\n    if (root) {\n      return root;\n    }\n\n    var originRoot = field.originRoot;\n    var boundingRect = field.boundingRect; // For performance, if originRoot is not used by a view,\n    // assign it to a view, but not reproduce graphic elements.\n\n    if (!field.originRootHostKey) {\n      field.originRootHostKey = hostKey;\n      root = originRoot;\n    } else {\n      root = buildGraphic(mapRecord, boundingRect).root;\n    }\n\n    return rootMap.set(hostKey, root);\n  },\n  removeGraphic: function (mapName, mapRecord, hostKey) {\n    var field = inner(mapRecord);\n    var rootMap = field.rootMap;\n    rootMap && rootMap.removeKey(hostKey);\n\n    if (hostKey === field.originRootHostKey) {\n      field.originRootHostKey = null;\n    }\n  }\n};\n\nfunction buildGraphic(mapRecord, boundingRect) {\n  var svgXML = mapRecord.svgXML;\n  var result;\n  var root;\n\n  try {\n    result = svgXML && parseSVG(svgXML, {\n      ignoreViewBox: true,\n      ignoreRootClip: true\n    }) || {};\n    root = result.root;\n    assert(root != null);\n  } catch (e) {\n    throw new Error('Invalid svg format\\n' + e.message);\n  }\n\n  var svgWidth = result.width;\n  var svgHeight = result.height;\n  var viewBoxRect = result.viewBoxRect;\n\n  if (!boundingRect) {\n    boundingRect = svgWidth == null || svgHeight == null ? // If svg width / height not specified, calculate\n    // bounding rect as the width / height\n    root.getBoundingRect() : new BoundingRect(0, 0, 0, 0);\n\n    if (svgWidth != null) {\n      boundingRect.width = svgWidth;\n    }\n\n    if (svgHeight != null) {\n      boundingRect.height = svgHeight;\n    }\n  }\n\n  if (viewBoxRect) {\n    var viewBoxTransform = makeViewBoxTransform(viewBoxRect, boundingRect.width, boundingRect.height);\n    var elRoot = root;\n    root = new Group();\n    root.add(elRoot);\n    elRoot.scaleX = elRoot.scaleY = viewBoxTransform.scale;\n    elRoot.x = viewBoxTransform.x;\n    elRoot.y = viewBoxTransform.y;\n  }\n\n  root.setClipPath(new Rect({\n    shape: boundingRect.plain()\n  }));\n  return {\n    root: root,\n    boundingRect: boundingRect\n  };\n}"]},"metadata":{},"sourceType":"module"}