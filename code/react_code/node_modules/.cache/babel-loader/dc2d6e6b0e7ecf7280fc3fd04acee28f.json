{"ast":null,"code":"import * as matrix from './matrix';\nimport * as vector from './vector';\nvar mIdentity = matrix.identity;\nvar EPSILON = 5e-5;\n\nfunction isNotAroundZero(val) {\n  return val > EPSILON || val < -EPSILON;\n}\n\nvar scaleTmp = [];\nvar tmpTransform = [];\nvar originTransform = matrix.create();\nvar abs = Math.abs;\n\nvar Transformable = function () {\n  function Transformable() {}\n\n  Transformable.prototype.setPosition = function (arr) {\n    this.x = arr[0];\n    this.y = arr[1];\n  };\n\n  Transformable.prototype.setScale = function (arr) {\n    this.scaleX = arr[0];\n    this.scaleY = arr[1];\n  };\n\n  Transformable.prototype.setOrigin = function (arr) {\n    this.originX = arr[0];\n    this.originY = arr[1];\n  };\n\n  Transformable.prototype.needLocalTransform = function () {\n    return isNotAroundZero(this.rotation) || isNotAroundZero(this.x) || isNotAroundZero(this.y) || isNotAroundZero(this.scaleX - 1) || isNotAroundZero(this.scaleY - 1);\n  };\n\n  Transformable.prototype.updateTransform = function () {\n    var parent = this.parent;\n    var parentHasTransform = parent && parent.transform;\n    var needLocalTransform = this.needLocalTransform();\n    var m = this.transform;\n\n    if (!(needLocalTransform || parentHasTransform)) {\n      m && mIdentity(m);\n      return;\n    }\n\n    m = m || matrix.create();\n\n    if (needLocalTransform) {\n      this.getLocalTransform(m);\n    } else {\n      mIdentity(m);\n    }\n\n    if (parentHasTransform) {\n      if (needLocalTransform) {\n        matrix.mul(m, parent.transform, m);\n      } else {\n        matrix.copy(m, parent.transform);\n      }\n    }\n\n    this.transform = m;\n\n    this._resolveGlobalScaleRatio(m);\n  };\n\n  Transformable.prototype._resolveGlobalScaleRatio = function (m) {\n    var globalScaleRatio = this.globalScaleRatio;\n\n    if (globalScaleRatio != null && globalScaleRatio !== 1) {\n      this.getGlobalScale(scaleTmp);\n      var relX = scaleTmp[0] < 0 ? -1 : 1;\n      var relY = scaleTmp[1] < 0 ? -1 : 1;\n      var sx = ((scaleTmp[0] - relX) * globalScaleRatio + relX) / scaleTmp[0] || 0;\n      var sy = ((scaleTmp[1] - relY) * globalScaleRatio + relY) / scaleTmp[1] || 0;\n      m[0] *= sx;\n      m[1] *= sx;\n      m[2] *= sy;\n      m[3] *= sy;\n    }\n\n    this.invTransform = this.invTransform || matrix.create();\n    matrix.invert(this.invTransform, m);\n  };\n\n  Transformable.prototype.getLocalTransform = function (m) {\n    return Transformable.getLocalTransform(this, m);\n  };\n\n  Transformable.prototype.getComputedTransform = function () {\n    var transformNode = this;\n    var ancestors = [];\n\n    while (transformNode) {\n      ancestors.push(transformNode);\n      transformNode = transformNode.parent;\n    }\n\n    while (transformNode = ancestors.pop()) {\n      transformNode.updateTransform();\n    }\n\n    return this.transform;\n  };\n\n  Transformable.prototype.setLocalTransform = function (m) {\n    if (!m) {\n      return;\n    }\n\n    var sx = m[0] * m[0] + m[1] * m[1];\n    var sy = m[2] * m[2] + m[3] * m[3];\n\n    if (isNotAroundZero(sx - 1)) {\n      sx = Math.sqrt(sx);\n    }\n\n    if (isNotAroundZero(sy - 1)) {\n      sy = Math.sqrt(sy);\n    }\n\n    if (m[0] < 0) {\n      sx = -sx;\n    }\n\n    if (m[3] < 0) {\n      sy = -sy;\n    }\n\n    this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);\n\n    if (sx < 0 && sy < 0) {\n      this.rotation += Math.PI;\n      sx = -sx;\n      sy = -sy;\n    }\n\n    this.x = m[4];\n    this.y = m[5];\n    this.scaleX = sx;\n    this.scaleY = sy;\n  };\n\n  Transformable.prototype.decomposeTransform = function () {\n    if (!this.transform) {\n      return;\n    }\n\n    var parent = this.parent;\n    var m = this.transform;\n\n    if (parent && parent.transform) {\n      matrix.mul(tmpTransform, parent.invTransform, m);\n      m = tmpTransform;\n    }\n\n    var ox = this.originX;\n    var oy = this.originY;\n\n    if (ox || oy) {\n      originTransform[4] = ox;\n      originTransform[5] = oy;\n      matrix.mul(tmpTransform, m, originTransform);\n      tmpTransform[4] -= ox;\n      tmpTransform[5] -= oy;\n      m = tmpTransform;\n    }\n\n    this.setLocalTransform(m);\n  };\n\n  Transformable.prototype.getGlobalScale = function (out) {\n    var m = this.transform;\n    out = out || [];\n\n    if (!m) {\n      out[0] = 1;\n      out[1] = 1;\n      return out;\n    }\n\n    out[0] = Math.sqrt(m[0] * m[0] + m[1] * m[1]);\n    out[1] = Math.sqrt(m[2] * m[2] + m[3] * m[3]);\n\n    if (m[0] < 0) {\n      out[0] = -out[0];\n    }\n\n    if (m[3] < 0) {\n      out[1] = -out[1];\n    }\n\n    return out;\n  };\n\n  Transformable.prototype.transformCoordToLocal = function (x, y) {\n    var v2 = [x, y];\n    var invTransform = this.invTransform;\n\n    if (invTransform) {\n      vector.applyTransform(v2, v2, invTransform);\n    }\n\n    return v2;\n  };\n\n  Transformable.prototype.transformCoordToGlobal = function (x, y) {\n    var v2 = [x, y];\n    var transform = this.transform;\n\n    if (transform) {\n      vector.applyTransform(v2, v2, transform);\n    }\n\n    return v2;\n  };\n\n  Transformable.prototype.getLineScale = function () {\n    var m = this.transform;\n    return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10 ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1])) : 1;\n  };\n\n  Transformable.getLocalTransform = function (target, m) {\n    m = m || [];\n    mIdentity(m);\n    var ox = target.originX || 0;\n    var oy = target.originY || 0;\n    var sx = target.scaleX;\n    var sy = target.scaleY;\n    var rotation = target.rotation || 0;\n    var x = target.x;\n    var y = target.y;\n    m[4] -= ox;\n    m[5] -= oy;\n    m[0] *= sx;\n    m[1] *= sy;\n    m[2] *= sx;\n    m[3] *= sy;\n    m[4] *= sx;\n    m[5] *= sy;\n\n    if (rotation) {\n      matrix.rotate(m, m, rotation);\n    }\n\n    m[4] += ox;\n    m[5] += oy;\n    m[4] += x;\n    m[5] += y;\n    return m;\n  };\n\n  Transformable.initDefaultProps = function () {\n    var proto = Transformable.prototype;\n    proto.x = 0;\n    proto.y = 0;\n    proto.scaleX = 1;\n    proto.scaleY = 1;\n    proto.originX = 0;\n    proto.originY = 0;\n    proto.rotation = 0;\n    proto.globalScaleRatio = 1;\n  }();\n\n  return Transformable;\n}();\n\n;\nexport default Transformable;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/zrender/lib/core/Transformable.js"],"names":["matrix","vector","mIdentity","identity","EPSILON","isNotAroundZero","val","scaleTmp","tmpTransform","originTransform","create","abs","Math","Transformable","prototype","setPosition","arr","x","y","setScale","scaleX","scaleY","setOrigin","originX","originY","needLocalTransform","rotation","updateTransform","parent","parentHasTransform","transform","m","getLocalTransform","mul","copy","_resolveGlobalScaleRatio","globalScaleRatio","getGlobalScale","relX","relY","sx","sy","invTransform","invert","getComputedTransform","transformNode","ancestors","push","pop","setLocalTransform","sqrt","atan2","PI","decomposeTransform","ox","oy","out","transformCoordToLocal","v2","applyTransform","transformCoordToGlobal","getLineScale","target","rotate","initDefaultProps","proto"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,UAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,UAAxB;AACA,IAAIC,SAAS,GAAGF,MAAM,CAACG,QAAvB;AACA,IAAIC,OAAO,GAAG,IAAd;;AACA,SAASC,eAAT,CAAyBC,GAAzB,EAA8B;AAC1B,SAAOA,GAAG,GAAGF,OAAN,IAAiBE,GAAG,GAAG,CAACF,OAA/B;AACH;;AACD,IAAIG,QAAQ,GAAG,EAAf;AACA,IAAIC,YAAY,GAAG,EAAnB;AACA,IAAIC,eAAe,GAAGT,MAAM,CAACU,MAAP,EAAtB;AACA,IAAIC,GAAG,GAAGC,IAAI,CAACD,GAAf;;AACA,IAAIE,aAAa,GAAI,YAAY;AAC7B,WAASA,aAAT,GAAyB,CACxB;;AACDA,EAAAA,aAAa,CAACC,SAAd,CAAwBC,WAAxB,GAAsC,UAAUC,GAAV,EAAe;AACjD,SAAKC,CAAL,GAASD,GAAG,CAAC,CAAD,CAAZ;AACA,SAAKE,CAAL,GAASF,GAAG,CAAC,CAAD,CAAZ;AACH,GAHD;;AAIAH,EAAAA,aAAa,CAACC,SAAd,CAAwBK,QAAxB,GAAmC,UAAUH,GAAV,EAAe;AAC9C,SAAKI,MAAL,GAAcJ,GAAG,CAAC,CAAD,CAAjB;AACA,SAAKK,MAAL,GAAcL,GAAG,CAAC,CAAD,CAAjB;AACH,GAHD;;AAIAH,EAAAA,aAAa,CAACC,SAAd,CAAwBQ,SAAxB,GAAoC,UAAUN,GAAV,EAAe;AAC/C,SAAKO,OAAL,GAAeP,GAAG,CAAC,CAAD,CAAlB;AACA,SAAKQ,OAAL,GAAeR,GAAG,CAAC,CAAD,CAAlB;AACH,GAHD;;AAIAH,EAAAA,aAAa,CAACC,SAAd,CAAwBW,kBAAxB,GAA6C,YAAY;AACrD,WAAOpB,eAAe,CAAC,KAAKqB,QAAN,CAAf,IACArB,eAAe,CAAC,KAAKY,CAAN,CADf,IAEAZ,eAAe,CAAC,KAAKa,CAAN,CAFf,IAGAb,eAAe,CAAC,KAAKe,MAAL,GAAc,CAAf,CAHf,IAIAf,eAAe,CAAC,KAAKgB,MAAL,GAAc,CAAf,CAJtB;AAKH,GAND;;AAOAR,EAAAA,aAAa,CAACC,SAAd,CAAwBa,eAAxB,GAA0C,YAAY;AAClD,QAAIC,MAAM,GAAG,KAAKA,MAAlB;AACA,QAAIC,kBAAkB,GAAGD,MAAM,IAAIA,MAAM,CAACE,SAA1C;AACA,QAAIL,kBAAkB,GAAG,KAAKA,kBAAL,EAAzB;AACA,QAAIM,CAAC,GAAG,KAAKD,SAAb;;AACA,QAAI,EAAEL,kBAAkB,IAAII,kBAAxB,CAAJ,EAAiD;AAC7CE,MAAAA,CAAC,IAAI7B,SAAS,CAAC6B,CAAD,CAAd;AACA;AACH;;AACDA,IAAAA,CAAC,GAAGA,CAAC,IAAI/B,MAAM,CAACU,MAAP,EAAT;;AACA,QAAIe,kBAAJ,EAAwB;AACpB,WAAKO,iBAAL,CAAuBD,CAAvB;AACH,KAFD,MAGK;AACD7B,MAAAA,SAAS,CAAC6B,CAAD,CAAT;AACH;;AACD,QAAIF,kBAAJ,EAAwB;AACpB,UAAIJ,kBAAJ,EAAwB;AACpBzB,QAAAA,MAAM,CAACiC,GAAP,CAAWF,CAAX,EAAcH,MAAM,CAACE,SAArB,EAAgCC,CAAhC;AACH,OAFD,MAGK;AACD/B,QAAAA,MAAM,CAACkC,IAAP,CAAYH,CAAZ,EAAeH,MAAM,CAACE,SAAtB;AACH;AACJ;;AACD,SAAKA,SAAL,GAAiBC,CAAjB;;AACA,SAAKI,wBAAL,CAA8BJ,CAA9B;AACH,GA1BD;;AA2BAlB,EAAAA,aAAa,CAACC,SAAd,CAAwBqB,wBAAxB,GAAmD,UAAUJ,CAAV,EAAa;AAC5D,QAAIK,gBAAgB,GAAG,KAAKA,gBAA5B;;AACA,QAAIA,gBAAgB,IAAI,IAApB,IAA4BA,gBAAgB,KAAK,CAArD,EAAwD;AACpD,WAAKC,cAAL,CAAoB9B,QAApB;AACA,UAAI+B,IAAI,GAAG/B,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAd,GAAkB,CAAC,CAAnB,GAAuB,CAAlC;AACA,UAAIgC,IAAI,GAAGhC,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAd,GAAkB,CAAC,CAAnB,GAAuB,CAAlC;AACA,UAAIiC,EAAE,GAAG,CAAC,CAACjC,QAAQ,CAAC,CAAD,CAAR,GAAc+B,IAAf,IAAuBF,gBAAvB,GAA0CE,IAA3C,IAAmD/B,QAAQ,CAAC,CAAD,CAA3D,IAAkE,CAA3E;AACA,UAAIkC,EAAE,GAAG,CAAC,CAAClC,QAAQ,CAAC,CAAD,CAAR,GAAcgC,IAAf,IAAuBH,gBAAvB,GAA0CG,IAA3C,IAAmDhC,QAAQ,CAAC,CAAD,CAA3D,IAAkE,CAA3E;AACAwB,MAAAA,CAAC,CAAC,CAAD,CAAD,IAAQS,EAAR;AACAT,MAAAA,CAAC,CAAC,CAAD,CAAD,IAAQS,EAAR;AACAT,MAAAA,CAAC,CAAC,CAAD,CAAD,IAAQU,EAAR;AACAV,MAAAA,CAAC,CAAC,CAAD,CAAD,IAAQU,EAAR;AACH;;AACD,SAAKC,YAAL,GAAoB,KAAKA,YAAL,IAAqB1C,MAAM,CAACU,MAAP,EAAzC;AACAV,IAAAA,MAAM,CAAC2C,MAAP,CAAc,KAAKD,YAAnB,EAAiCX,CAAjC;AACH,GAfD;;AAgBAlB,EAAAA,aAAa,CAACC,SAAd,CAAwBkB,iBAAxB,GAA4C,UAAUD,CAAV,EAAa;AACrD,WAAOlB,aAAa,CAACmB,iBAAd,CAAgC,IAAhC,EAAsCD,CAAtC,CAAP;AACH,GAFD;;AAGAlB,EAAAA,aAAa,CAACC,SAAd,CAAwB8B,oBAAxB,GAA+C,YAAY;AACvD,QAAIC,aAAa,GAAG,IAApB;AACA,QAAIC,SAAS,GAAG,EAAhB;;AACA,WAAOD,aAAP,EAAsB;AAClBC,MAAAA,SAAS,CAACC,IAAV,CAAeF,aAAf;AACAA,MAAAA,aAAa,GAAGA,aAAa,CAACjB,MAA9B;AACH;;AACD,WAAOiB,aAAa,GAAGC,SAAS,CAACE,GAAV,EAAvB,EAAwC;AACpCH,MAAAA,aAAa,CAAClB,eAAd;AACH;;AACD,WAAO,KAAKG,SAAZ;AACH,GAXD;;AAYAjB,EAAAA,aAAa,CAACC,SAAd,CAAwBmC,iBAAxB,GAA4C,UAAUlB,CAAV,EAAa;AACrD,QAAI,CAACA,CAAL,EAAQ;AACJ;AACH;;AACD,QAAIS,EAAE,GAAGT,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAR,GAAcA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAA/B;AACA,QAAIU,EAAE,GAAGV,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAR,GAAcA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAA/B;;AACA,QAAI1B,eAAe,CAACmC,EAAE,GAAG,CAAN,CAAnB,EAA6B;AACzBA,MAAAA,EAAE,GAAG5B,IAAI,CAACsC,IAAL,CAAUV,EAAV,CAAL;AACH;;AACD,QAAInC,eAAe,CAACoC,EAAE,GAAG,CAAN,CAAnB,EAA6B;AACzBA,MAAAA,EAAE,GAAG7B,IAAI,CAACsC,IAAL,CAAUT,EAAV,CAAL;AACH;;AACD,QAAIV,CAAC,CAAC,CAAD,CAAD,GAAO,CAAX,EAAc;AACVS,MAAAA,EAAE,GAAG,CAACA,EAAN;AACH;;AACD,QAAIT,CAAC,CAAC,CAAD,CAAD,GAAO,CAAX,EAAc;AACVU,MAAAA,EAAE,GAAG,CAACA,EAAN;AACH;;AACD,SAAKf,QAAL,GAAgBd,IAAI,CAACuC,KAAL,CAAW,CAACpB,CAAC,CAAC,CAAD,CAAF,GAAQU,EAAnB,EAAuBV,CAAC,CAAC,CAAD,CAAD,GAAOS,EAA9B,CAAhB;;AACA,QAAIA,EAAE,GAAG,CAAL,IAAUC,EAAE,GAAG,CAAnB,EAAsB;AAClB,WAAKf,QAAL,IAAiBd,IAAI,CAACwC,EAAtB;AACAZ,MAAAA,EAAE,GAAG,CAACA,EAAN;AACAC,MAAAA,EAAE,GAAG,CAACA,EAAN;AACH;;AACD,SAAKxB,CAAL,GAASc,CAAC,CAAC,CAAD,CAAV;AACA,SAAKb,CAAL,GAASa,CAAC,CAAC,CAAD,CAAV;AACA,SAAKX,MAAL,GAAcoB,EAAd;AACA,SAAKnB,MAAL,GAAcoB,EAAd;AACH,GA5BD;;AA6BA5B,EAAAA,aAAa,CAACC,SAAd,CAAwBuC,kBAAxB,GAA6C,YAAY;AACrD,QAAI,CAAC,KAAKvB,SAAV,EAAqB;AACjB;AACH;;AACD,QAAIF,MAAM,GAAG,KAAKA,MAAlB;AACA,QAAIG,CAAC,GAAG,KAAKD,SAAb;;AACA,QAAIF,MAAM,IAAIA,MAAM,CAACE,SAArB,EAAgC;AAC5B9B,MAAAA,MAAM,CAACiC,GAAP,CAAWzB,YAAX,EAAyBoB,MAAM,CAACc,YAAhC,EAA8CX,CAA9C;AACAA,MAAAA,CAAC,GAAGvB,YAAJ;AACH;;AACD,QAAI8C,EAAE,GAAG,KAAK/B,OAAd;AACA,QAAIgC,EAAE,GAAG,KAAK/B,OAAd;;AACA,QAAI8B,EAAE,IAAIC,EAAV,EAAc;AACV9C,MAAAA,eAAe,CAAC,CAAD,CAAf,GAAqB6C,EAArB;AACA7C,MAAAA,eAAe,CAAC,CAAD,CAAf,GAAqB8C,EAArB;AACAvD,MAAAA,MAAM,CAACiC,GAAP,CAAWzB,YAAX,EAAyBuB,CAAzB,EAA4BtB,eAA5B;AACAD,MAAAA,YAAY,CAAC,CAAD,CAAZ,IAAmB8C,EAAnB;AACA9C,MAAAA,YAAY,CAAC,CAAD,CAAZ,IAAmB+C,EAAnB;AACAxB,MAAAA,CAAC,GAAGvB,YAAJ;AACH;;AACD,SAAKyC,iBAAL,CAAuBlB,CAAvB;AACH,GArBD;;AAsBAlB,EAAAA,aAAa,CAACC,SAAd,CAAwBuB,cAAxB,GAAyC,UAAUmB,GAAV,EAAe;AACpD,QAAIzB,CAAC,GAAG,KAAKD,SAAb;AACA0B,IAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;;AACA,QAAI,CAACzB,CAAL,EAAQ;AACJyB,MAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACA,aAAOA,GAAP;AACH;;AACDA,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAS5C,IAAI,CAACsC,IAAL,CAAUnB,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAR,GAAcA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAhC,CAAT;AACAyB,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAS5C,IAAI,CAACsC,IAAL,CAAUnB,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAR,GAAcA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAhC,CAAT;;AACA,QAAIA,CAAC,CAAC,CAAD,CAAD,GAAO,CAAX,EAAc;AACVyB,MAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACA,GAAG,CAAC,CAAD,CAAb;AACH;;AACD,QAAIzB,CAAC,CAAC,CAAD,CAAD,GAAO,CAAX,EAAc;AACVyB,MAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACA,GAAG,CAAC,CAAD,CAAb;AACH;;AACD,WAAOA,GAAP;AACH,GAjBD;;AAkBA3C,EAAAA,aAAa,CAACC,SAAd,CAAwB2C,qBAAxB,GAAgD,UAAUxC,CAAV,EAAaC,CAAb,EAAgB;AAC5D,QAAIwC,EAAE,GAAG,CAACzC,CAAD,EAAIC,CAAJ,CAAT;AACA,QAAIwB,YAAY,GAAG,KAAKA,YAAxB;;AACA,QAAIA,YAAJ,EAAkB;AACdzC,MAAAA,MAAM,CAAC0D,cAAP,CAAsBD,EAAtB,EAA0BA,EAA1B,EAA8BhB,YAA9B;AACH;;AACD,WAAOgB,EAAP;AACH,GAPD;;AAQA7C,EAAAA,aAAa,CAACC,SAAd,CAAwB8C,sBAAxB,GAAiD,UAAU3C,CAAV,EAAaC,CAAb,EAAgB;AAC7D,QAAIwC,EAAE,GAAG,CAACzC,CAAD,EAAIC,CAAJ,CAAT;AACA,QAAIY,SAAS,GAAG,KAAKA,SAArB;;AACA,QAAIA,SAAJ,EAAe;AACX7B,MAAAA,MAAM,CAAC0D,cAAP,CAAsBD,EAAtB,EAA0BA,EAA1B,EAA8B5B,SAA9B;AACH;;AACD,WAAO4B,EAAP;AACH,GAPD;;AAQA7C,EAAAA,aAAa,CAACC,SAAd,CAAwB+C,YAAxB,GAAuC,YAAY;AAC/C,QAAI9B,CAAC,GAAG,KAAKD,SAAb;AACA,WAAOC,CAAC,IAAIpB,GAAG,CAACoB,CAAC,CAAC,CAAD,CAAD,GAAO,CAAR,CAAH,GAAgB,KAArB,IAA8BpB,GAAG,CAACoB,CAAC,CAAC,CAAD,CAAD,GAAO,CAAR,CAAH,GAAgB,KAA9C,GACDnB,IAAI,CAACsC,IAAL,CAAUvC,GAAG,CAACoB,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAR,GAAcA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAvB,CAAb,CADC,GAED,CAFN;AAGH,GALD;;AAMAlB,EAAAA,aAAa,CAACmB,iBAAd,GAAkC,UAAU8B,MAAV,EAAkB/B,CAAlB,EAAqB;AACnDA,IAAAA,CAAC,GAAGA,CAAC,IAAI,EAAT;AACA7B,IAAAA,SAAS,CAAC6B,CAAD,CAAT;AACA,QAAIuB,EAAE,GAAGQ,MAAM,CAACvC,OAAP,IAAkB,CAA3B;AACA,QAAIgC,EAAE,GAAGO,MAAM,CAACtC,OAAP,IAAkB,CAA3B;AACA,QAAIgB,EAAE,GAAGsB,MAAM,CAAC1C,MAAhB;AACA,QAAIqB,EAAE,GAAGqB,MAAM,CAACzC,MAAhB;AACA,QAAIK,QAAQ,GAAGoC,MAAM,CAACpC,QAAP,IAAmB,CAAlC;AACA,QAAIT,CAAC,GAAG6C,MAAM,CAAC7C,CAAf;AACA,QAAIC,CAAC,GAAG4C,MAAM,CAAC5C,CAAf;AACAa,IAAAA,CAAC,CAAC,CAAD,CAAD,IAAQuB,EAAR;AACAvB,IAAAA,CAAC,CAAC,CAAD,CAAD,IAAQwB,EAAR;AACAxB,IAAAA,CAAC,CAAC,CAAD,CAAD,IAAQS,EAAR;AACAT,IAAAA,CAAC,CAAC,CAAD,CAAD,IAAQU,EAAR;AACAV,IAAAA,CAAC,CAAC,CAAD,CAAD,IAAQS,EAAR;AACAT,IAAAA,CAAC,CAAC,CAAD,CAAD,IAAQU,EAAR;AACAV,IAAAA,CAAC,CAAC,CAAD,CAAD,IAAQS,EAAR;AACAT,IAAAA,CAAC,CAAC,CAAD,CAAD,IAAQU,EAAR;;AACA,QAAIf,QAAJ,EAAc;AACV1B,MAAAA,MAAM,CAAC+D,MAAP,CAAchC,CAAd,EAAiBA,CAAjB,EAAoBL,QAApB;AACH;;AACDK,IAAAA,CAAC,CAAC,CAAD,CAAD,IAAQuB,EAAR;AACAvB,IAAAA,CAAC,CAAC,CAAD,CAAD,IAAQwB,EAAR;AACAxB,IAAAA,CAAC,CAAC,CAAD,CAAD,IAAQd,CAAR;AACAc,IAAAA,CAAC,CAAC,CAAD,CAAD,IAAQb,CAAR;AACA,WAAOa,CAAP;AACH,GA1BD;;AA2BAlB,EAAAA,aAAa,CAACmD,gBAAd,GAAkC,YAAY;AAC1C,QAAIC,KAAK,GAAGpD,aAAa,CAACC,SAA1B;AACAmD,IAAAA,KAAK,CAAChD,CAAN,GAAU,CAAV;AACAgD,IAAAA,KAAK,CAAC/C,CAAN,GAAU,CAAV;AACA+C,IAAAA,KAAK,CAAC7C,MAAN,GAAe,CAAf;AACA6C,IAAAA,KAAK,CAAC5C,MAAN,GAAe,CAAf;AACA4C,IAAAA,KAAK,CAAC1C,OAAN,GAAgB,CAAhB;AACA0C,IAAAA,KAAK,CAACzC,OAAN,GAAgB,CAAhB;AACAyC,IAAAA,KAAK,CAACvC,QAAN,GAAiB,CAAjB;AACAuC,IAAAA,KAAK,CAAC7B,gBAAN,GAAyB,CAAzB;AACH,GAVgC,EAAjC;;AAWA,SAAOvB,aAAP;AACH,CAlNoB,EAArB;;AAmNA;AACA,eAAeA,aAAf","sourcesContent":["import * as matrix from './matrix';\nimport * as vector from './vector';\nvar mIdentity = matrix.identity;\nvar EPSILON = 5e-5;\nfunction isNotAroundZero(val) {\n    return val > EPSILON || val < -EPSILON;\n}\nvar scaleTmp = [];\nvar tmpTransform = [];\nvar originTransform = matrix.create();\nvar abs = Math.abs;\nvar Transformable = (function () {\n    function Transformable() {\n    }\n    Transformable.prototype.setPosition = function (arr) {\n        this.x = arr[0];\n        this.y = arr[1];\n    };\n    Transformable.prototype.setScale = function (arr) {\n        this.scaleX = arr[0];\n        this.scaleY = arr[1];\n    };\n    Transformable.prototype.setOrigin = function (arr) {\n        this.originX = arr[0];\n        this.originY = arr[1];\n    };\n    Transformable.prototype.needLocalTransform = function () {\n        return isNotAroundZero(this.rotation)\n            || isNotAroundZero(this.x)\n            || isNotAroundZero(this.y)\n            || isNotAroundZero(this.scaleX - 1)\n            || isNotAroundZero(this.scaleY - 1);\n    };\n    Transformable.prototype.updateTransform = function () {\n        var parent = this.parent;\n        var parentHasTransform = parent && parent.transform;\n        var needLocalTransform = this.needLocalTransform();\n        var m = this.transform;\n        if (!(needLocalTransform || parentHasTransform)) {\n            m && mIdentity(m);\n            return;\n        }\n        m = m || matrix.create();\n        if (needLocalTransform) {\n            this.getLocalTransform(m);\n        }\n        else {\n            mIdentity(m);\n        }\n        if (parentHasTransform) {\n            if (needLocalTransform) {\n                matrix.mul(m, parent.transform, m);\n            }\n            else {\n                matrix.copy(m, parent.transform);\n            }\n        }\n        this.transform = m;\n        this._resolveGlobalScaleRatio(m);\n    };\n    Transformable.prototype._resolveGlobalScaleRatio = function (m) {\n        var globalScaleRatio = this.globalScaleRatio;\n        if (globalScaleRatio != null && globalScaleRatio !== 1) {\n            this.getGlobalScale(scaleTmp);\n            var relX = scaleTmp[0] < 0 ? -1 : 1;\n            var relY = scaleTmp[1] < 0 ? -1 : 1;\n            var sx = ((scaleTmp[0] - relX) * globalScaleRatio + relX) / scaleTmp[0] || 0;\n            var sy = ((scaleTmp[1] - relY) * globalScaleRatio + relY) / scaleTmp[1] || 0;\n            m[0] *= sx;\n            m[1] *= sx;\n            m[2] *= sy;\n            m[3] *= sy;\n        }\n        this.invTransform = this.invTransform || matrix.create();\n        matrix.invert(this.invTransform, m);\n    };\n    Transformable.prototype.getLocalTransform = function (m) {\n        return Transformable.getLocalTransform(this, m);\n    };\n    Transformable.prototype.getComputedTransform = function () {\n        var transformNode = this;\n        var ancestors = [];\n        while (transformNode) {\n            ancestors.push(transformNode);\n            transformNode = transformNode.parent;\n        }\n        while (transformNode = ancestors.pop()) {\n            transformNode.updateTransform();\n        }\n        return this.transform;\n    };\n    Transformable.prototype.setLocalTransform = function (m) {\n        if (!m) {\n            return;\n        }\n        var sx = m[0] * m[0] + m[1] * m[1];\n        var sy = m[2] * m[2] + m[3] * m[3];\n        if (isNotAroundZero(sx - 1)) {\n            sx = Math.sqrt(sx);\n        }\n        if (isNotAroundZero(sy - 1)) {\n            sy = Math.sqrt(sy);\n        }\n        if (m[0] < 0) {\n            sx = -sx;\n        }\n        if (m[3] < 0) {\n            sy = -sy;\n        }\n        this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);\n        if (sx < 0 && sy < 0) {\n            this.rotation += Math.PI;\n            sx = -sx;\n            sy = -sy;\n        }\n        this.x = m[4];\n        this.y = m[5];\n        this.scaleX = sx;\n        this.scaleY = sy;\n    };\n    Transformable.prototype.decomposeTransform = function () {\n        if (!this.transform) {\n            return;\n        }\n        var parent = this.parent;\n        var m = this.transform;\n        if (parent && parent.transform) {\n            matrix.mul(tmpTransform, parent.invTransform, m);\n            m = tmpTransform;\n        }\n        var ox = this.originX;\n        var oy = this.originY;\n        if (ox || oy) {\n            originTransform[4] = ox;\n            originTransform[5] = oy;\n            matrix.mul(tmpTransform, m, originTransform);\n            tmpTransform[4] -= ox;\n            tmpTransform[5] -= oy;\n            m = tmpTransform;\n        }\n        this.setLocalTransform(m);\n    };\n    Transformable.prototype.getGlobalScale = function (out) {\n        var m = this.transform;\n        out = out || [];\n        if (!m) {\n            out[0] = 1;\n            out[1] = 1;\n            return out;\n        }\n        out[0] = Math.sqrt(m[0] * m[0] + m[1] * m[1]);\n        out[1] = Math.sqrt(m[2] * m[2] + m[3] * m[3]);\n        if (m[0] < 0) {\n            out[0] = -out[0];\n        }\n        if (m[3] < 0) {\n            out[1] = -out[1];\n        }\n        return out;\n    };\n    Transformable.prototype.transformCoordToLocal = function (x, y) {\n        var v2 = [x, y];\n        var invTransform = this.invTransform;\n        if (invTransform) {\n            vector.applyTransform(v2, v2, invTransform);\n        }\n        return v2;\n    };\n    Transformable.prototype.transformCoordToGlobal = function (x, y) {\n        var v2 = [x, y];\n        var transform = this.transform;\n        if (transform) {\n            vector.applyTransform(v2, v2, transform);\n        }\n        return v2;\n    };\n    Transformable.prototype.getLineScale = function () {\n        var m = this.transform;\n        return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10\n            ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1]))\n            : 1;\n    };\n    Transformable.getLocalTransform = function (target, m) {\n        m = m || [];\n        mIdentity(m);\n        var ox = target.originX || 0;\n        var oy = target.originY || 0;\n        var sx = target.scaleX;\n        var sy = target.scaleY;\n        var rotation = target.rotation || 0;\n        var x = target.x;\n        var y = target.y;\n        m[4] -= ox;\n        m[5] -= oy;\n        m[0] *= sx;\n        m[1] *= sy;\n        m[2] *= sx;\n        m[3] *= sy;\n        m[4] *= sx;\n        m[5] *= sy;\n        if (rotation) {\n            matrix.rotate(m, m, rotation);\n        }\n        m[4] += ox;\n        m[5] += oy;\n        m[4] += x;\n        m[5] += y;\n        return m;\n    };\n    Transformable.initDefaultProps = (function () {\n        var proto = Transformable.prototype;\n        proto.x = 0;\n        proto.y = 0;\n        proto.scaleX = 1;\n        proto.scaleY = 1;\n        proto.originX = 0;\n        proto.originY = 0;\n        proto.rotation = 0;\n        proto.globalScaleRatio = 1;\n    })();\n    return Transformable;\n}());\n;\nexport default Transformable;\n"]},"metadata":{},"sourceType":"module"}