{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Definable from './Definable';\n\nvar ShadowManager = function (_super) {\n  __extends(ShadowManager, _super);\n\n  function ShadowManager(zrId, svgRoot) {\n    var _this = _super.call(this, zrId, svgRoot, ['filter'], '__filter_in_use__', '_shadowDom') || this;\n\n    _this._shadowDomMap = {};\n    _this._shadowDomPool = [];\n    return _this;\n  }\n\n  ShadowManager.prototype._getFromPool = function () {\n    var shadowDom = this._shadowDomPool.pop();\n\n    if (!shadowDom) {\n      shadowDom = this.createElement('filter');\n      shadowDom.setAttribute('id', 'zr' + this._zrId + '-shadow-' + this.nextId++);\n      var domChild = this.createElement('feDropShadow');\n      shadowDom.appendChild(domChild);\n      this.addDom(shadowDom);\n    }\n\n    return shadowDom;\n  };\n\n  ShadowManager.prototype.update = function (svgElement, displayable) {\n    var style = displayable.style;\n\n    if (hasShadow(style)) {\n      var shadowKey = getShadowKey(displayable);\n      var shadowDom = displayable._shadowDom = this._shadowDomMap[shadowKey];\n\n      if (!shadowDom) {\n        shadowDom = this._getFromPool();\n        this._shadowDomMap[shadowKey] = shadowDom;\n      }\n\n      this.updateDom(svgElement, displayable, shadowDom);\n    } else {\n      this.remove(svgElement, displayable);\n    }\n  };\n\n  ShadowManager.prototype.remove = function (svgElement, displayable) {\n    if (displayable._shadowDom != null) {\n      displayable._shadowDom = null;\n      svgElement.style.filter = '';\n    }\n  };\n\n  ShadowManager.prototype.updateDom = function (svgElement, displayable, shadowDom) {\n    var domChild = shadowDom.children[0];\n    var style = displayable.style;\n    var globalScale = displayable.getGlobalScale();\n    var scaleX = globalScale[0];\n    var scaleY = globalScale[1];\n\n    if (!scaleX || !scaleY) {\n      return;\n    }\n\n    var offsetX = style.shadowOffsetX || 0;\n    var offsetY = style.shadowOffsetY || 0;\n    var blur = style.shadowBlur;\n    var color = style.shadowColor;\n    domChild.setAttribute('dx', offsetX / scaleX + '');\n    domChild.setAttribute('dy', offsetY / scaleY + '');\n    domChild.setAttribute('flood-color', color);\n    var stdDx = blur / 2 / scaleX;\n    var stdDy = blur / 2 / scaleY;\n    var stdDeviation = stdDx + ' ' + stdDy;\n    domChild.setAttribute('stdDeviation', stdDeviation);\n    shadowDom.setAttribute('x', '-100%');\n    shadowDom.setAttribute('y', '-100%');\n    shadowDom.setAttribute('width', '300%');\n    shadowDom.setAttribute('height', '300%');\n    displayable._shadowDom = shadowDom;\n    var id = shadowDom.getAttribute('id');\n    svgElement.style.filter = 'url(#' + id + ')';\n  };\n\n  ShadowManager.prototype.removeUnused = function () {\n    var defs = this.getDefs(false);\n\n    if (!defs) {\n      return;\n    }\n\n    var shadowDomsPool = this._shadowDomPool;\n\n    for (var key in this._shadowDomMap) {\n      var dom = this._shadowDomMap[key];\n      shadowDomsPool.push(dom);\n    }\n\n    this._shadowDomMap = {};\n  };\n\n  return ShadowManager;\n}(Definable);\n\nexport default ShadowManager;\n\nfunction hasShadow(style) {\n  return style && (style.shadowBlur || style.shadowOffsetX || style.shadowOffsetY);\n}\n\nfunction getShadowKey(displayable) {\n  var style = displayable.style;\n  var globalScale = displayable.getGlobalScale();\n  return [style.shadowColor, (style.shadowBlur || 0).toFixed(2), (style.shadowOffsetX || 0).toFixed(2), (style.shadowOffsetY || 0).toFixed(2), globalScale[0], globalScale[1]].join(',');\n}","map":{"version":3,"sources":["/home/kzj/project/finalize/B-S-/源码/前端/node_modules/zrender/lib/svg/helper/ShadowManager.js"],"names":["__extends","Definable","ShadowManager","_super","zrId","svgRoot","_this","call","_shadowDomMap","_shadowDomPool","prototype","_getFromPool","shadowDom","pop","createElement","setAttribute","_zrId","nextId","domChild","appendChild","addDom","update","svgElement","displayable","style","hasShadow","shadowKey","getShadowKey","_shadowDom","updateDom","remove","filter","children","globalScale","getGlobalScale","scaleX","scaleY","offsetX","shadowOffsetX","offsetY","shadowOffsetY","blur","shadowBlur","color","shadowColor","stdDx","stdDy","stdDeviation","id","getAttribute","removeUnused","defs","getDefs","shadowDomsPool","key","dom","push","toFixed","join"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport Definable from './Definable';\nvar ShadowManager = (function (_super) {\n    __extends(ShadowManager, _super);\n    function ShadowManager(zrId, svgRoot) {\n        var _this = _super.call(this, zrId, svgRoot, ['filter'], '__filter_in_use__', '_shadowDom') || this;\n        _this._shadowDomMap = {};\n        _this._shadowDomPool = [];\n        return _this;\n    }\n    ShadowManager.prototype._getFromPool = function () {\n        var shadowDom = this._shadowDomPool.pop();\n        if (!shadowDom) {\n            shadowDom = this.createElement('filter');\n            shadowDom.setAttribute('id', 'zr' + this._zrId + '-shadow-' + this.nextId++);\n            var domChild = this.createElement('feDropShadow');\n            shadowDom.appendChild(domChild);\n            this.addDom(shadowDom);\n        }\n        return shadowDom;\n    };\n    ShadowManager.prototype.update = function (svgElement, displayable) {\n        var style = displayable.style;\n        if (hasShadow(style)) {\n            var shadowKey = getShadowKey(displayable);\n            var shadowDom = displayable._shadowDom = this._shadowDomMap[shadowKey];\n            if (!shadowDom) {\n                shadowDom = this._getFromPool();\n                this._shadowDomMap[shadowKey] = shadowDom;\n            }\n            this.updateDom(svgElement, displayable, shadowDom);\n        }\n        else {\n            this.remove(svgElement, displayable);\n        }\n    };\n    ShadowManager.prototype.remove = function (svgElement, displayable) {\n        if (displayable._shadowDom != null) {\n            displayable._shadowDom = null;\n            svgElement.style.filter = '';\n        }\n    };\n    ShadowManager.prototype.updateDom = function (svgElement, displayable, shadowDom) {\n        var domChild = shadowDom.children[0];\n        var style = displayable.style;\n        var globalScale = displayable.getGlobalScale();\n        var scaleX = globalScale[0];\n        var scaleY = globalScale[1];\n        if (!scaleX || !scaleY) {\n            return;\n        }\n        var offsetX = style.shadowOffsetX || 0;\n        var offsetY = style.shadowOffsetY || 0;\n        var blur = style.shadowBlur;\n        var color = style.shadowColor;\n        domChild.setAttribute('dx', offsetX / scaleX + '');\n        domChild.setAttribute('dy', offsetY / scaleY + '');\n        domChild.setAttribute('flood-color', color);\n        var stdDx = blur / 2 / scaleX;\n        var stdDy = blur / 2 / scaleY;\n        var stdDeviation = stdDx + ' ' + stdDy;\n        domChild.setAttribute('stdDeviation', stdDeviation);\n        shadowDom.setAttribute('x', '-100%');\n        shadowDom.setAttribute('y', '-100%');\n        shadowDom.setAttribute('width', '300%');\n        shadowDom.setAttribute('height', '300%');\n        displayable._shadowDom = shadowDom;\n        var id = shadowDom.getAttribute('id');\n        svgElement.style.filter = 'url(#' + id + ')';\n    };\n    ShadowManager.prototype.removeUnused = function () {\n        var defs = this.getDefs(false);\n        if (!defs) {\n            return;\n        }\n        var shadowDomsPool = this._shadowDomPool;\n        for (var key in this._shadowDomMap) {\n            var dom = this._shadowDomMap[key];\n            shadowDomsPool.push(dom);\n        }\n        this._shadowDomMap = {};\n    };\n    return ShadowManager;\n}(Definable));\nexport default ShadowManager;\nfunction hasShadow(style) {\n    return style\n        && (style.shadowBlur || style.shadowOffsetX || style.shadowOffsetY);\n}\nfunction getShadowKey(displayable) {\n    var style = displayable.style;\n    var globalScale = displayable.getGlobalScale();\n    return [\n        style.shadowColor,\n        (style.shadowBlur || 0).toFixed(2),\n        (style.shadowOffsetX || 0).toFixed(2),\n        (style.shadowOffsetY || 0).toFixed(2),\n        globalScale[0],\n        globalScale[1]\n    ].join(',');\n}\n"]},"metadata":{},"sourceType":"module"}