{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { createHashMap, isObject, map } from 'zrender/lib/core/util';\n\nvar OrdinalMeta =\n/** @class */\nfunction () {\n  function OrdinalMeta(opt) {\n    this.categories = opt.categories || [];\n    this._needCollect = opt.needCollect;\n    this._deduplication = opt.deduplication;\n  }\n\n  OrdinalMeta.createByAxisModel = function (axisModel) {\n    var option = axisModel.option;\n    var data = option.data;\n    var categories = data && map(data, getName);\n    return new OrdinalMeta({\n      categories: categories,\n      needCollect: !categories,\n      // deduplication is default in axis.\n      deduplication: option.dedplication !== false\n    });\n  };\n\n  ;\n\n  OrdinalMeta.prototype.getOrdinal = function (category) {\n    // @ts-ignore\n    return this._getOrCreateMap().get(category);\n  };\n  /**\n   * @return The ordinal. If not found, return NaN.\n   */\n\n\n  OrdinalMeta.prototype.parseAndCollect = function (category) {\n    var index;\n    var needCollect = this._needCollect; // The value of category dim can be the index of the given category set.\n    // This feature is only supported when !needCollect, because we should\n    // consider a common case: a value is 2017, which is a number but is\n    // expected to be tread as a category. This case usually happen in dataset,\n    // where it happent to be no need of the index feature.\n\n    if (typeof category !== 'string' && !needCollect) {\n      return category;\n    } // Optimize for the scenario:\n    // category is ['2012-01-01', '2012-01-02', ...], where the input\n    // data has been ensured not duplicate and is large data.\n    // Notice, if a dataset dimension provide categroies, usually echarts\n    // should remove duplication except user tell echarts dont do that\n    // (set axis.deduplication = false), because echarts do not know whether\n    // the values in the category dimension has duplication (consider the\n    // parallel-aqi example)\n\n\n    if (needCollect && !this._deduplication) {\n      index = this.categories.length;\n      this.categories[index] = category;\n      return index;\n    }\n\n    var map = this._getOrCreateMap(); // @ts-ignore\n\n\n    index = map.get(category);\n\n    if (index == null) {\n      if (needCollect) {\n        index = this.categories.length;\n        this.categories[index] = category; // @ts-ignore\n\n        map.set(category, index);\n      } else {\n        index = NaN;\n      }\n    }\n\n    return index;\n  }; // Consider big data, do not create map until needed.\n\n\n  OrdinalMeta.prototype._getOrCreateMap = function () {\n    return this._map || (this._map = createHashMap(this.categories));\n  };\n\n  return OrdinalMeta;\n}();\n\nfunction getName(obj) {\n  if (isObject(obj) && obj.value != null) {\n    return obj.value;\n  } else {\n    return obj + '';\n  }\n}\n\nexport default OrdinalMeta;","map":{"version":3,"sources":["/home/kzj/project/finalize/B-S-/源码/前端/node_modules/echarts/lib/data/OrdinalMeta.js"],"names":["createHashMap","isObject","map","OrdinalMeta","opt","categories","_needCollect","needCollect","_deduplication","deduplication","createByAxisModel","axisModel","option","data","getName","dedplication","prototype","getOrdinal","category","_getOrCreateMap","get","parseAndCollect","index","length","set","NaN","_map","obj","value"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { createHashMap, isObject, map } from 'zrender/lib/core/util';\n\nvar OrdinalMeta =\n/** @class */\nfunction () {\n  function OrdinalMeta(opt) {\n    this.categories = opt.categories || [];\n    this._needCollect = opt.needCollect;\n    this._deduplication = opt.deduplication;\n  }\n\n  OrdinalMeta.createByAxisModel = function (axisModel) {\n    var option = axisModel.option;\n    var data = option.data;\n    var categories = data && map(data, getName);\n    return new OrdinalMeta({\n      categories: categories,\n      needCollect: !categories,\n      // deduplication is default in axis.\n      deduplication: option.dedplication !== false\n    });\n  };\n\n  ;\n\n  OrdinalMeta.prototype.getOrdinal = function (category) {\n    // @ts-ignore\n    return this._getOrCreateMap().get(category);\n  };\n  /**\n   * @return The ordinal. If not found, return NaN.\n   */\n\n\n  OrdinalMeta.prototype.parseAndCollect = function (category) {\n    var index;\n    var needCollect = this._needCollect; // The value of category dim can be the index of the given category set.\n    // This feature is only supported when !needCollect, because we should\n    // consider a common case: a value is 2017, which is a number but is\n    // expected to be tread as a category. This case usually happen in dataset,\n    // where it happent to be no need of the index feature.\n\n    if (typeof category !== 'string' && !needCollect) {\n      return category;\n    } // Optimize for the scenario:\n    // category is ['2012-01-01', '2012-01-02', ...], where the input\n    // data has been ensured not duplicate and is large data.\n    // Notice, if a dataset dimension provide categroies, usually echarts\n    // should remove duplication except user tell echarts dont do that\n    // (set axis.deduplication = false), because echarts do not know whether\n    // the values in the category dimension has duplication (consider the\n    // parallel-aqi example)\n\n\n    if (needCollect && !this._deduplication) {\n      index = this.categories.length;\n      this.categories[index] = category;\n      return index;\n    }\n\n    var map = this._getOrCreateMap(); // @ts-ignore\n\n\n    index = map.get(category);\n\n    if (index == null) {\n      if (needCollect) {\n        index = this.categories.length;\n        this.categories[index] = category; // @ts-ignore\n\n        map.set(category, index);\n      } else {\n        index = NaN;\n      }\n    }\n\n    return index;\n  }; // Consider big data, do not create map until needed.\n\n\n  OrdinalMeta.prototype._getOrCreateMap = function () {\n    return this._map || (this._map = createHashMap(this.categories));\n  };\n\n  return OrdinalMeta;\n}();\n\nfunction getName(obj) {\n  if (isObject(obj) && obj.value != null) {\n    return obj.value;\n  } else {\n    return obj + '';\n  }\n}\n\nexport default OrdinalMeta;"]},"metadata":{},"sourceType":"module"}