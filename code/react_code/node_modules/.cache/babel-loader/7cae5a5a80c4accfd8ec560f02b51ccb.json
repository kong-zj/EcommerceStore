{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Definable from './Definable';\nimport * as zrUtil from '../../core/util';\nimport { isClipPathChanged } from '../../canvas/helper';\n\nfunction generateClipPathsKey(clipPaths) {\n  var key = [];\n\n  if (clipPaths) {\n    for (var i = 0; i < clipPaths.length; i++) {\n      var clipPath = clipPaths[i];\n      key.push(clipPath.id);\n    }\n  }\n\n  return key.join(',');\n}\n\nexport function hasClipPath(displayable) {\n  var clipPaths = displayable.__clipPaths;\n  return clipPaths && clipPaths.length > 0;\n}\n\nvar ClippathManager = function (_super) {\n  __extends(ClippathManager, _super);\n\n  function ClippathManager(zrId, svgRoot) {\n    var _this = _super.call(this, zrId, svgRoot, 'clipPath', '__clippath_in_use__') || this;\n\n    _this._refGroups = {};\n    _this._keyDuplicateCount = {};\n    return _this;\n  }\n\n  ClippathManager.prototype.markAllUnused = function () {\n    _super.prototype.markAllUnused.call(this);\n\n    for (var key in this._refGroups) {\n      this.markDomUnused(this._refGroups[key]);\n    }\n\n    this._keyDuplicateCount = {};\n  };\n\n  ClippathManager.prototype._getClipPathGroup = function (displayable, prevDisplayable) {\n    if (!hasClipPath(displayable)) {\n      return;\n    }\n\n    var clipPaths = displayable.__clipPaths;\n    var keyDuplicateCount = this._keyDuplicateCount;\n    var clipPathKey = generateClipPathsKey(clipPaths);\n\n    if (isClipPathChanged(clipPaths, prevDisplayable && prevDisplayable.__clipPaths)) {\n      keyDuplicateCount[clipPathKey] = keyDuplicateCount[clipPathKey] || 0;\n      keyDuplicateCount[clipPathKey] && (clipPathKey += '-' + keyDuplicateCount[clipPathKey]);\n      keyDuplicateCount[clipPathKey]++;\n    }\n\n    return this._refGroups[clipPathKey] || (this._refGroups[clipPathKey] = this.createElement('g'));\n  };\n\n  ClippathManager.prototype.update = function (displayable, prevDisplayable) {\n    var clipGroup = this._getClipPathGroup(displayable, prevDisplayable);\n\n    if (clipGroup) {\n      this.markDomUsed(clipGroup);\n      this.updateDom(clipGroup, displayable.__clipPaths);\n    }\n\n    return clipGroup;\n  };\n\n  ;\n\n  ClippathManager.prototype.updateDom = function (parentEl, clipPaths) {\n    if (clipPaths && clipPaths.length > 0) {\n      var defs = this.getDefs(true);\n      var clipPath = clipPaths[0];\n      var clipPathEl = void 0;\n      var id = void 0;\n\n      if (clipPath._dom) {\n        id = clipPath._dom.getAttribute('id');\n        clipPathEl = clipPath._dom;\n\n        if (!defs.contains(clipPathEl)) {\n          defs.appendChild(clipPathEl);\n        }\n      } else {\n        id = 'zr' + this._zrId + '-clip-' + this.nextId;\n        ++this.nextId;\n        clipPathEl = this.createElement('clipPath');\n        clipPathEl.setAttribute('id', id);\n        defs.appendChild(clipPathEl);\n        clipPath._dom = clipPathEl;\n      }\n\n      var svgProxy = this.getSvgProxy(clipPath);\n      svgProxy.brush(clipPath);\n      var pathEl = this.getSvgElement(clipPath);\n      clipPathEl.innerHTML = '';\n      clipPathEl.appendChild(pathEl);\n      parentEl.setAttribute('clip-path', 'url(#' + id + ')');\n\n      if (clipPaths.length > 1) {\n        this.updateDom(clipPathEl, clipPaths.slice(1));\n      }\n    } else {\n      if (parentEl) {\n        parentEl.setAttribute('clip-path', 'none');\n      }\n    }\n  };\n\n  ;\n\n  ClippathManager.prototype.markUsed = function (displayable) {\n    var _this = this;\n\n    if (displayable.__clipPaths) {\n      zrUtil.each(displayable.__clipPaths, function (clipPath) {\n        if (clipPath._dom) {\n          _super.prototype.markDomUsed.call(_this, clipPath._dom);\n        }\n      });\n    }\n  };\n\n  ;\n\n  ClippathManager.prototype.removeUnused = function () {\n    _super.prototype.removeUnused.call(this);\n\n    var newRefGroupsMap = {};\n\n    for (var key in this._refGroups) {\n      var group = this._refGroups[key];\n\n      if (!this.isDomUnused(group)) {\n        newRefGroupsMap[key] = group;\n      } else if (group.parentNode) {\n        group.parentNode.removeChild(group);\n      }\n    }\n\n    this._refGroups = newRefGroupsMap;\n  };\n\n  return ClippathManager;\n}(Definable);\n\nexport default ClippathManager;","map":{"version":3,"sources":["/home/kzj/project/finalize/B-S-/源码/react_code/node_modules/zrender/lib/svg/helper/ClippathManager.js"],"names":["__extends","Definable","zrUtil","isClipPathChanged","generateClipPathsKey","clipPaths","key","i","length","clipPath","push","id","join","hasClipPath","displayable","__clipPaths","ClippathManager","_super","zrId","svgRoot","_this","call","_refGroups","_keyDuplicateCount","prototype","markAllUnused","markDomUnused","_getClipPathGroup","prevDisplayable","keyDuplicateCount","clipPathKey","createElement","update","clipGroup","markDomUsed","updateDom","parentEl","defs","getDefs","clipPathEl","_dom","getAttribute","contains","appendChild","_zrId","nextId","setAttribute","svgProxy","getSvgProxy","brush","pathEl","getSvgElement","innerHTML","slice","markUsed","each","removeUnused","newRefGroupsMap","group","isDomUnused","parentNode","removeChild"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport Definable from './Definable';\nimport * as zrUtil from '../../core/util';\nimport { isClipPathChanged } from '../../canvas/helper';\nfunction generateClipPathsKey(clipPaths) {\n    var key = [];\n    if (clipPaths) {\n        for (var i = 0; i < clipPaths.length; i++) {\n            var clipPath = clipPaths[i];\n            key.push(clipPath.id);\n        }\n    }\n    return key.join(',');\n}\nexport function hasClipPath(displayable) {\n    var clipPaths = displayable.__clipPaths;\n    return clipPaths && clipPaths.length > 0;\n}\nvar ClippathManager = (function (_super) {\n    __extends(ClippathManager, _super);\n    function ClippathManager(zrId, svgRoot) {\n        var _this = _super.call(this, zrId, svgRoot, 'clipPath', '__clippath_in_use__') || this;\n        _this._refGroups = {};\n        _this._keyDuplicateCount = {};\n        return _this;\n    }\n    ClippathManager.prototype.markAllUnused = function () {\n        _super.prototype.markAllUnused.call(this);\n        for (var key in this._refGroups) {\n            this.markDomUnused(this._refGroups[key]);\n        }\n        this._keyDuplicateCount = {};\n    };\n    ClippathManager.prototype._getClipPathGroup = function (displayable, prevDisplayable) {\n        if (!hasClipPath(displayable)) {\n            return;\n        }\n        var clipPaths = displayable.__clipPaths;\n        var keyDuplicateCount = this._keyDuplicateCount;\n        var clipPathKey = generateClipPathsKey(clipPaths);\n        if (isClipPathChanged(clipPaths, prevDisplayable && prevDisplayable.__clipPaths)) {\n            keyDuplicateCount[clipPathKey] = keyDuplicateCount[clipPathKey] || 0;\n            keyDuplicateCount[clipPathKey] && (clipPathKey += '-' + keyDuplicateCount[clipPathKey]);\n            keyDuplicateCount[clipPathKey]++;\n        }\n        return this._refGroups[clipPathKey]\n            || (this._refGroups[clipPathKey] = this.createElement('g'));\n    };\n    ClippathManager.prototype.update = function (displayable, prevDisplayable) {\n        var clipGroup = this._getClipPathGroup(displayable, prevDisplayable);\n        if (clipGroup) {\n            this.markDomUsed(clipGroup);\n            this.updateDom(clipGroup, displayable.__clipPaths);\n        }\n        return clipGroup;\n    };\n    ;\n    ClippathManager.prototype.updateDom = function (parentEl, clipPaths) {\n        if (clipPaths && clipPaths.length > 0) {\n            var defs = this.getDefs(true);\n            var clipPath = clipPaths[0];\n            var clipPathEl = void 0;\n            var id = void 0;\n            if (clipPath._dom) {\n                id = clipPath._dom.getAttribute('id');\n                clipPathEl = clipPath._dom;\n                if (!defs.contains(clipPathEl)) {\n                    defs.appendChild(clipPathEl);\n                }\n            }\n            else {\n                id = 'zr' + this._zrId + '-clip-' + this.nextId;\n                ++this.nextId;\n                clipPathEl = this.createElement('clipPath');\n                clipPathEl.setAttribute('id', id);\n                defs.appendChild(clipPathEl);\n                clipPath._dom = clipPathEl;\n            }\n            var svgProxy = this.getSvgProxy(clipPath);\n            svgProxy.brush(clipPath);\n            var pathEl = this.getSvgElement(clipPath);\n            clipPathEl.innerHTML = '';\n            clipPathEl.appendChild(pathEl);\n            parentEl.setAttribute('clip-path', 'url(#' + id + ')');\n            if (clipPaths.length > 1) {\n                this.updateDom(clipPathEl, clipPaths.slice(1));\n            }\n        }\n        else {\n            if (parentEl) {\n                parentEl.setAttribute('clip-path', 'none');\n            }\n        }\n    };\n    ;\n    ClippathManager.prototype.markUsed = function (displayable) {\n        var _this = this;\n        if (displayable.__clipPaths) {\n            zrUtil.each(displayable.__clipPaths, function (clipPath) {\n                if (clipPath._dom) {\n                    _super.prototype.markDomUsed.call(_this, clipPath._dom);\n                }\n            });\n        }\n    };\n    ;\n    ClippathManager.prototype.removeUnused = function () {\n        _super.prototype.removeUnused.call(this);\n        var newRefGroupsMap = {};\n        for (var key in this._refGroups) {\n            var group = this._refGroups[key];\n            if (!this.isDomUnused(group)) {\n                newRefGroupsMap[key] = group;\n            }\n            else if (group.parentNode) {\n                group.parentNode.removeChild(group);\n            }\n        }\n        this._refGroups = newRefGroupsMap;\n    };\n    return ClippathManager;\n}(Definable));\nexport default ClippathManager;\n"]},"metadata":{},"sourceType":"module"}