{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport moment from 'moment';\nimport get from \"rc-util/es/utils/get\";\nimport isNil from '../isNil';\nexport var dateFormatterMap = {\n  time: 'HH:mm:ss',\n  timeRange: 'HH:mm:ss',\n  date: 'YYYY-MM-DD',\n  dateWeek: 'YYYY-wo',\n  dateMonth: 'YYYY-MM',\n  dateQuarter: 'YYYY-QQ',\n  dateYear: 'YYYY',\n  dateRange: 'YYYY-MM-DD',\n  dateTime: 'YYYY-MM-DD HH:mm:ss',\n  dateTimeRange: 'YYYY-MM-DD HH:mm:ss'\n};\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nexport function isPlainObject(o) {\n  if (isObject(o) === false) return false; // If has modified constructor\n\n  var ctor = o.constructor;\n  if (ctor === undefined) return true; // If has modified prototype\n\n  var prot = ctor.prototype;\n  if (isObject(prot) === false) return false; // If constructor does not have an Object-specific method\n\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  } // Most likely a plain Object\n\n\n  return true;\n}\n/**\n * 根据不同的格式转化 moment\n *\n * @param value\n * @param dateFormatter\n * @param valueType\n */\n\nexport var convertMoment = function convertMoment(value, dateFormatter, valueType) {\n  if (!dateFormatter) {\n    return value;\n  }\n\n  if (moment.isMoment(value)) {\n    if (dateFormatter === 'number') {\n      return value.valueOf();\n    }\n\n    if (dateFormatter === 'string') {\n      return value.format(dateFormatterMap[valueType] || 'YYYY-MM-DD HH:mm:ss');\n    }\n\n    if (typeof dateFormatter === 'string' && dateFormatter !== 'string') {\n      return value.format(dateFormatter);\n    }\n\n    if (typeof dateFormatter === 'function') {\n      return dateFormatter(value, valueType);\n    }\n  }\n\n  return value;\n};\n/**\n * 这里主要是来转化一下数据 将 moment 转化为 string 将 all 默认删除\n *\n * @param value\n * @param dateFormatter\n * @param proColumnsMap\n */\n\nvar conversionMomentValue = function conversionMomentValue(value, dateFormatter, valueTypeMap, omitNil, parentKey) {\n  var tmpValue = {};\n  if (typeof window === 'undefined') return value; // 如果 value 是 string | null | Blob类型 其中之一，直接返回\n  // 形如 {key: [File, File]} 的表单字段当进行第二次递归时会导致其直接越过 typeof value !== 'object' 这一判断 https://github.com/ant-design/pro-components/issues/2071\n\n  if (_typeof(value) !== 'object' || isNil(value) || value instanceof Blob || Array.isArray(value)) {\n    return value;\n  }\n\n  Object.keys(value).forEach(function (key) {\n    var namePath = parentKey ? [parentKey, key].flat(1) : [key];\n    var valueFormatMap = get(valueTypeMap, namePath) || 'text';\n    var valueType = 'text';\n    var dateFormat;\n\n    if (typeof valueFormatMap === 'string') {\n      valueType = valueFormatMap;\n    } else if (valueFormatMap) {\n      valueType = valueFormatMap.valueType;\n      dateFormat = valueFormatMap.dateFormat;\n    }\n\n    var itemValue = value[key];\n\n    if (isNil(itemValue) && omitNil) {\n      return;\n    } // 处理嵌套的情况\n\n\n    if (isPlainObject(itemValue) && // 不是数组\n    !Array.isArray(itemValue) && // 不是 moment\n    !moment.isMoment(itemValue)) {\n      tmpValue[key] = conversionMomentValue(itemValue, dateFormatter, valueTypeMap, omitNil, [key]);\n      return;\n    } // 处理 FormList 的 value\n\n\n    if (Array.isArray(itemValue)) {\n      tmpValue[key] = itemValue.map(function (arrayValue, index) {\n        if (moment.isMoment(arrayValue)) {\n          return convertMoment(arrayValue, dateFormat || dateFormatter, valueType);\n        }\n\n        return conversionMomentValue(arrayValue, dateFormatter, valueTypeMap, omitNil, [key, \"\".concat(index)]);\n      });\n      return;\n    }\n\n    tmpValue[key] = convertMoment(itemValue, dateFormat || dateFormatter, valueType);\n  });\n  return tmpValue;\n};\n\nexport default conversionMomentValue;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/@ant-design/pro-card/node_modules/@ant-design/pro-utils/es/conversionMomentValue/index.js"],"names":["_typeof","moment","get","isNil","dateFormatterMap","time","timeRange","date","dateWeek","dateMonth","dateQuarter","dateYear","dateRange","dateTime","dateTimeRange","isObject","o","Object","prototype","toString","call","isPlainObject","ctor","constructor","undefined","prot","hasOwnProperty","convertMoment","value","dateFormatter","valueType","isMoment","valueOf","format","conversionMomentValue","valueTypeMap","omitNil","parentKey","tmpValue","window","Blob","Array","isArray","keys","forEach","key","namePath","flat","valueFormatMap","dateFormat","itemValue","map","arrayValue","index","concat"],"mappings":"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","sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport moment from 'moment';\nimport get from \"rc-util/es/utils/get\";\nimport isNil from '../isNil';\nexport var dateFormatterMap = {\n  time: 'HH:mm:ss',\n  timeRange: 'HH:mm:ss',\n  date: 'YYYY-MM-DD',\n  dateWeek: 'YYYY-wo',\n  dateMonth: 'YYYY-MM',\n  dateQuarter: 'YYYY-QQ',\n  dateYear: 'YYYY',\n  dateRange: 'YYYY-MM-DD',\n  dateTime: 'YYYY-MM-DD HH:mm:ss',\n  dateTimeRange: 'YYYY-MM-DD HH:mm:ss'\n};\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nexport function isPlainObject(o) {\n  if (isObject(o) === false) return false; // If has modified constructor\n\n  var ctor = o.constructor;\n  if (ctor === undefined) return true; // If has modified prototype\n\n  var prot = ctor.prototype;\n  if (isObject(prot) === false) return false; // If constructor does not have an Object-specific method\n\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  } // Most likely a plain Object\n\n\n  return true;\n}\n/**\n * 根据不同的格式转化 moment\n *\n * @param value\n * @param dateFormatter\n * @param valueType\n */\n\nexport var convertMoment = function convertMoment(value, dateFormatter, valueType) {\n  if (!dateFormatter) {\n    return value;\n  }\n\n  if (moment.isMoment(value)) {\n    if (dateFormatter === 'number') {\n      return value.valueOf();\n    }\n\n    if (dateFormatter === 'string') {\n      return value.format(dateFormatterMap[valueType] || 'YYYY-MM-DD HH:mm:ss');\n    }\n\n    if (typeof dateFormatter === 'string' && dateFormatter !== 'string') {\n      return value.format(dateFormatter);\n    }\n\n    if (typeof dateFormatter === 'function') {\n      return dateFormatter(value, valueType);\n    }\n  }\n\n  return value;\n};\n/**\n * 这里主要是来转化一下数据 将 moment 转化为 string 将 all 默认删除\n *\n * @param value\n * @param dateFormatter\n * @param proColumnsMap\n */\n\nvar conversionMomentValue = function conversionMomentValue(value, dateFormatter, valueTypeMap, omitNil, parentKey) {\n  var tmpValue = {};\n  if (typeof window === 'undefined') return value; // 如果 value 是 string | null | Blob类型 其中之一，直接返回\n  // 形如 {key: [File, File]} 的表单字段当进行第二次递归时会导致其直接越过 typeof value !== 'object' 这一判断 https://github.com/ant-design/pro-components/issues/2071\n\n  if (_typeof(value) !== 'object' || isNil(value) || value instanceof Blob || Array.isArray(value)) {\n    return value;\n  }\n\n  Object.keys(value).forEach(function (key) {\n    var namePath = parentKey ? [parentKey, key].flat(1) : [key];\n    var valueFormatMap = get(valueTypeMap, namePath) || 'text';\n    var valueType = 'text';\n    var dateFormat;\n\n    if (typeof valueFormatMap === 'string') {\n      valueType = valueFormatMap;\n    } else if (valueFormatMap) {\n      valueType = valueFormatMap.valueType;\n      dateFormat = valueFormatMap.dateFormat;\n    }\n\n    var itemValue = value[key];\n\n    if (isNil(itemValue) && omitNil) {\n      return;\n    } // 处理嵌套的情况\n\n\n    if (isPlainObject(itemValue) && // 不是数组\n    !Array.isArray(itemValue) && // 不是 moment\n    !moment.isMoment(itemValue)) {\n      tmpValue[key] = conversionMomentValue(itemValue, dateFormatter, valueTypeMap, omitNil, [key]);\n      return;\n    } // 处理 FormList 的 value\n\n\n    if (Array.isArray(itemValue)) {\n      tmpValue[key] = itemValue.map(function (arrayValue, index) {\n        if (moment.isMoment(arrayValue)) {\n          return convertMoment(arrayValue, dateFormat || dateFormatter, valueType);\n        }\n\n        return conversionMomentValue(arrayValue, dateFormatter, valueTypeMap, omitNil, [key, \"\".concat(index)]);\n      });\n      return;\n    }\n\n    tmpValue[key] = convertMoment(itemValue, dateFormat || dateFormatter, valueType);\n  });\n  return tmpValue;\n};\n\nexport default conversionMomentValue;"]},"metadata":{},"sourceType":"module"}