{"ast":null,"code":"import \"antd/es/descriptions/style\";\nimport _Descriptions from \"antd/es/descriptions\";\nvar _jsxFileName = \"/home/kzj/project/finalize/final/code/react_code/src/pages/Market/AuctionInto/index.jsx\";\nimport React, { Component } from 'react';\nimport cookie from 'react-cookies';\nimport renderProducts from '../../../utils/renderProducts'; //商品列表组件，需要传数据进去\n\nimport ProductList from '../../../components/ProductList'; //不需要接入合约\n//从数据库拿商品信息\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AuctionInto extends Component {\n  // state = {\n  //     productInSell: [],\n  //     productInReveal: [],\n  //     productInFinalize: []\n  // }\n  constructor(props) {\n    super(props);\n\n    this.getProductList = async process => {\n      //New，从后台的mongoDB拿数据\n      let productInProcess = await renderProducts({\n        productProcess: process\n      });\n      console.log(\"getProductList, process = \" + process + \" 请求到的数据为 : \");\n      console.dir(productInProcess.data); //从数据库里拿到的信息是这样的 productArray[0]\n      //结构为\n      // auctionEndTime: 1646381747\n      // auctionStartTime: 1646381347\n      // blockchainId: 1\n      // category: \"Cell Phones & Accessories\"\n      // condition: 0\n      // ipfsDescHash: \"QmRa3BnvMUU6DxnLzxymAd7dweyWAYLzW3R99KkGCJAgRn\"\n      // ipfsImageHash: \"QmZsb9nLACC5zGhZp8ezeA9xMfikGQ6LSu3V3gTVnibeJa\"\n      // name: \"iphone 5\"\n      // price: 2000000000000000000\n      // productStatus: 0\n      // __v: 0\n      // _id: \"6221c928b1126364e456764e\"\n      //要传给 ProductList 用来显示的信息是这样的\n      //name (String)\n      //category (String)\n      //ipfsDescHash (String)\n      //ipfsImageHash (String)\n      //processTime (String) 已结束 或者 距离结束的时间\n      //price (String) 大于1ETH 用 ETH 做单位，小于时用 wei\n      //productStatus (String) 新旧\n      // let arrayLength = productInProcess.data.length;\n\n      let array = productInProcess.data((item, index) => {\n        return {\n          //key从1开始\n          key: index + 1,\n          name: item.name\n        };\n      }); // let array = data.accountAndLastTime.map((item, index) => {\n      //     //计算时间差，判断是否活跃\n      //     //注意mysql返回的 timestamp 与js中的 Date 的区别，以及相互转换\n      //     let timeDifference = new Date() - new Date(item.lastTime);\n      //     console.log(\"这个日期距离现在已经 \" + timeDuration(timeDifference));\n      //     //小于一天时间的是活跃账户\n      //     let tag = ( timeDifference> 24*60*60*1000) ? true : false;\n      //     return {\n      //         //key从1开始\n      //         key: index + 1,\n      //         accountString: item.accountString,\n      //         accountStatus: tag ? 0:1,\n      //         //moment库，格式化时间\n      //         lastTime: moment(item.lastTime).format('yy年M月D日, h:mm:ss a')\n      //     }\n      // });\n\n      console.log(\"格式化后, 即将传入 ProductList 的数据为 : \");\n      console.log(array);\n      return array;\n    };\n\n    this.componentDidMount = () => {\n      console.log(\"生成AuctionInto模块\"); // //注意，不能这样更新，错误写法\n      // this.state.productInSell = await this.getProductList(\"sell\");\n      // this.state.productInReveal = await this.getProductList(\"reveal\");\n      // this.state.productInFinalize = await this.getProductList(\"finalize\");\n      // let productInSell =  this.getProductList(\"sell\");\n      // let productInReveal =  this.getProductList(\"reveal\");\n      // let productInFinalize =  this.getProductList(\"finalize\");\n      // //学习 PersonalInfo 的处理方式\n      // //这里是异步的，在下面的 render 中调用，显示为 null\n      // this.setState({\n      //     productInSell : productInSell,\n      //     productInReveal : productInReveal,\n      //     productInFinalize : productInFinalize\n      // }, () =>{\n      //     console.log(\"this.setState 执行完毕\");\n      // }\n      // )\n      // axios.post(\"/account/showAll\", {\n      //     username:this.state.username\n      // }).then(response => {\n      //     const data =  response.data;\n      //     if(data.status === \"success\"){\n      //         console.log(\"获取该用户所有曾用地址成功\");\n      //         //data.accountAndLastTime 是外层是数组，每个数组元素是字典类型\n      //         //map 方法，数组映射\n      // let array = data.accountAndLastTime.map((item, index) => {\n      //     //计算时间差，判断是否活跃\n      //     //注意mysql返回的 timestamp 与js中的 Date 的区别，以及相互转换\n      //     let timeDifference = new Date() - new Date(item.lastTime);\n      //     console.log(\"这个日期距离现在已经 \" + timeDuration(timeDifference));\n      //     //小于一天时间的是活跃账户\n      //     let tag = ( timeDifference> 24*60*60*1000) ? true : false;\n      //     return {\n      //         //key从1开始\n      //         key: index + 1,\n      //         accountString: item.accountString,\n      //         accountStatus: tag ? 0:1,\n      //         //moment库，格式化时间\n      //         lastTime: moment(item.lastTime).format('yy年M月D日, h:mm:ss a')\n      //     }\n      // });\n      //         console.log(\"map映射后的要放到列表中的数据 array 为 : \");\n      //         console.dir(array);\n      //         this.setState({accountAndLastTimeArray:array});\n      //     }\n      //     else{\n      //         console.log(\"获取该用户所有曾用地址出错\");\n      //         message.warning (\"获取地址信息出错\").then (r  => console.log(r));\n      //     }\n      // }).catch( err => {\n      //     console.log(\"发起获取所有曾用地址的请求失败, ERR : \" + err);\n      // });\n    };\n  } //注意同步，不然还没得到结果，就把null返回了\n\n\n  render() {\n    // const {productInSell,\n    //     productInReveal,\n    //     productInFinalize} = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(_Descriptions, {\n        title: \"\\u51FA\\u793A\\u62A5\\u4EF7\",\n        bordered: true,\n        column: {\n          xxl: 4,\n          xl: 3,\n          lg: 3,\n          md: 3,\n          sm: 2,\n          xs: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ProductList, {\n        productArray: this.getProductList(\"sell\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(_Descriptions, {\n        title: \"\\u63ED\\u793A\\u62A5\\u4EF7\",\n        bordered: true,\n        column: {\n          xxl: 4,\n          xl: 3,\n          lg: 3,\n          md: 3,\n          sm: 2,\n          xs: 1\n        },\n        style: {\n          marginTop: '50px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ProductList, {\n        productArray: this.getProductList(\"reveal\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(_Descriptions, {\n        title: \"\\u62CD\\u5356\\u5B8C\\u6210\",\n        bordered: true,\n        column: {\n          xxl: 4,\n          xl: 3,\n          lg: 3,\n          md: 3,\n          sm: 2,\n          xs: 1\n        },\n        style: {\n          marginTop: '50px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ProductList, {\n        productArray: this.getProductList(\"finalize\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default AuctionInto; // const Shoppi1ng = [\n//     {\n//         title: '消息ID',\n//         dataIndex: 'messageID',\n//         key: 'messageID',\n//     },\n//     {\n//         title: '发送位置',\n//         dataIndex: 'location',\n//         key: 'location'\n//     },\n//     {\n//         title: '消息类型',\n//         key: 'messageType',\n//         dataIndex: 'messageType',\n//         render: tag => {\n//             if(tag === 0) return <Tag color={'green'} key={tag}>正常消息</Tag>\n//             if(tag === 1) return <Tag color={'red'} key={tag}>告警消息</Tag>\n//             if(tag === 2) return <Tag color={'blue'} key={tag}>设备上线</Tag>\n//             if(tag === 3) return <Tag color={'yellow'} key={tag}>设备离线</Tag>\n//         }\n//     },\n//     {\n//         title: '消息内容',\n//         dataIndex: 'messageContent',\n//         key: 'messageContent',\n//     }\n// ]\n// class EditDevice extends Component {\n//     static getDerivedStateFromProps(props, state) {\n//         if (props.location.state.deviceID !== \"\") {\n//             return {\n//                 deviceID: props.location.state.deviceID\n//             }\n//         }\n//         return null\n//     }\n//     setMessage = message => {\n//         this.setState({deviceMessage:message})\n//     }\n//     componentDidMount () {\n//         setTimeout(() => this.setState({...this.state}), 500);\n//         const deviceID = this.state.deviceID;\n//         let path = [];\n//         axios.post('/getDeviceInfo', {\n//             deviceID:deviceID\n//         }).then(response => {\n//             const data = response.data;\n//             const message = data.deviceMessage;\n//             if(data.status === 'failed'){\n//                 message.warning(\"获取设备信息失败\")\n//             }\n//             else if(data.status === 'notExist'){\n//                 message.warning('设备不存在')\n//             }\n//             else{\n//                 const messageArray = message.map((item, index) => {\n//                     const obj = JSON.parse(item.content);\n//                     let infoItem =  {\n//                         key: item.messageID,\n//                         messageID: item.messageID,\n//                         messageType: obj.alert,\n//                         messageContent: obj.info,\n//                         location:\"无\",\n//                         lat:obj.lat,\n//                         lng:obj.lng\n//                     }\n//                     if(obj.lat !== undefined && obj.lng !== undefined) {\n//                         path = [...path, [{lng:obj.lng, lat:obj.lat}, obj.alert]];\n//                         axios.get(`https://restapi.amap.com/v3/geocode/regeo?\" +\n//                                     \"output=xml&location=${infoItem.lng},${infoItem.lat}&key=167046dfd610b3eea087876e05ee0181&radius=1000&extensions=base`)\n//                             .then(response => {\n//                                 const data = response.data;\n//                                 infoItem.location = data.regeocode.addressComponent.city;\n//                             });\n//                     }\n//                     return infoItem;\n//                 });\n//                 setTimeout(() => {\n//                     this.setState({deviceInfo:data.deviceInfo, deviceMessage:[...messageArray], deviceName: data.deviceInfo.deviceName, path:path, isLoading:false});\n//                 }, 1000);\n//             }\n//         })\n//     }\n//     deleteDevice = () => {\n//         const deviceID = this.state.deviceID;\n//         console.log(deviceID)\n//         axios.post('/deleteDevice', {\n//             deviceID:deviceID\n//         }).then(response => {\n//             const data = response.data;\n//             if(data.status === 'success') {\n//                 cookie.save('deleteSuccess', true, {path: '/'});\n//                 window.location.href='/index/personalInfo';\n//             }\n//             else{\n//                 message.warning('删除失败');\n//             }\n//         })\n//     }\n//     updateDevice = deviceName => {\n//        this.setState({deviceName}) ;\n//     }\n//     render () {\n//         );\n//     }\n// }","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/src/pages/Market/AuctionInto/index.jsx"],"names":["React","Component","cookie","renderProducts","ProductList","AuctionInto","constructor","props","getProductList","process","productInProcess","productProcess","console","log","dir","data","array","item","index","key","name","componentDidMount","render","xxl","xl","lg","md","sm","xs","marginTop"],"mappings":"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":["import React, {Component} from 'react';\nimport cookie from 'react-cookies'\nimport {Descriptions, message, Spin, Table, Tag} from \"antd\";\nimport renderProducts from '../../../utils/renderProducts';\n\n//商品列表组件，需要传数据进去\nimport ProductList from '../../../components/ProductList';\n\n//不需要接入合约\n\n//从数据库拿商品信息\nclass AuctionInto extends Component {\n\n    // state = {\n    //     productInSell: [],\n    //     productInReveal: [],\n    //     productInFinalize: []\n    // }\n\n    constructor (props) {\n        super(props);\n    }\n\n\n    //注意同步，不然还没得到结果，就把null返回了\n    getProductList = async(process) => {\n        //New，从后台的mongoDB拿数据\n        let productInProcess = await renderProducts({ productProcess: process });\n        console.log(\"getProductList, process = \" + process + \" 请求到的数据为 : \");\n        console.dir(productInProcess.data);\n\n        //从数据库里拿到的信息是这样的 productArray[0]\n        //结构为\n        // auctionEndTime: 1646381747\n        // auctionStartTime: 1646381347\n        // blockchainId: 1\n        // category: \"Cell Phones & Accessories\"\n        // condition: 0\n        // ipfsDescHash: \"QmRa3BnvMUU6DxnLzxymAd7dweyWAYLzW3R99KkGCJAgRn\"\n        // ipfsImageHash: \"QmZsb9nLACC5zGhZp8ezeA9xMfikGQ6LSu3V3gTVnibeJa\"\n        // name: \"iphone 5\"\n        // price: 2000000000000000000\n        // productStatus: 0\n        // __v: 0\n        // _id: \"6221c928b1126364e456764e\"\n\n\n        //要传给 ProductList 用来显示的信息是这样的\n        //name (String)\n        //category (String)\n        //ipfsDescHash (String)\n        //ipfsImageHash (String)\n        //processTime (String) 已结束 或者 距离结束的时间\n        //price (String) 大于1ETH 用 ETH 做单位，小于时用 wei\n        //productStatus (String) 新旧\n\n        // let arrayLength = productInProcess.data.length;\n\n        \n        let array = productInProcess.data((item, index) => {\n            \n            return {\n                //key从1开始\n                key: index + 1,\n                name : item.name\n            }\n        });\n\n        // let array = data.accountAndLastTime.map((item, index) => {\n        //     //计算时间差，判断是否活跃\n        //     //注意mysql返回的 timestamp 与js中的 Date 的区别，以及相互转换\n        //     let timeDifference = new Date() - new Date(item.lastTime);\n        //     console.log(\"这个日期距离现在已经 \" + timeDuration(timeDifference));\n        //     //小于一天时间的是活跃账户\n        //     let tag = ( timeDifference> 24*60*60*1000) ? true : false;\n        //     return {\n        //         //key从1开始\n        //         key: index + 1,\n        //         accountString: item.accountString,\n        //         accountStatus: tag ? 0:1,\n        //         //moment库，格式化时间\n        //         lastTime: moment(item.lastTime).format('yy年M月D日, h:mm:ss a')\n        //     }\n        // });\n        console.log(\"格式化后, 即将传入 ProductList 的数据为 : \");\n        console.log(array);\n\n        return array;\n    }\n\n    //注意同步，不然还没得到结果，就把null返回了\n    componentDidMount  = () => {\n        console.log(\"生成AuctionInto模块\");\n\n        // //注意，不能这样更新，错误写法\n        // this.state.productInSell = await this.getProductList(\"sell\");\n        // this.state.productInReveal = await this.getProductList(\"reveal\");\n        // this.state.productInFinalize = await this.getProductList(\"finalize\");\n\n        // let productInSell =  this.getProductList(\"sell\");\n        // let productInReveal =  this.getProductList(\"reveal\");\n        // let productInFinalize =  this.getProductList(\"finalize\");\n\n        // //学习 PersonalInfo 的处理方式\n        // //这里是异步的，在下面的 render 中调用，显示为 null\n        // this.setState({\n        //     productInSell : productInSell,\n        //     productInReveal : productInReveal,\n        //     productInFinalize : productInFinalize\n        // }, () =>{\n        //     console.log(\"this.setState 执行完毕\");\n        // }\n        // )\n\n\n\n\n        // axios.post(\"/account/showAll\", {\n        //     username:this.state.username\n        // }).then(response => {\n        //     const data =  response.data;\n        //     if(data.status === \"success\"){\n        //         console.log(\"获取该用户所有曾用地址成功\");\n        //         //data.accountAndLastTime 是外层是数组，每个数组元素是字典类型\n        //         //map 方法，数组映射\n                // let array = data.accountAndLastTime.map((item, index) => {\n                //     //计算时间差，判断是否活跃\n                //     //注意mysql返回的 timestamp 与js中的 Date 的区别，以及相互转换\n                //     let timeDifference = new Date() - new Date(item.lastTime);\n                //     console.log(\"这个日期距离现在已经 \" + timeDuration(timeDifference));\n                //     //小于一天时间的是活跃账户\n                //     let tag = ( timeDifference> 24*60*60*1000) ? true : false;\n                //     return {\n                //         //key从1开始\n                //         key: index + 1,\n                //         accountString: item.accountString,\n                //         accountStatus: tag ? 0:1,\n                //         //moment库，格式化时间\n                //         lastTime: moment(item.lastTime).format('yy年M月D日, h:mm:ss a')\n                //     }\n                // });\n        //         console.log(\"map映射后的要放到列表中的数据 array 为 : \");\n        //         console.dir(array);\n        //         this.setState({accountAndLastTimeArray:array});\n\n        //     }\n        //     else{\n        //         console.log(\"获取该用户所有曾用地址出错\");\n        //         message.warning (\"获取地址信息出错\").then (r  => console.log(r));\n        //     }\n        // }).catch( err => {\n        //     console.log(\"发起获取所有曾用地址的请求失败, ERR : \" + err);\n        // });\n    }\n\n\n\n\n\n    \n    render () {\n        // const {productInSell,\n        //     productInReveal,\n        //     productInFinalize} = this.state;\n\n\n        return (\n\n            <div>\n                <Descriptions\n                    title=\"出示报价\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                />\n                <ProductList productArray={this.getProductList(\"sell\")}></ProductList>\n\n                <Descriptions\n                    title=\"揭示报价\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                    style={{marginTop:'50px'}}\n                />\n                <ProductList productArray={this.getProductList(\"reveal\")}></ProductList>\n\n                <Descriptions\n                    title=\"拍卖完成\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                    style={{marginTop:'50px'}}\n                />\n                <ProductList productArray={this.getProductList(\"finalize\")}></ProductList>\n\n            </div>\n        );\n    }\n}\n\nexport default AuctionInto;\n\n\n\n\n// const Shoppi1ng = [\n//     {\n//         title: '消息ID',\n//         dataIndex: 'messageID',\n//         key: 'messageID',\n//     },\n//     {\n//         title: '发送位置',\n//         dataIndex: 'location',\n//         key: 'location'\n//     },\n//     {\n//         title: '消息类型',\n//         key: 'messageType',\n//         dataIndex: 'messageType',\n//         render: tag => {\n//             if(tag === 0) return <Tag color={'green'} key={tag}>正常消息</Tag>\n//             if(tag === 1) return <Tag color={'red'} key={tag}>告警消息</Tag>\n//             if(tag === 2) return <Tag color={'blue'} key={tag}>设备上线</Tag>\n//             if(tag === 3) return <Tag color={'yellow'} key={tag}>设备离线</Tag>\n\n//         }\n//     },\n//     {\n//         title: '消息内容',\n//         dataIndex: 'messageContent',\n//         key: 'messageContent',\n//     }\n\n// ]\n\n// class EditDevice extends Component {\n\n\n\n\n//     static getDerivedStateFromProps(props, state) {\n//         if (props.location.state.deviceID !== \"\") {\n//             return {\n//                 deviceID: props.location.state.deviceID\n//             }\n//         }\n//         return null\n//     }\n\n//     setMessage = message => {\n//         this.setState({deviceMessage:message})\n//     }\n\n//     componentDidMount () {\n//         setTimeout(() => this.setState({...this.state}), 500);\n//         const deviceID = this.state.deviceID;\n//         let path = [];\n//         axios.post('/getDeviceInfo', {\n//             deviceID:deviceID\n//         }).then(response => {\n//             const data = response.data;\n//             const message = data.deviceMessage;\n//             if(data.status === 'failed'){\n//                 message.warning(\"获取设备信息失败\")\n//             }\n//             else if(data.status === 'notExist'){\n//                 message.warning('设备不存在')\n//             }\n//             else{\n//                 const messageArray = message.map((item, index) => {\n//                     const obj = JSON.parse(item.content);\n//                     let infoItem =  {\n//                         key: item.messageID,\n//                         messageID: item.messageID,\n//                         messageType: obj.alert,\n//                         messageContent: obj.info,\n//                         location:\"无\",\n//                         lat:obj.lat,\n//                         lng:obj.lng\n//                     }\n//                     if(obj.lat !== undefined && obj.lng !== undefined) {\n//                         path = [...path, [{lng:obj.lng, lat:obj.lat}, obj.alert]];\n//                         axios.get(`https://restapi.amap.com/v3/geocode/regeo?\" +\n//                                     \"output=xml&location=${infoItem.lng},${infoItem.lat}&key=167046dfd610b3eea087876e05ee0181&radius=1000&extensions=base`)\n//                             .then(response => {\n//                                 const data = response.data;\n//                                 infoItem.location = data.regeocode.addressComponent.city;\n//                             });\n//                     }\n//                     return infoItem;\n//                 });\n//                 setTimeout(() => {\n//                     this.setState({deviceInfo:data.deviceInfo, deviceMessage:[...messageArray], deviceName: data.deviceInfo.deviceName, path:path, isLoading:false});\n//                 }, 1000);\n//             }\n//         })\n\n//     }\n\n//     deleteDevice = () => {\n//         const deviceID = this.state.deviceID;\n//         console.log(deviceID)\n//         axios.post('/deleteDevice', {\n//             deviceID:deviceID\n//         }).then(response => {\n//             const data = response.data;\n//             if(data.status === 'success') {\n//                 cookie.save('deleteSuccess', true, {path: '/'});\n//                 window.location.href='/index/personalInfo';\n//             }\n//             else{\n//                 message.warning('删除失败');\n//             }\n//         })\n//     }\n\n//     updateDevice = deviceName => {\n//        this.setState({deviceName}) ;\n//     }\n\n//     render () {\n        \n//         );\n//     }\n// }\n\n"]},"metadata":{},"sourceType":"module"}