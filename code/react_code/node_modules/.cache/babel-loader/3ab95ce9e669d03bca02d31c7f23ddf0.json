{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { createSymbol } from '../../util/symbol';\nimport * as graphic from '../../util/graphic';\nimport { enableHoverEmphasis } from '../../util/states';\nimport { setLabelStyle, createTextStyle } from '../../label/labelStyle';\nimport { makeBackground } from '../helper/listComponent';\nimport * as layoutUtil from '../../util/layout';\nimport ComponentView from '../../view/Component';\nimport { parse, stringify } from 'zrender/lib/tool/color';\nvar curry = zrUtil.curry;\nvar each = zrUtil.each;\nvar Group = graphic.Group;\n\nvar LegendView =\n/** @class */\nfunction (_super) {\n  __extends(LegendView, _super);\n\n  function LegendView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = LegendView.type;\n    _this.newlineDisabled = false;\n    return _this;\n  }\n\n  LegendView.prototype.init = function () {\n    this.group.add(this._contentGroup = new Group());\n    this.group.add(this._selectorGroup = new Group());\n    this._isFirstRender = true;\n  };\n  /**\n   * @protected\n   */\n\n\n  LegendView.prototype.getContentGroup = function () {\n    return this._contentGroup;\n  };\n  /**\n   * @protected\n   */\n\n\n  LegendView.prototype.getSelectorGroup = function () {\n    return this._selectorGroup;\n  };\n  /**\n   * @override\n   */\n\n\n  LegendView.prototype.render = function (legendModel, ecModel, api) {\n    var isFirstRender = this._isFirstRender;\n    this._isFirstRender = false;\n    this.resetInner();\n\n    if (!legendModel.get('show', true)) {\n      return;\n    }\n\n    var itemAlign = legendModel.get('align');\n    var orient = legendModel.get('orient');\n\n    if (!itemAlign || itemAlign === 'auto') {\n      itemAlign = legendModel.get('left') === 'right' && orient === 'vertical' ? 'right' : 'left';\n    } // selector has been normalized to an array in model\n\n\n    var selector = legendModel.get('selector', true);\n    var selectorPosition = legendModel.get('selectorPosition', true);\n\n    if (selector && (!selectorPosition || selectorPosition === 'auto')) {\n      selectorPosition = orient === 'horizontal' ? 'end' : 'start';\n    }\n\n    this.renderInner(itemAlign, legendModel, ecModel, api, selector, orient, selectorPosition); // Perform layout.\n\n    var positionInfo = legendModel.getBoxLayoutParams();\n    var viewportSize = {\n      width: api.getWidth(),\n      height: api.getHeight()\n    };\n    var padding = legendModel.get('padding');\n    var maxSize = layoutUtil.getLayoutRect(positionInfo, viewportSize, padding);\n    var mainRect = this.layoutInner(legendModel, itemAlign, maxSize, isFirstRender, selector, selectorPosition); // Place mainGroup, based on the calculated `mainRect`.\n\n    var layoutRect = layoutUtil.getLayoutRect(zrUtil.defaults({\n      width: mainRect.width,\n      height: mainRect.height\n    }, positionInfo), viewportSize, padding);\n    this.group.x = layoutRect.x - mainRect.x;\n    this.group.y = layoutRect.y - mainRect.y;\n    this.group.markRedraw(); // Render background after group is layout.\n\n    this.group.add(this._backgroundEl = makeBackground(mainRect, legendModel));\n  };\n\n  LegendView.prototype.resetInner = function () {\n    this.getContentGroup().removeAll();\n    this._backgroundEl && this.group.remove(this._backgroundEl);\n    this.getSelectorGroup().removeAll();\n  };\n\n  LegendView.prototype.renderInner = function (itemAlign, legendModel, ecModel, api, selector, orient, selectorPosition) {\n    var contentGroup = this.getContentGroup();\n    var legendDrawnMap = zrUtil.createHashMap();\n    var selectMode = legendModel.get('selectedMode');\n    var excludeSeriesId = [];\n    ecModel.eachRawSeries(function (seriesModel) {\n      !seriesModel.get('legendHoverLink') && excludeSeriesId.push(seriesModel.id);\n    });\n    each(legendModel.getData(), function (itemModel, dataIndex) {\n      var name = itemModel.get('name'); // Use empty string or \\n as a newline string\n\n      if (!this.newlineDisabled && (name === '' || name === '\\n')) {\n        var g = new Group(); // @ts-ignore\n\n        g.newline = true;\n        contentGroup.add(g);\n        return;\n      } // Representitive series.\n\n\n      var seriesModel = ecModel.getSeriesByName(name)[0];\n\n      if (legendDrawnMap.get(name)) {\n        // Have been drawed\n        return;\n      } // Legend to control series.\n\n\n      if (seriesModel) {\n        var data = seriesModel.getData();\n        var style = data.getVisual('style');\n        var color = style[data.getVisual('drawType')] || style.fill;\n        var borderColor = style.stroke;\n        var decal = style.decal; // Using rect symbol defaultly\n\n        var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';\n        var symbolType = data.getVisual('symbol');\n\n        var itemGroup = this._createItem(name, dataIndex, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, borderColor, decal, selectMode);\n\n        itemGroup.on('click', curry(dispatchSelectAction, name, null, api, excludeSeriesId)).on('mouseover', curry(dispatchHighlightAction, seriesModel.name, null, api, excludeSeriesId)).on('mouseout', curry(dispatchDownplayAction, seriesModel.name, null, api, excludeSeriesId));\n        legendDrawnMap.set(name, true);\n      } else {\n        // Legend to control data. In pie and funnel.\n        ecModel.eachRawSeries(function (seriesModel) {\n          // In case multiple series has same data name\n          if (legendDrawnMap.get(name)) {\n            return;\n          }\n\n          if (seriesModel.legendVisualProvider) {\n            var provider = seriesModel.legendVisualProvider;\n\n            if (!provider.containName(name)) {\n              return;\n            }\n\n            var idx = provider.indexOfName(name);\n            var style = provider.getItemVisual(idx, 'style');\n            var borderColor = style.stroke;\n            var decal = style.decal;\n            var color = style.fill;\n            var colorArr = parse(style.fill); // Color may be set to transparent in visualMap when data is out of range.\n            // Do not show nothing.\n\n            if (colorArr && colorArr[3] === 0) {\n              colorArr[3] = 0.2; // TODO color is set to 0, 0, 0, 0. Should show correct RGBA\n\n              color = stringify(colorArr, 'rgba');\n            }\n\n            var legendSymbolType = 'roundRect';\n\n            var itemGroup = this._createItem(name, dataIndex, itemModel, legendModel, legendSymbolType, null, itemAlign, color, borderColor, decal, selectMode); // FIXME: consider different series has items with the same name.\n\n\n            itemGroup.on('click', curry(dispatchSelectAction, null, name, api, excludeSeriesId)) // Should not specify the series name, consider legend controls\n            // more than one pie series.\n            .on('mouseover', curry(dispatchHighlightAction, null, name, api, excludeSeriesId)).on('mouseout', curry(dispatchDownplayAction, null, name, api, excludeSeriesId));\n            legendDrawnMap.set(name, true);\n          }\n        }, this);\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (!legendDrawnMap.get(name)) {\n          console.warn(name + ' series not exists. Legend data should be same with series name or data name.');\n        }\n      }\n    }, this);\n\n    if (selector) {\n      this._createSelector(selector, legendModel, api, orient, selectorPosition);\n    }\n  };\n\n  LegendView.prototype._createSelector = function (selector, legendModel, api, orient, selectorPosition) {\n    var selectorGroup = this.getSelectorGroup();\n    each(selector, function createSelectorButton(selectorItem) {\n      var type = selectorItem.type;\n      var labelText = new graphic.Text({\n        style: {\n          x: 0,\n          y: 0,\n          align: 'center',\n          verticalAlign: 'middle'\n        },\n        onclick: function () {\n          api.dispatchAction({\n            type: type === 'all' ? 'legendAllSelect' : 'legendInverseSelect'\n          });\n        }\n      });\n      selectorGroup.add(labelText);\n      var labelModel = legendModel.getModel('selectorLabel');\n      var emphasisLabelModel = legendModel.getModel(['emphasis', 'selectorLabel']);\n      setLabelStyle(labelText, {\n        normal: labelModel,\n        emphasis: emphasisLabelModel\n      }, {\n        defaultText: selectorItem.title\n      });\n      enableHoverEmphasis(labelText);\n    });\n  };\n\n  LegendView.prototype._createItem = function (name, dataIndex, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, borderColor, decal, selectMode) {\n    var itemWidth = legendModel.get('itemWidth');\n    var itemHeight = legendModel.get('itemHeight');\n    var inactiveColor = legendModel.get('inactiveColor');\n    var inactiveBorderColor = legendModel.get('inactiveBorderColor');\n    var symbolKeepAspect = legendModel.get('symbolKeepAspect');\n    var legendModelItemStyle = legendModel.getModel('itemStyle');\n    var isSelected = legendModel.isSelected(name);\n    var itemGroup = new Group();\n    var textStyleModel = itemModel.getModel('textStyle');\n    var itemIcon = itemModel.get('icon');\n    var tooltipModel = itemModel.getModel('tooltip');\n    var legendGlobalTooltipModel = tooltipModel.parentModel; // Use user given icon first\n\n    legendSymbolType = itemIcon || legendSymbolType;\n    var legendSymbol = createSymbol(legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : inactiveColor, // symbolKeepAspect default true for legend\n    symbolKeepAspect == null ? true : symbolKeepAspect);\n    itemGroup.add(setSymbolStyle(legendSymbol, legendSymbolType, legendModelItemStyle, borderColor, inactiveBorderColor, decal, isSelected)); // Compose symbols\n    // PENDING\n\n    if (!itemIcon && symbolType // At least show one symbol, can't be all none\n    && (symbolType !== legendSymbolType || symbolType === 'none')) {\n      var size = itemHeight * 0.8;\n\n      if (symbolType === 'none') {\n        symbolType = 'circle';\n      }\n\n      var legendSymbolCenter = createSymbol(symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size, isSelected ? color : inactiveColor, // symbolKeepAspect default true for legend\n      symbolKeepAspect == null ? true : symbolKeepAspect); // Put symbol in the center\n\n      itemGroup.add(setSymbolStyle(legendSymbolCenter, symbolType, legendModelItemStyle, borderColor, inactiveBorderColor, decal, isSelected));\n    }\n\n    var textX = itemAlign === 'left' ? itemWidth + 5 : -5;\n    var textAlign = itemAlign;\n    var formatter = legendModel.get('formatter');\n    var content = name;\n\n    if (typeof formatter === 'string' && formatter) {\n      content = formatter.replace('{name}', name != null ? name : '');\n    } else if (typeof formatter === 'function') {\n      content = formatter(name);\n    }\n\n    itemGroup.add(new graphic.Text({\n      style: createTextStyle(textStyleModel, {\n        text: content,\n        x: textX,\n        y: itemHeight / 2,\n        fill: isSelected ? textStyleModel.getTextColor() : inactiveColor,\n        align: textAlign,\n        verticalAlign: 'middle'\n      })\n    })); // Add a invisible rect to increase the area of mouse hover\n\n    var hitRect = new graphic.Rect({\n      shape: itemGroup.getBoundingRect(),\n      invisible: true\n    });\n\n    if (tooltipModel.get('show')) {\n      var formatterParams = {\n        componentType: 'legend',\n        legendIndex: legendModel.componentIndex,\n        name: name,\n        $vars: ['name']\n      };\n      hitRect.tooltip = zrUtil.extend({\n        content: name,\n        // Defaul formatter\n        formatter: legendGlobalTooltipModel.get('formatter', true) || function (params) {\n          return params.name;\n        },\n        formatterParams: formatterParams\n      }, tooltipModel.option);\n    }\n\n    itemGroup.add(hitRect);\n    itemGroup.eachChild(function (child) {\n      child.silent = true;\n    });\n    hitRect.silent = !selectMode;\n    this.getContentGroup().add(itemGroup);\n    enableHoverEmphasis(itemGroup); // @ts-ignore\n\n    itemGroup.__legendDataIndex = dataIndex;\n    return itemGroup;\n  };\n\n  LegendView.prototype.layoutInner = function (legendModel, itemAlign, maxSize, isFirstRender, selector, selectorPosition) {\n    var contentGroup = this.getContentGroup();\n    var selectorGroup = this.getSelectorGroup(); // Place items in contentGroup.\n\n    layoutUtil.box(legendModel.get('orient'), contentGroup, legendModel.get('itemGap'), maxSize.width, maxSize.height);\n    var contentRect = contentGroup.getBoundingRect();\n    var contentPos = [-contentRect.x, -contentRect.y];\n    selectorGroup.markRedraw();\n    contentGroup.markRedraw();\n\n    if (selector) {\n      // Place buttons in selectorGroup\n      layoutUtil.box( // Buttons in selectorGroup always layout horizontally\n      'horizontal', selectorGroup, legendModel.get('selectorItemGap', true));\n      var selectorRect = selectorGroup.getBoundingRect();\n      var selectorPos = [-selectorRect.x, -selectorRect.y];\n      var selectorButtonGap = legendModel.get('selectorButtonGap', true);\n      var orientIdx = legendModel.getOrient().index;\n      var wh = orientIdx === 0 ? 'width' : 'height';\n      var hw = orientIdx === 0 ? 'height' : 'width';\n      var yx = orientIdx === 0 ? 'y' : 'x';\n\n      if (selectorPosition === 'end') {\n        selectorPos[orientIdx] += contentRect[wh] + selectorButtonGap;\n      } else {\n        contentPos[orientIdx] += selectorRect[wh] + selectorButtonGap;\n      } //Always align selector to content as 'middle'\n\n\n      selectorPos[1 - orientIdx] += contentRect[hw] / 2 - selectorRect[hw] / 2;\n      selectorGroup.x = selectorPos[0];\n      selectorGroup.y = selectorPos[1];\n      contentGroup.x = contentPos[0];\n      contentGroup.y = contentPos[1];\n      var mainRect = {\n        x: 0,\n        y: 0\n      };\n      mainRect[wh] = contentRect[wh] + selectorButtonGap + selectorRect[wh];\n      mainRect[hw] = Math.max(contentRect[hw], selectorRect[hw]);\n      mainRect[yx] = Math.min(0, selectorRect[yx] + selectorPos[1 - orientIdx]);\n      return mainRect;\n    } else {\n      contentGroup.x = contentPos[0];\n      contentGroup.y = contentPos[1];\n      return this.group.getBoundingRect();\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  LegendView.prototype.remove = function () {\n    this.getContentGroup().removeAll();\n    this._isFirstRender = true;\n  };\n\n  LegendView.type = 'legend.plain';\n  return LegendView;\n}(ComponentView);\n\nfunction setSymbolStyle(symbol, symbolType, legendModelItemStyle, borderColor, inactiveBorderColor, decal, isSelected) {\n  var itemStyle;\n\n  if (symbolType !== 'line' && symbolType.indexOf('empty') < 0) {\n    itemStyle = legendModelItemStyle.getItemStyle();\n    symbol.style.stroke = borderColor;\n    symbol.style.decal = decal;\n\n    if (!isSelected) {\n      itemStyle.stroke = inactiveBorderColor;\n    }\n  } else {\n    itemStyle = legendModelItemStyle.getItemStyle(['borderWidth', 'borderColor']);\n  }\n\n  symbol.setStyle(itemStyle);\n  return symbol;\n}\n\nfunction dispatchSelectAction(seriesName, dataName, api, excludeSeriesId) {\n  // downplay before unselect\n  dispatchDownplayAction(seriesName, dataName, api, excludeSeriesId);\n  api.dispatchAction({\n    type: 'legendToggleSelect',\n    name: seriesName != null ? seriesName : dataName\n  }); // highlight after select\n  // TODO higlight immediately may cause animation loss.\n\n  dispatchHighlightAction(seriesName, dataName, api, excludeSeriesId);\n}\n\nfunction isUseHoverLayer(api) {\n  var list = api.getZr().storage.getDisplayList();\n  var emphasisState;\n  var i = 0;\n  var len = list.length;\n\n  while (i < len && !(emphasisState = list[i].states.emphasis)) {\n    i++;\n  }\n\n  return emphasisState && emphasisState.hoverLayer;\n}\n\nfunction dispatchHighlightAction(seriesName, dataName, api, excludeSeriesId) {\n  // If element hover will move to a hoverLayer.\n  if (!isUseHoverLayer(api)) {\n    api.dispatchAction({\n      type: 'highlight',\n      seriesName: seriesName,\n      name: dataName,\n      excludeSeriesId: excludeSeriesId\n    });\n  }\n}\n\nfunction dispatchDownplayAction(seriesName, dataName, api, excludeSeriesId) {\n  // If element hover will move to a hoverLayer.\n  if (!isUseHoverLayer(api)) {\n    api.dispatchAction({\n      type: 'downplay',\n      seriesName: seriesName,\n      name: dataName,\n      excludeSeriesId: excludeSeriesId\n    });\n  }\n}\n\nexport default LegendView;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/echarts/lib/component/legend/LegendView.js"],"names":["__extends","zrUtil","createSymbol","graphic","enableHoverEmphasis","setLabelStyle","createTextStyle","makeBackground","layoutUtil","ComponentView","parse","stringify","curry","each","Group","LegendView","_super","_this","apply","arguments","type","newlineDisabled","prototype","init","group","add","_contentGroup","_selectorGroup","_isFirstRender","getContentGroup","getSelectorGroup","render","legendModel","ecModel","api","isFirstRender","resetInner","get","itemAlign","orient","selector","selectorPosition","renderInner","positionInfo","getBoxLayoutParams","viewportSize","width","getWidth","height","getHeight","padding","maxSize","getLayoutRect","mainRect","layoutInner","layoutRect","defaults","x","y","markRedraw","_backgroundEl","removeAll","remove","contentGroup","legendDrawnMap","createHashMap","selectMode","excludeSeriesId","eachRawSeries","seriesModel","push","id","getData","itemModel","dataIndex","name","g","newline","getSeriesByName","data","style","getVisual","color","fill","borderColor","stroke","decal","legendSymbolType","symbolType","itemGroup","_createItem","on","dispatchSelectAction","dispatchHighlightAction","dispatchDownplayAction","set","legendVisualProvider","provider","containName","idx","indexOfName","getItemVisual","colorArr","process","env","NODE_ENV","console","warn","_createSelector","selectorGroup","createSelectorButton","selectorItem","labelText","Text","align","verticalAlign","onclick","dispatchAction","labelModel","getModel","emphasisLabelModel","normal","emphasis","defaultText","title","itemWidth","itemHeight","inactiveColor","inactiveBorderColor","symbolKeepAspect","legendModelItemStyle","isSelected","textStyleModel","itemIcon","tooltipModel","legendGlobalTooltipModel","parentModel","legendSymbol","setSymbolStyle","size","legendSymbolCenter","textX","textAlign","formatter","content","replace","text","getTextColor","hitRect","Rect","shape","getBoundingRect","invisible","formatterParams","componentType","legendIndex","componentIndex","$vars","tooltip","extend","params","option","eachChild","child","silent","__legendDataIndex","box","contentRect","contentPos","selectorRect","selectorPos","selectorButtonGap","orientIdx","getOrient","index","wh","hw","yx","Math","max","min","symbol","itemStyle","indexOf","getItemStyle","setStyle","seriesName","dataName","isUseHoverLayer","list","getZr","storage","getDisplayList","emphasisState","i","len","length","states","hoverLayer"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { createSymbol } from '../../util/symbol';\nimport * as graphic from '../../util/graphic';\nimport { enableHoverEmphasis } from '../../util/states';\nimport { setLabelStyle, createTextStyle } from '../../label/labelStyle';\nimport { makeBackground } from '../helper/listComponent';\nimport * as layoutUtil from '../../util/layout';\nimport ComponentView from '../../view/Component';\nimport { parse, stringify } from 'zrender/lib/tool/color';\nvar curry = zrUtil.curry;\nvar each = zrUtil.each;\nvar Group = graphic.Group;\n\nvar LegendView =\n/** @class */\nfunction (_super) {\n  __extends(LegendView, _super);\n\n  function LegendView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = LegendView.type;\n    _this.newlineDisabled = false;\n    return _this;\n  }\n\n  LegendView.prototype.init = function () {\n    this.group.add(this._contentGroup = new Group());\n    this.group.add(this._selectorGroup = new Group());\n    this._isFirstRender = true;\n  };\n  /**\n   * @protected\n   */\n\n\n  LegendView.prototype.getContentGroup = function () {\n    return this._contentGroup;\n  };\n  /**\n   * @protected\n   */\n\n\n  LegendView.prototype.getSelectorGroup = function () {\n    return this._selectorGroup;\n  };\n  /**\n   * @override\n   */\n\n\n  LegendView.prototype.render = function (legendModel, ecModel, api) {\n    var isFirstRender = this._isFirstRender;\n    this._isFirstRender = false;\n    this.resetInner();\n\n    if (!legendModel.get('show', true)) {\n      return;\n    }\n\n    var itemAlign = legendModel.get('align');\n    var orient = legendModel.get('orient');\n\n    if (!itemAlign || itemAlign === 'auto') {\n      itemAlign = legendModel.get('left') === 'right' && orient === 'vertical' ? 'right' : 'left';\n    } // selector has been normalized to an array in model\n\n\n    var selector = legendModel.get('selector', true);\n    var selectorPosition = legendModel.get('selectorPosition', true);\n\n    if (selector && (!selectorPosition || selectorPosition === 'auto')) {\n      selectorPosition = orient === 'horizontal' ? 'end' : 'start';\n    }\n\n    this.renderInner(itemAlign, legendModel, ecModel, api, selector, orient, selectorPosition); // Perform layout.\n\n    var positionInfo = legendModel.getBoxLayoutParams();\n    var viewportSize = {\n      width: api.getWidth(),\n      height: api.getHeight()\n    };\n    var padding = legendModel.get('padding');\n    var maxSize = layoutUtil.getLayoutRect(positionInfo, viewportSize, padding);\n    var mainRect = this.layoutInner(legendModel, itemAlign, maxSize, isFirstRender, selector, selectorPosition); // Place mainGroup, based on the calculated `mainRect`.\n\n    var layoutRect = layoutUtil.getLayoutRect(zrUtil.defaults({\n      width: mainRect.width,\n      height: mainRect.height\n    }, positionInfo), viewportSize, padding);\n    this.group.x = layoutRect.x - mainRect.x;\n    this.group.y = layoutRect.y - mainRect.y;\n    this.group.markRedraw(); // Render background after group is layout.\n\n    this.group.add(this._backgroundEl = makeBackground(mainRect, legendModel));\n  };\n\n  LegendView.prototype.resetInner = function () {\n    this.getContentGroup().removeAll();\n    this._backgroundEl && this.group.remove(this._backgroundEl);\n    this.getSelectorGroup().removeAll();\n  };\n\n  LegendView.prototype.renderInner = function (itemAlign, legendModel, ecModel, api, selector, orient, selectorPosition) {\n    var contentGroup = this.getContentGroup();\n    var legendDrawnMap = zrUtil.createHashMap();\n    var selectMode = legendModel.get('selectedMode');\n    var excludeSeriesId = [];\n    ecModel.eachRawSeries(function (seriesModel) {\n      !seriesModel.get('legendHoverLink') && excludeSeriesId.push(seriesModel.id);\n    });\n    each(legendModel.getData(), function (itemModel, dataIndex) {\n      var name = itemModel.get('name'); // Use empty string or \\n as a newline string\n\n      if (!this.newlineDisabled && (name === '' || name === '\\n')) {\n        var g = new Group(); // @ts-ignore\n\n        g.newline = true;\n        contentGroup.add(g);\n        return;\n      } // Representitive series.\n\n\n      var seriesModel = ecModel.getSeriesByName(name)[0];\n\n      if (legendDrawnMap.get(name)) {\n        // Have been drawed\n        return;\n      } // Legend to control series.\n\n\n      if (seriesModel) {\n        var data = seriesModel.getData();\n        var style = data.getVisual('style');\n        var color = style[data.getVisual('drawType')] || style.fill;\n        var borderColor = style.stroke;\n        var decal = style.decal; // Using rect symbol defaultly\n\n        var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';\n        var symbolType = data.getVisual('symbol');\n\n        var itemGroup = this._createItem(name, dataIndex, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, borderColor, decal, selectMode);\n\n        itemGroup.on('click', curry(dispatchSelectAction, name, null, api, excludeSeriesId)).on('mouseover', curry(dispatchHighlightAction, seriesModel.name, null, api, excludeSeriesId)).on('mouseout', curry(dispatchDownplayAction, seriesModel.name, null, api, excludeSeriesId));\n        legendDrawnMap.set(name, true);\n      } else {\n        // Legend to control data. In pie and funnel.\n        ecModel.eachRawSeries(function (seriesModel) {\n          // In case multiple series has same data name\n          if (legendDrawnMap.get(name)) {\n            return;\n          }\n\n          if (seriesModel.legendVisualProvider) {\n            var provider = seriesModel.legendVisualProvider;\n\n            if (!provider.containName(name)) {\n              return;\n            }\n\n            var idx = provider.indexOfName(name);\n            var style = provider.getItemVisual(idx, 'style');\n            var borderColor = style.stroke;\n            var decal = style.decal;\n            var color = style.fill;\n            var colorArr = parse(style.fill); // Color may be set to transparent in visualMap when data is out of range.\n            // Do not show nothing.\n\n            if (colorArr && colorArr[3] === 0) {\n              colorArr[3] = 0.2; // TODO color is set to 0, 0, 0, 0. Should show correct RGBA\n\n              color = stringify(colorArr, 'rgba');\n            }\n\n            var legendSymbolType = 'roundRect';\n\n            var itemGroup = this._createItem(name, dataIndex, itemModel, legendModel, legendSymbolType, null, itemAlign, color, borderColor, decal, selectMode); // FIXME: consider different series has items with the same name.\n\n\n            itemGroup.on('click', curry(dispatchSelectAction, null, name, api, excludeSeriesId)) // Should not specify the series name, consider legend controls\n            // more than one pie series.\n            .on('mouseover', curry(dispatchHighlightAction, null, name, api, excludeSeriesId)).on('mouseout', curry(dispatchDownplayAction, null, name, api, excludeSeriesId));\n            legendDrawnMap.set(name, true);\n          }\n        }, this);\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (!legendDrawnMap.get(name)) {\n          console.warn(name + ' series not exists. Legend data should be same with series name or data name.');\n        }\n      }\n    }, this);\n\n    if (selector) {\n      this._createSelector(selector, legendModel, api, orient, selectorPosition);\n    }\n  };\n\n  LegendView.prototype._createSelector = function (selector, legendModel, api, orient, selectorPosition) {\n    var selectorGroup = this.getSelectorGroup();\n    each(selector, function createSelectorButton(selectorItem) {\n      var type = selectorItem.type;\n      var labelText = new graphic.Text({\n        style: {\n          x: 0,\n          y: 0,\n          align: 'center',\n          verticalAlign: 'middle'\n        },\n        onclick: function () {\n          api.dispatchAction({\n            type: type === 'all' ? 'legendAllSelect' : 'legendInverseSelect'\n          });\n        }\n      });\n      selectorGroup.add(labelText);\n      var labelModel = legendModel.getModel('selectorLabel');\n      var emphasisLabelModel = legendModel.getModel(['emphasis', 'selectorLabel']);\n      setLabelStyle(labelText, {\n        normal: labelModel,\n        emphasis: emphasisLabelModel\n      }, {\n        defaultText: selectorItem.title\n      });\n      enableHoverEmphasis(labelText);\n    });\n  };\n\n  LegendView.prototype._createItem = function (name, dataIndex, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, borderColor, decal, selectMode) {\n    var itemWidth = legendModel.get('itemWidth');\n    var itemHeight = legendModel.get('itemHeight');\n    var inactiveColor = legendModel.get('inactiveColor');\n    var inactiveBorderColor = legendModel.get('inactiveBorderColor');\n    var symbolKeepAspect = legendModel.get('symbolKeepAspect');\n    var legendModelItemStyle = legendModel.getModel('itemStyle');\n    var isSelected = legendModel.isSelected(name);\n    var itemGroup = new Group();\n    var textStyleModel = itemModel.getModel('textStyle');\n    var itemIcon = itemModel.get('icon');\n    var tooltipModel = itemModel.getModel('tooltip');\n    var legendGlobalTooltipModel = tooltipModel.parentModel; // Use user given icon first\n\n    legendSymbolType = itemIcon || legendSymbolType;\n    var legendSymbol = createSymbol(legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : inactiveColor, // symbolKeepAspect default true for legend\n    symbolKeepAspect == null ? true : symbolKeepAspect);\n    itemGroup.add(setSymbolStyle(legendSymbol, legendSymbolType, legendModelItemStyle, borderColor, inactiveBorderColor, decal, isSelected)); // Compose symbols\n    // PENDING\n\n    if (!itemIcon && symbolType // At least show one symbol, can't be all none\n    && (symbolType !== legendSymbolType || symbolType === 'none')) {\n      var size = itemHeight * 0.8;\n\n      if (symbolType === 'none') {\n        symbolType = 'circle';\n      }\n\n      var legendSymbolCenter = createSymbol(symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size, isSelected ? color : inactiveColor, // symbolKeepAspect default true for legend\n      symbolKeepAspect == null ? true : symbolKeepAspect); // Put symbol in the center\n\n      itemGroup.add(setSymbolStyle(legendSymbolCenter, symbolType, legendModelItemStyle, borderColor, inactiveBorderColor, decal, isSelected));\n    }\n\n    var textX = itemAlign === 'left' ? itemWidth + 5 : -5;\n    var textAlign = itemAlign;\n    var formatter = legendModel.get('formatter');\n    var content = name;\n\n    if (typeof formatter === 'string' && formatter) {\n      content = formatter.replace('{name}', name != null ? name : '');\n    } else if (typeof formatter === 'function') {\n      content = formatter(name);\n    }\n\n    itemGroup.add(new graphic.Text({\n      style: createTextStyle(textStyleModel, {\n        text: content,\n        x: textX,\n        y: itemHeight / 2,\n        fill: isSelected ? textStyleModel.getTextColor() : inactiveColor,\n        align: textAlign,\n        verticalAlign: 'middle'\n      })\n    })); // Add a invisible rect to increase the area of mouse hover\n\n    var hitRect = new graphic.Rect({\n      shape: itemGroup.getBoundingRect(),\n      invisible: true\n    });\n\n    if (tooltipModel.get('show')) {\n      var formatterParams = {\n        componentType: 'legend',\n        legendIndex: legendModel.componentIndex,\n        name: name,\n        $vars: ['name']\n      };\n      hitRect.tooltip = zrUtil.extend({\n        content: name,\n        // Defaul formatter\n        formatter: legendGlobalTooltipModel.get('formatter', true) || function (params) {\n          return params.name;\n        },\n        formatterParams: formatterParams\n      }, tooltipModel.option);\n    }\n\n    itemGroup.add(hitRect);\n    itemGroup.eachChild(function (child) {\n      child.silent = true;\n    });\n    hitRect.silent = !selectMode;\n    this.getContentGroup().add(itemGroup);\n    enableHoverEmphasis(itemGroup); // @ts-ignore\n\n    itemGroup.__legendDataIndex = dataIndex;\n    return itemGroup;\n  };\n\n  LegendView.prototype.layoutInner = function (legendModel, itemAlign, maxSize, isFirstRender, selector, selectorPosition) {\n    var contentGroup = this.getContentGroup();\n    var selectorGroup = this.getSelectorGroup(); // Place items in contentGroup.\n\n    layoutUtil.box(legendModel.get('orient'), contentGroup, legendModel.get('itemGap'), maxSize.width, maxSize.height);\n    var contentRect = contentGroup.getBoundingRect();\n    var contentPos = [-contentRect.x, -contentRect.y];\n    selectorGroup.markRedraw();\n    contentGroup.markRedraw();\n\n    if (selector) {\n      // Place buttons in selectorGroup\n      layoutUtil.box( // Buttons in selectorGroup always layout horizontally\n      'horizontal', selectorGroup, legendModel.get('selectorItemGap', true));\n      var selectorRect = selectorGroup.getBoundingRect();\n      var selectorPos = [-selectorRect.x, -selectorRect.y];\n      var selectorButtonGap = legendModel.get('selectorButtonGap', true);\n      var orientIdx = legendModel.getOrient().index;\n      var wh = orientIdx === 0 ? 'width' : 'height';\n      var hw = orientIdx === 0 ? 'height' : 'width';\n      var yx = orientIdx === 0 ? 'y' : 'x';\n\n      if (selectorPosition === 'end') {\n        selectorPos[orientIdx] += contentRect[wh] + selectorButtonGap;\n      } else {\n        contentPos[orientIdx] += selectorRect[wh] + selectorButtonGap;\n      } //Always align selector to content as 'middle'\n\n\n      selectorPos[1 - orientIdx] += contentRect[hw] / 2 - selectorRect[hw] / 2;\n      selectorGroup.x = selectorPos[0];\n      selectorGroup.y = selectorPos[1];\n      contentGroup.x = contentPos[0];\n      contentGroup.y = contentPos[1];\n      var mainRect = {\n        x: 0,\n        y: 0\n      };\n      mainRect[wh] = contentRect[wh] + selectorButtonGap + selectorRect[wh];\n      mainRect[hw] = Math.max(contentRect[hw], selectorRect[hw]);\n      mainRect[yx] = Math.min(0, selectorRect[yx] + selectorPos[1 - orientIdx]);\n      return mainRect;\n    } else {\n      contentGroup.x = contentPos[0];\n      contentGroup.y = contentPos[1];\n      return this.group.getBoundingRect();\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  LegendView.prototype.remove = function () {\n    this.getContentGroup().removeAll();\n    this._isFirstRender = true;\n  };\n\n  LegendView.type = 'legend.plain';\n  return LegendView;\n}(ComponentView);\n\nfunction setSymbolStyle(symbol, symbolType, legendModelItemStyle, borderColor, inactiveBorderColor, decal, isSelected) {\n  var itemStyle;\n\n  if (symbolType !== 'line' && symbolType.indexOf('empty') < 0) {\n    itemStyle = legendModelItemStyle.getItemStyle();\n    symbol.style.stroke = borderColor;\n    symbol.style.decal = decal;\n\n    if (!isSelected) {\n      itemStyle.stroke = inactiveBorderColor;\n    }\n  } else {\n    itemStyle = legendModelItemStyle.getItemStyle(['borderWidth', 'borderColor']);\n  }\n\n  symbol.setStyle(itemStyle);\n  return symbol;\n}\n\nfunction dispatchSelectAction(seriesName, dataName, api, excludeSeriesId) {\n  // downplay before unselect\n  dispatchDownplayAction(seriesName, dataName, api, excludeSeriesId);\n  api.dispatchAction({\n    type: 'legendToggleSelect',\n    name: seriesName != null ? seriesName : dataName\n  }); // highlight after select\n  // TODO higlight immediately may cause animation loss.\n\n  dispatchHighlightAction(seriesName, dataName, api, excludeSeriesId);\n}\n\nfunction isUseHoverLayer(api) {\n  var list = api.getZr().storage.getDisplayList();\n  var emphasisState;\n  var i = 0;\n  var len = list.length;\n\n  while (i < len && !(emphasisState = list[i].states.emphasis)) {\n    i++;\n  }\n\n  return emphasisState && emphasisState.hoverLayer;\n}\n\nfunction dispatchHighlightAction(seriesName, dataName, api, excludeSeriesId) {\n  // If element hover will move to a hoverLayer.\n  if (!isUseHoverLayer(api)) {\n    api.dispatchAction({\n      type: 'highlight',\n      seriesName: seriesName,\n      name: dataName,\n      excludeSeriesId: excludeSeriesId\n    });\n  }\n}\n\nfunction dispatchDownplayAction(seriesName, dataName, api, excludeSeriesId) {\n  // If element hover will move to a hoverLayer.\n  if (!isUseHoverLayer(api)) {\n    api.dispatchAction({\n      type: 'downplay',\n      seriesName: seriesName,\n      name: dataName,\n      excludeSeriesId: excludeSeriesId\n    });\n  }\n}\n\nexport default LegendView;"]},"metadata":{},"sourceType":"module"}