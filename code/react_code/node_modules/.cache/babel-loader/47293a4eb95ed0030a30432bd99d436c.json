{"ast":null,"code":"const crypto = require('crypto');\n\nconst {\n  checkAndInit,\n  smixSync\n} = require('./utils'); // N = Cpu cost, r = Memory cost, p = parallelization cost\n\n\nfunction scrypt(key, salt, N, r, p, dkLen, progressCallback) {\n  const {\n    XY,\n    V,\n    B32,\n    x,\n    _X,\n    B,\n    tickCallback\n  } = checkAndInit(key, salt, N, r, p, dkLen, progressCallback);\n\n  for (var i = 0; i < p; i++) {\n    smixSync(B, i * 128 * r, r, N, V, XY, _X, B32, x, tickCallback);\n  }\n\n  return crypto.pbkdf2Sync(key, B, 1, dkLen, 'sha256');\n}\n\nmodule.exports = scrypt;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/scryptsy/lib/scryptSync.js"],"names":["crypto","require","checkAndInit","smixSync","scrypt","key","salt","N","r","p","dkLen","progressCallback","XY","V","B32","x","_X","B","tickCallback","i","pbkdf2Sync","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM;AACJC,EAAAA,YADI;AAEJC,EAAAA;AAFI,IAGFF,OAAO,CAAC,SAAD,CAHX,C,CAKA;;;AACA,SAASG,MAAT,CAAiBC,GAAjB,EAAsBC,IAAtB,EAA4BC,CAA5B,EAA+BC,CAA/B,EAAkCC,CAAlC,EAAqCC,KAArC,EAA4CC,gBAA5C,EAA8D;AAC5D,QAAM;AACJC,IAAAA,EADI;AAEJC,IAAAA,CAFI;AAGJC,IAAAA,GAHI;AAIJC,IAAAA,CAJI;AAKJC,IAAAA,EALI;AAMJC,IAAAA,CANI;AAOJC,IAAAA;AAPI,MAQFhB,YAAY,CAACG,GAAD,EAAMC,IAAN,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqBC,KAArB,EAA4BC,gBAA5B,CARhB;;AAUA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,CAApB,EAAuBU,CAAC,EAAxB,EAA4B;AAC1BhB,IAAAA,QAAQ,CAACc,CAAD,EAAIE,CAAC,GAAG,GAAJ,GAAUX,CAAd,EAAiBA,CAAjB,EAAoBD,CAApB,EAAuBM,CAAvB,EAA0BD,EAA1B,EAA8BI,EAA9B,EAAkCF,GAAlC,EAAuCC,CAAvC,EAA0CG,YAA1C,CAAR;AACD;;AAED,SAAOlB,MAAM,CAACoB,UAAP,CAAkBf,GAAlB,EAAuBY,CAAvB,EAA0B,CAA1B,EAA6BP,KAA7B,EAAoC,QAApC,CAAP;AACD;;AAEDW,MAAM,CAACC,OAAP,GAAiBlB,MAAjB","sourcesContent":["const crypto = require('crypto')\nconst {\n  checkAndInit,\n  smixSync\n} = require('./utils')\n\n// N = Cpu cost, r = Memory cost, p = parallelization cost\nfunction scrypt (key, salt, N, r, p, dkLen, progressCallback) {\n  const {\n    XY,\n    V,\n    B32,\n    x,\n    _X,\n    B,\n    tickCallback\n  } = checkAndInit(key, salt, N, r, p, dkLen, progressCallback)\n\n  for (var i = 0; i < p; i++) {\n    smixSync(B, i * 128 * r, r, N, V, XY, _X, B32, x, tickCallback)\n  }\n\n  return crypto.pbkdf2Sync(key, B, 1, dkLen, 'sha256')\n}\n\nmodule.exports = scrypt\n"]},"metadata":{},"sourceType":"script"}