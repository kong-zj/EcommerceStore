{"ast":null,"code":"import \"antd/es/descriptions/style\";\nimport _Descriptions from \"antd/es/descriptions\";\nvar _jsxFileName = \"/home/kzj/project/finalize/final/code/react_code/src/pages/Market/AuctionInto/index.jsx\";\nimport React, { Component } from 'react';\nimport cookie from 'react-cookies';\nimport renderProducts from '../../../utils/renderProducts'; //商品列表组件，需要传数据进去\n\nimport ProductList from '../../../components/ProductList'; //不需要接入合约\n//从数据库拿商品信息\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AuctionInto extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      productInSell: [],\n      productInReveal: [],\n      productInFinalize: []\n    };\n\n    this.getProductList = async process => {\n      //New，从后台的mongoDB拿数据\n      let productInProcess = await renderProducts({\n        productProcess: process\n      });\n      console.log(\"getProductList, process = \" + process + \" 请求到的数据为 : \");\n      console.dir(productInProcess.data);\n      return productInProcess.data;\n    };\n\n    this.componentDidMount = () => {\n      console.log(\"生成AuctionInto模块\"); // //注意，不能这样更新，错误写法\n      // this.state.productInSell = await this.getProductList(\"sell\");\n      // this.state.productInReveal = await this.getProductList(\"reveal\");\n      // this.state.productInFinalize = await this.getProductList(\"finalize\");\n\n      this.setState({\n        productInSell: this.getProductList(\"sell\"),\n        productInReveal: this.getProductList(\"reveal\"),\n        productInFinalize: this.getProductList(\"finalize\")\n      }); // axios.post(\"/account/showAll\", {\n      //     username:this.state.username\n      // }).then(response => {\n      //     const data =  response.data;\n      //     if(data.status === \"success\"){\n      //         console.log(\"获取该用户所有曾用地址成功\");\n      //         //data.accountAndLastTime 是外层是数组，每个数组元素是字典类型\n      //         //map 方法，数组映射\n      //         let array = data.accountAndLastTime.map((item, index) => {\n      //             //计算时间差，判断是否活跃\n      //             //注意mysql返回的 timestamp 与js中的 Date 的区别，以及相互转换\n      //             let timeDifference = new Date() - new Date(item.lastTime);\n      //             console.log(\"这个日期距离现在已经 \" + timeDuration(timeDifference));\n      //             //小于一天时间的是活跃账户\n      //             let tag = ( timeDifference> 24*60*60*1000) ? true : false;\n      //             return {\n      //                 //key从1开始\n      //                 key: index + 1,\n      //                 accountString: item.accountString,\n      //                 accountStatus: tag ? 0:1,\n      //                 //moment库，格式化时间\n      //                 lastTime: moment(item.lastTime).format('yy年M月D日, h:mm:ss a')\n      //             }\n      //         });\n      //         console.log(\"map映射后的要放到列表中的数据 array 为 : \");\n      //         console.dir(array);\n      //         this.setState({accountAndLastTimeArray:array});\n      //     }\n      //     else{\n      //         console.log(\"获取该用户所有曾用地址出错\");\n      //         message.warning (\"获取地址信息出错\").then (r  => console.log(r));\n      //     }\n      // }).catch( err => {\n      //     console.log(\"发起获取所有曾用地址的请求失败, ERR : \" + err);\n      // });\n    };\n  }\n\n  render() {\n    // const { deviceID, isOnline, ownerName} = this.state.deviceInfo;\n    // const {deviceName, isLoading} = this.state;\n    // const info = [{key:1, deviceName, deviceID, deviceStatus:isOnline, ownerName}];\n    // const messageArray = this.state.deviceMessage;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(_Descriptions, {\n        title: \"\\u51FA\\u793A\\u62A5\\u4EF7\",\n        bordered: true,\n        column: {\n          xxl: 4,\n          xl: 3,\n          lg: 3,\n          md: 3,\n          sm: 2,\n          xs: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ProductList, {\n        productArray: this.state.productInSell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(_Descriptions, {\n        title: \"\\u63ED\\u793A\\u62A5\\u4EF7\",\n        bordered: true,\n        column: {\n          xxl: 4,\n          xl: 3,\n          lg: 3,\n          md: 3,\n          sm: 2,\n          xs: 1\n        },\n        style: {\n          marginTop: '50px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ProductList, {\n        productArray: this.state.productInReveal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(_Descriptions, {\n        title: \"\\u62CD\\u5356\\u5B8C\\u6210\",\n        bordered: true,\n        column: {\n          xxl: 4,\n          xl: 3,\n          lg: 3,\n          md: 3,\n          sm: 2,\n          xs: 1\n        },\n        style: {\n          marginTop: '50px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ProductList, {\n        productArray: this.state.productInFinalize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default AuctionInto; // const Shoppi1ng = [\n//     {\n//         title: '消息ID',\n//         dataIndex: 'messageID',\n//         key: 'messageID',\n//     },\n//     {\n//         title: '发送位置',\n//         dataIndex: 'location',\n//         key: 'location'\n//     },\n//     {\n//         title: '消息类型',\n//         key: 'messageType',\n//         dataIndex: 'messageType',\n//         render: tag => {\n//             if(tag === 0) return <Tag color={'green'} key={tag}>正常消息</Tag>\n//             if(tag === 1) return <Tag color={'red'} key={tag}>告警消息</Tag>\n//             if(tag === 2) return <Tag color={'blue'} key={tag}>设备上线</Tag>\n//             if(tag === 3) return <Tag color={'yellow'} key={tag}>设备离线</Tag>\n//         }\n//     },\n//     {\n//         title: '消息内容',\n//         dataIndex: 'messageContent',\n//         key: 'messageContent',\n//     }\n// ]\n// class EditDevice extends Component {\n//     static getDerivedStateFromProps(props, state) {\n//         if (props.location.state.deviceID !== \"\") {\n//             return {\n//                 deviceID: props.location.state.deviceID\n//             }\n//         }\n//         return null\n//     }\n//     setMessage = message => {\n//         this.setState({deviceMessage:message})\n//     }\n//     componentDidMount () {\n//         setTimeout(() => this.setState({...this.state}), 500);\n//         const deviceID = this.state.deviceID;\n//         let path = [];\n//         axios.post('/getDeviceInfo', {\n//             deviceID:deviceID\n//         }).then(response => {\n//             const data = response.data;\n//             const message = data.deviceMessage;\n//             if(data.status === 'failed'){\n//                 message.warning(\"获取设备信息失败\")\n//             }\n//             else if(data.status === 'notExist'){\n//                 message.warning('设备不存在')\n//             }\n//             else{\n//                 const messageArray = message.map((item, index) => {\n//                     const obj = JSON.parse(item.content);\n//                     let infoItem =  {\n//                         key: item.messageID,\n//                         messageID: item.messageID,\n//                         messageType: obj.alert,\n//                         messageContent: obj.info,\n//                         location:\"无\",\n//                         lat:obj.lat,\n//                         lng:obj.lng\n//                     }\n//                     if(obj.lat !== undefined && obj.lng !== undefined) {\n//                         path = [...path, [{lng:obj.lng, lat:obj.lat}, obj.alert]];\n//                         axios.get(`https://restapi.amap.com/v3/geocode/regeo?\" +\n//                                     \"output=xml&location=${infoItem.lng},${infoItem.lat}&key=167046dfd610b3eea087876e05ee0181&radius=1000&extensions=base`)\n//                             .then(response => {\n//                                 const data = response.data;\n//                                 infoItem.location = data.regeocode.addressComponent.city;\n//                             });\n//                     }\n//                     return infoItem;\n//                 });\n//                 setTimeout(() => {\n//                     this.setState({deviceInfo:data.deviceInfo, deviceMessage:[...messageArray], deviceName: data.deviceInfo.deviceName, path:path, isLoading:false});\n//                 }, 1000);\n//             }\n//         })\n//     }\n//     deleteDevice = () => {\n//         const deviceID = this.state.deviceID;\n//         console.log(deviceID)\n//         axios.post('/deleteDevice', {\n//             deviceID:deviceID\n//         }).then(response => {\n//             const data = response.data;\n//             if(data.status === 'success') {\n//                 cookie.save('deleteSuccess', true, {path: '/'});\n//                 window.location.href='/index/personalInfo';\n//             }\n//             else{\n//                 message.warning('删除失败');\n//             }\n//         })\n//     }\n//     updateDevice = deviceName => {\n//        this.setState({deviceName}) ;\n//     }\n//     render () {\n//         );\n//     }\n// }","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/src/pages/Market/AuctionInto/index.jsx"],"names":["React","Component","cookie","renderProducts","ProductList","AuctionInto","constructor","props","state","productInSell","productInReveal","productInFinalize","getProductList","process","productInProcess","productProcess","console","log","dir","data","componentDidMount","setState","render","xxl","xl","lg","md","sm","xs","marginTop"],"mappings":"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AfsourcesContent":["import React, {Component} from 'react';\nimport cookie from 'react-cookies'\nimport {Descriptions, message, Spin, Table, Tag} from \"antd\";\nimport renderProducts from '../../../utils/renderProducts';\n\n//商品列表组件，需要传数据进去\nimport ProductList from '../../../components/ProductList';\n\n//不需要接入合约\n\n//从数据库拿商品信息\nclass AuctionInto extends Component {\n\n    state = {\n        productInSell: [],\n        productInReveal: [],\n        productInFinalize: []\n    }\n\n    constructor (props) {\n        super(props);\n    }\n\n\n    \n    getProductList = async(process) => {\n        //New，从后台的mongoDB拿数据\n        let productInProcess = await renderProducts({ productProcess: process });\n        console.log(\"getProductList, process = \" + process + \" 请求到的数据为 : \");\n        console.dir(productInProcess.data);\n        return productInProcess.data;\n    }\n\n\n    componentDidMount  = () => {\n        console.log(\"生成AuctionInto模块\");\n        \n        // //注意，不能这样更新，错误写法\n        // this.state.productInSell = await this.getProductList(\"sell\");\n        // this.state.productInReveal = await this.getProductList(\"reveal\");\n        // this.state.productInFinalize = await this.getProductList(\"finalize\");\n\n        this.setState({\n            productInSell : this.getProductList(\"sell\"),\n            productInReveal : this.getProductList(\"reveal\"),\n            productInFinalize : this.getProductList(\"finalize\")\n        })\n\n\n        // axios.post(\"/account/showAll\", {\n        //     username:this.state.username\n        // }).then(response => {\n        //     const data =  response.data;\n        //     if(data.status === \"success\"){\n        //         console.log(\"获取该用户所有曾用地址成功\");\n        //         //data.accountAndLastTime 是外层是数组，每个数组元素是字典类型\n        //         //map 方法，数组映射\n        //         let array = data.accountAndLastTime.map((item, index) => {\n        //             //计算时间差，判断是否活跃\n        //             //注意mysql返回的 timestamp 与js中的 Date 的区别，以及相互转换\n        //             let timeDifference = new Date() - new Date(item.lastTime);\n        //             console.log(\"这个日期距离现在已经 \" + timeDuration(timeDifference));\n        //             //小于一天时间的是活跃账户\n        //             let tag = ( timeDifference> 24*60*60*1000) ? true : false;\n        //             return {\n        //                 //key从1开始\n        //                 key: index + 1,\n        //                 accountString: item.accountString,\n        //                 accountStatus: tag ? 0:1,\n        //                 //moment库，格式化时间\n        //                 lastTime: moment(item.lastTime).format('yy年M月D日, h:mm:ss a')\n        //             }\n        //         });\n        //         console.log(\"map映射后的要放到列表中的数据 array 为 : \");\n        //         console.dir(array);\n        //         this.setState({accountAndLastTimeArray:array});\n\n        //     }\n        //     else{\n        //         console.log(\"获取该用户所有曾用地址出错\");\n        //         message.warning (\"获取地址信息出错\").then (r  => console.log(r));\n        //     }\n        // }).catch( err => {\n        //     console.log(\"发起获取所有曾用地址的请求失败, ERR : \" + err);\n        // });\n\n    }\n\n\n\n\n\n\n\n    \n    render () {\n        // const { deviceID, isOnline, ownerName} = this.state.deviceInfo;\n        // const {deviceName, isLoading} = this.state;\n        // const info = [{key:1, deviceName, deviceID, deviceStatus:isOnline, ownerName}];\n        // const messageArray = this.state.deviceMessage;\n        return (\n\n            <div>\n                <Descriptions\n                    title=\"出示报价\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                />\n                {/* {\n                    isLoading ? <Spin style={{marginTop:'20px'}}/> : <Table columns={this.deviceColumns} dataSource={info} pagination={false}/>\n                } */}\n                <ProductList productArray={this.state.productInSell}></ProductList>\n\n                <Descriptions\n                    title=\"揭示报价\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                    style={{marginTop:'50px'}}\n                />\n                <ProductList productArray={this.state.productInReveal}></ProductList>\n\n                <Descriptions\n                    title=\"拍卖完成\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                    style={{marginTop:'50px'}}\n                />\n                <ProductList productArray={this.state.productInFinalize}></ProductList>\n\n            </div>\n        );\n    }\n}\n\nexport default AuctionInto;\n\n\n\n\n// const Shoppi1ng = [\n//     {\n//         title: '消息ID',\n//         dataIndex: 'messageID',\n//         key: 'messageID',\n//     },\n//     {\n//         title: '发送位置',\n//         dataIndex: 'location',\n//         key: 'location'\n//     },\n//     {\n//         title: '消息类型',\n//         key: 'messageType',\n//         dataIndex: 'messageType',\n//         render: tag => {\n//             if(tag === 0) return <Tag color={'green'} key={tag}>正常消息</Tag>\n//             if(tag === 1) return <Tag color={'red'} key={tag}>告警消息</Tag>\n//             if(tag === 2) return <Tag color={'blue'} key={tag}>设备上线</Tag>\n//             if(tag === 3) return <Tag color={'yellow'} key={tag}>设备离线</Tag>\n\n//         }\n//     },\n//     {\n//         title: '消息内容',\n//         dataIndex: 'messageContent',\n//         key: 'messageContent',\n//     }\n\n// ]\n\n// class EditDevice extends Component {\n\n\n\n\n//     static getDerivedStateFromProps(props, state) {\n//         if (props.location.state.deviceID !== \"\") {\n//             return {\n//                 deviceID: props.location.state.deviceID\n//             }\n//         }\n//         return null\n//     }\n\n//     setMessage = message => {\n//         this.setState({deviceMessage:message})\n//     }\n\n//     componentDidMount () {\n//         setTimeout(() => this.setState({...this.state}), 500);\n//         const deviceID = this.state.deviceID;\n//         let path = [];\n//         axios.post('/getDeviceInfo', {\n//             deviceID:deviceID\n//         }).then(response => {\n//             const data = response.data;\n//             const message = data.deviceMessage;\n//             if(data.status === 'failed'){\n//                 message.warning(\"获取设备信息失败\")\n//             }\n//             else if(data.status === 'notExist'){\n//                 message.warning('设备不存在')\n//             }\n//             else{\n//                 const messageArray = message.map((item, index) => {\n//                     const obj = JSON.parse(item.content);\n//                     let infoItem =  {\n//                         key: item.messageID,\n//                         messageID: item.messageID,\n//                         messageType: obj.alert,\n//                         messageContent: obj.info,\n//                         location:\"无\",\n//                         lat:obj.lat,\n//                         lng:obj.lng\n//                     }\n//                     if(obj.lat !== undefined && obj.lng !== undefined) {\n//                         path = [...path, [{lng:obj.lng, lat:obj.lat}, obj.alert]];\n//                         axios.get(`https://restapi.amap.com/v3/geocode/regeo?\" +\n//                                     \"output=xml&location=${infoItem.lng},${infoItem.lat}&key=167046dfd610b3eea087876e05ee0181&radius=1000&extensions=base`)\n//                             .then(response => {\n//                                 const data = response.data;\n//                                 infoItem.location = data.regeocode.addressComponent.city;\n//                             });\n//                     }\n//                     return infoItem;\n//                 });\n//                 setTimeout(() => {\n//                     this.setState({deviceInfo:data.deviceInfo, deviceMessage:[...messageArray], deviceName: data.deviceInfo.deviceName, path:path, isLoading:false});\n//                 }, 1000);\n//             }\n//         })\n\n//     }\n\n//     deleteDevice = () => {\n//         const deviceID = this.state.deviceID;\n//         console.log(deviceID)\n//         axios.post('/deleteDevice', {\n//             deviceID:deviceID\n//         }).then(response => {\n//             const data = response.data;\n//             if(data.status === 'success') {\n//                 cookie.save('deleteSuccess', true, {path: '/'});\n//                 window.location.href='/index/personalInfo';\n//             }\n//             else{\n//                 message.warning('删除失败');\n//             }\n//         })\n//     }\n\n//     updateDevice = deviceName => {\n//        this.setState({deviceName}) ;\n//     }\n\n//     render () {\n        \n//         );\n//     }\n// }\n\n"]},"metadata":{},"sourceType":"module"}