{"ast":null,"code":"// BLAKE2s hash function in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\nconst util = require('./util'); // Little-endian byte access.\n// Expects a Uint8Array and an index\n// Returns the little-endian uint32 at v[i..i+3]\n\n\nfunction B2S_GET32(v, i) {\n  return v[i] ^ v[i + 1] << 8 ^ v[i + 2] << 16 ^ v[i + 3] << 24;\n} // Mixing function G.\n\n\nfunction B2S_G(a, b, c, d, x, y) {\n  v[a] = v[a] + v[b] + x;\n  v[d] = ROTR32(v[d] ^ v[a], 16);\n  v[c] = v[c] + v[d];\n  v[b] = ROTR32(v[b] ^ v[c], 12);\n  v[a] = v[a] + v[b] + y;\n  v[d] = ROTR32(v[d] ^ v[a], 8);\n  v[c] = v[c] + v[d];\n  v[b] = ROTR32(v[b] ^ v[c], 7);\n} // 32-bit right rotation\n// x should be a uint32\n// y must be between 1 and 31, inclusive\n\n\nfunction ROTR32(x, y) {\n  return x >>> y ^ x << 32 - y;\n} // Initialization Vector.\n\n\nconst BLAKE2S_IV = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);\nconst SIGMA = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0]); // Compression function. \"last\" flag indicates last block\n\nconst v = new Uint32Array(16);\nconst m = new Uint32Array(16);\n\nfunction blake2sCompress(ctx, last) {\n  let i = 0;\n\n  for (i = 0; i < 8; i++) {\n    // init work variables\n    v[i] = ctx.h[i];\n    v[i + 8] = BLAKE2S_IV[i];\n  }\n\n  v[12] ^= ctx.t; // low 32 bits of offset\n\n  v[13] ^= ctx.t / 0x100000000; // high 32 bits\n\n  if (last) {\n    // last block flag set ?\n    v[14] = ~v[14];\n  }\n\n  for (i = 0; i < 16; i++) {\n    // get little-endian words\n    m[i] = B2S_GET32(ctx.b, 4 * i);\n  } // ten rounds of mixing\n  // uncomment the DebugPrint calls to log the computation\n  // and match the RFC sample documentation\n  // util.debugPrint('          m[16]', m, 32)\n\n\n  for (i = 0; i < 10; i++) {\n    // util.debugPrint('   (i=' + i + ')  v[16]', v, 32)\n    B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]]);\n    B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]]);\n    B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]]);\n    B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]]);\n    B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]]);\n    B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]]);\n    B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]]);\n    B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]]);\n  } // util.debugPrint('   (i=10) v[16]', v, 32)\n\n\n  for (i = 0; i < 8; i++) {\n    ctx.h[i] ^= v[i] ^ v[i + 8];\n  } // util.debugPrint('h[8]', ctx.h, 32)\n\n} // Creates a BLAKE2s hashing context\n// Requires an output length between 1 and 32 bytes\n// Takes an optional Uint8Array key\n\n\nfunction blake2sInit(outlen, key) {\n  if (!(outlen > 0 && outlen <= 32)) {\n    throw new Error('Incorrect output length, should be in [1, 32]');\n  }\n\n  const keylen = key ? key.length : 0;\n\n  if (key && !(keylen > 0 && keylen <= 32)) {\n    throw new Error('Incorrect key length, should be in [1, 32]');\n  }\n\n  const ctx = {\n    h: new Uint32Array(BLAKE2S_IV),\n    // hash state\n    b: new Uint8Array(64),\n    // input block\n    c: 0,\n    // pointer within block\n    t: 0,\n    // input count\n    outlen: outlen // output length in bytes\n\n  };\n  ctx.h[0] ^= 0x01010000 ^ keylen << 8 ^ outlen;\n\n  if (keylen > 0) {\n    blake2sUpdate(ctx, key);\n    ctx.c = 64; // at the end\n  }\n\n  return ctx;\n} // Updates a BLAKE2s streaming hash\n// Requires hash context and Uint8Array (byte array)\n\n\nfunction blake2sUpdate(ctx, input) {\n  for (let i = 0; i < input.length; i++) {\n    if (ctx.c === 64) {\n      // buffer full ?\n      ctx.t += ctx.c; // add counters\n\n      blake2sCompress(ctx, false); // compress (not last)\n\n      ctx.c = 0; // counter to zero\n    }\n\n    ctx.b[ctx.c++] = input[i];\n  }\n} // Completes a BLAKE2s streaming hash\n// Returns a Uint8Array containing the message digest\n\n\nfunction blake2sFinal(ctx) {\n  ctx.t += ctx.c; // mark last block offset\n\n  while (ctx.c < 64) {\n    // fill up with zeros\n    ctx.b[ctx.c++] = 0;\n  }\n\n  blake2sCompress(ctx, true); // final block flag = 1\n  // little endian convert and store\n\n  const out = new Uint8Array(ctx.outlen);\n\n  for (let i = 0; i < ctx.outlen; i++) {\n    out[i] = ctx.h[i >> 2] >> 8 * (i & 3) & 0xff;\n  }\n\n  return out;\n} // Computes the BLAKE2S hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\n\n\nfunction blake2s(input, key, outlen) {\n  // preprocess inputs\n  outlen = outlen || 32;\n  input = util.normalizeInput(input); // do the math\n\n  const ctx = blake2sInit(outlen, key);\n  blake2sUpdate(ctx, input);\n  return blake2sFinal(ctx);\n} // Computes the BLAKE2S hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\n\n\nfunction blake2sHex(input, key, outlen) {\n  const output = blake2s(input, key, outlen);\n  return util.toHex(output);\n}\n\nmodule.exports = {\n  blake2s: blake2s,\n  blake2sHex: blake2sHex,\n  blake2sInit: blake2sInit,\n  blake2sUpdate: blake2sUpdate,\n  blake2sFinal: blake2sFinal\n};","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/blakejs/blake2s.js"],"names":["util","require","B2S_GET32","v","i","B2S_G","a","b","c","d","x","y","ROTR32","BLAKE2S_IV","Uint32Array","SIGMA","Uint8Array","m","blake2sCompress","ctx","last","h","t","blake2sInit","outlen","key","Error","keylen","length","blake2sUpdate","input","blake2sFinal","out","blake2s","normalizeInput","blake2sHex","output","toHex","module","exports"],"mappings":"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","sourcesContent":["// BLAKE2s hash function in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\n\nconst util = require('./util')\n\n// Little-endian byte access.\n// Expects a Uint8Array and an index\n// Returns the little-endian uint32 at v[i..i+3]\nfunction B2S_GET32 (v, i) {\n  return v[i] ^ (v[i + 1] << 8) ^ (v[i + 2] << 16) ^ (v[i + 3] << 24)\n}\n\n// Mixing function G.\nfunction B2S_G (a, b, c, d, x, y) {\n  v[a] = v[a] + v[b] + x\n  v[d] = ROTR32(v[d] ^ v[a], 16)\n  v[c] = v[c] + v[d]\n  v[b] = ROTR32(v[b] ^ v[c], 12)\n  v[a] = v[a] + v[b] + y\n  v[d] = ROTR32(v[d] ^ v[a], 8)\n  v[c] = v[c] + v[d]\n  v[b] = ROTR32(v[b] ^ v[c], 7)\n}\n\n// 32-bit right rotation\n// x should be a uint32\n// y must be between 1 and 31, inclusive\nfunction ROTR32 (x, y) {\n  return (x >>> y) ^ (x << (32 - y))\n}\n\n// Initialization Vector.\nconst BLAKE2S_IV = new Uint32Array([\n  0x6a09e667,\n  0xbb67ae85,\n  0x3c6ef372,\n  0xa54ff53a,\n  0x510e527f,\n  0x9b05688c,\n  0x1f83d9ab,\n  0x5be0cd19\n])\n\nconst SIGMA = new Uint8Array([\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  14,\n  10,\n  4,\n  8,\n  9,\n  15,\n  13,\n  6,\n  1,\n  12,\n  0,\n  2,\n  11,\n  7,\n  5,\n  3,\n  11,\n  8,\n  12,\n  0,\n  5,\n  2,\n  15,\n  13,\n  10,\n  14,\n  3,\n  6,\n  7,\n  1,\n  9,\n  4,\n  7,\n  9,\n  3,\n  1,\n  13,\n  12,\n  11,\n  14,\n  2,\n  6,\n  5,\n  10,\n  4,\n  0,\n  15,\n  8,\n  9,\n  0,\n  5,\n  7,\n  2,\n  4,\n  10,\n  15,\n  14,\n  1,\n  11,\n  12,\n  6,\n  8,\n  3,\n  13,\n  2,\n  12,\n  6,\n  10,\n  0,\n  11,\n  8,\n  3,\n  4,\n  13,\n  7,\n  5,\n  15,\n  14,\n  1,\n  9,\n  12,\n  5,\n  1,\n  15,\n  14,\n  13,\n  4,\n  10,\n  0,\n  7,\n  6,\n  3,\n  9,\n  2,\n  8,\n  11,\n  13,\n  11,\n  7,\n  14,\n  12,\n  1,\n  3,\n  9,\n  5,\n  0,\n  15,\n  4,\n  8,\n  6,\n  2,\n  10,\n  6,\n  15,\n  14,\n  9,\n  11,\n  3,\n  0,\n  8,\n  12,\n  2,\n  13,\n  7,\n  1,\n  4,\n  10,\n  5,\n  10,\n  2,\n  8,\n  4,\n  7,\n  6,\n  1,\n  5,\n  15,\n  11,\n  9,\n  14,\n  3,\n  12,\n  13,\n  0\n])\n\n// Compression function. \"last\" flag indicates last block\nconst v = new Uint32Array(16)\nconst m = new Uint32Array(16)\nfunction blake2sCompress (ctx, last) {\n  let i = 0\n  for (i = 0; i < 8; i++) {\n    // init work variables\n    v[i] = ctx.h[i]\n    v[i + 8] = BLAKE2S_IV[i]\n  }\n\n  v[12] ^= ctx.t // low 32 bits of offset\n  v[13] ^= ctx.t / 0x100000000 // high 32 bits\n  if (last) {\n    // last block flag set ?\n    v[14] = ~v[14]\n  }\n\n  for (i = 0; i < 16; i++) {\n    // get little-endian words\n    m[i] = B2S_GET32(ctx.b, 4 * i)\n  }\n\n  // ten rounds of mixing\n  // uncomment the DebugPrint calls to log the computation\n  // and match the RFC sample documentation\n  // util.debugPrint('          m[16]', m, 32)\n  for (i = 0; i < 10; i++) {\n    // util.debugPrint('   (i=' + i + ')  v[16]', v, 32)\n    B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]])\n    B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]])\n    B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]])\n    B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]])\n    B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]])\n    B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]])\n    B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]])\n    B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]])\n  }\n  // util.debugPrint('   (i=10) v[16]', v, 32)\n\n  for (i = 0; i < 8; i++) {\n    ctx.h[i] ^= v[i] ^ v[i + 8]\n  }\n  // util.debugPrint('h[8]', ctx.h, 32)\n}\n\n// Creates a BLAKE2s hashing context\n// Requires an output length between 1 and 32 bytes\n// Takes an optional Uint8Array key\nfunction blake2sInit (outlen, key) {\n  if (!(outlen > 0 && outlen <= 32)) {\n    throw new Error('Incorrect output length, should be in [1, 32]')\n  }\n  const keylen = key ? key.length : 0\n  if (key && !(keylen > 0 && keylen <= 32)) {\n    throw new Error('Incorrect key length, should be in [1, 32]')\n  }\n\n  const ctx = {\n    h: new Uint32Array(BLAKE2S_IV), // hash state\n    b: new Uint8Array(64), // input block\n    c: 0, // pointer within block\n    t: 0, // input count\n    outlen: outlen // output length in bytes\n  }\n  ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen\n\n  if (keylen > 0) {\n    blake2sUpdate(ctx, key)\n    ctx.c = 64 // at the end\n  }\n\n  return ctx\n}\n\n// Updates a BLAKE2s streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2sUpdate (ctx, input) {\n  for (let i = 0; i < input.length; i++) {\n    if (ctx.c === 64) {\n      // buffer full ?\n      ctx.t += ctx.c // add counters\n      blake2sCompress(ctx, false) // compress (not last)\n      ctx.c = 0 // counter to zero\n    }\n    ctx.b[ctx.c++] = input[i]\n  }\n}\n\n// Completes a BLAKE2s streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2sFinal (ctx) {\n  ctx.t += ctx.c // mark last block offset\n  while (ctx.c < 64) {\n    // fill up with zeros\n    ctx.b[ctx.c++] = 0\n  }\n  blake2sCompress(ctx, true) // final block flag = 1\n\n  // little endian convert and store\n  const out = new Uint8Array(ctx.outlen)\n  for (let i = 0; i < ctx.outlen; i++) {\n    out[i] = (ctx.h[i >> 2] >> (8 * (i & 3))) & 0xff\n  }\n  return out\n}\n\n// Computes the BLAKE2S hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2s (input, key, outlen) {\n  // preprocess inputs\n  outlen = outlen || 32\n  input = util.normalizeInput(input)\n\n  // do the math\n  const ctx = blake2sInit(outlen, key)\n  blake2sUpdate(ctx, input)\n  return blake2sFinal(ctx)\n}\n\n// Computes the BLAKE2S hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2sHex (input, key, outlen) {\n  const output = blake2s(input, key, outlen)\n  return util.toHex(output)\n}\n\nmodule.exports = {\n  blake2s: blake2s,\n  blake2sHex: blake2sHex,\n  blake2sInit: blake2sInit,\n  blake2sUpdate: blake2sUpdate,\n  blake2sFinal: blake2sFinal\n}\n"]},"metadata":{},"sourceType":"script"}