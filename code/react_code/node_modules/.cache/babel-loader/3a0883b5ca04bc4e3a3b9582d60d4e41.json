{"ast":null,"code":"// import { ContactsOutlined } from \"@ant-design/icons\";\nimport { default as Web3 } from 'web3';\n\nfunction getWeb3() {\n  () => new Promise((resolve, reject) => {\n    console.log('[Loading...] Start get web3'); // Wait for loading completion to avoid race conditions with web3 injection timing.\n\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          console.log(\"Use defined web3 setting.\"); // Accounts now exposed\n\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      } // Legacy dapp browsers...\n      else if (window.web3) {\n          // Use Mist/MetaMask's provider.\n          const web3 = window.web3;\n          console.log(\"Injected web3 detected.\");\n          resolve(web3);\n        } // Fallback to localhost; use dev console port by default...\n        else {\n            const provider = new Web3.providers.WebsocketProvider(\"http://localshost:8545\");\n            const web3 = new Web3(provider);\n            console.log(\"No web3 instance injected, using Local web3.\");\n            console.log(\"Use http://localshost:8545.\");\n            resolve(web3);\n          }\n    });\n  });\n}\n\nexport default getWeb3;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/src/utils/getWeb3.js"],"names":["default","Web3","getWeb3","Promise","resolve","reject","console","log","window","addEventListener","ethereum","web3","enable","error","provider","providers","WebsocketProvider"],"mappings":"AAAA;AACA,SAASA,OAAO,IAAIC,IAApB,QAAgC,MAAhC;;AAEA,SAASC,OAAT,GAAmB;AACf,QACA,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAD6B,CAE7B;;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAW;AACvC;AACA,UAAID,MAAM,CAACE,QAAX,EAAqB;AACjB,cAAMC,IAAI,GAAG,IAAIV,IAAJ,CAASO,MAAM,CAACE,QAAhB,CAAb;;AACA,YAAI;AACA;AACA,gBAAMF,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EAAN;AACAN,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAHA,CAIA;;AACAH,UAAAA,OAAO,CAACO,IAAD,CAAP;AACH,SAND,CAME,OAAOE,KAAP,EAAc;AACZR,UAAAA,MAAM,CAACQ,KAAD,CAAN;AACH;AACJ,OAXD,CAYA;AAZA,WAaK,IAAIL,MAAM,CAACG,IAAX,EAAiB;AAClB;AACA,gBAAMA,IAAI,GAAGH,MAAM,CAACG,IAApB;AACAL,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAH,UAAAA,OAAO,CAACO,IAAD,CAAP;AACH,SALI,CAML;AANK,aAOA;AACD,kBAAMG,QAAQ,GAAG,IAAIb,IAAI,CAACc,SAAL,CAAeC,iBAAnB,CACb,wBADa,CAAjB;AAGA,kBAAML,IAAI,GAAG,IAAIV,IAAJ,CAASa,QAAT,CAAb;AACAR,YAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAH,YAAAA,OAAO,CAACO,IAAD,CAAP;AACH;AACJ,KA/BD;AAgCH,GAnCD,CADA;AAqCH;;AAED,eAAeT,OAAf","sourcesContent":["// import { ContactsOutlined } from \"@ant-design/icons\";\nimport { default as Web3 } from 'web3';\n\nfunction getWeb3() {\n    () =>\n    new Promise((resolve, reject) => {\n        console.log('[Loading...] Start get web3');\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        window.addEventListener(\"load\", async() => {\n            // Modern dapp browsers...\n            if (window.ethereum) {\n                const web3 = new Web3(window.ethereum);\n                try {\n                    // Request account access if needed\n                    await window.ethereum.enable();\n                    console.log(\"Use defined web3 setting.\");\n                    // Accounts now exposed\n                    resolve(web3);\n                } catch (error) {\n                    reject(error);\n                }\n            }\n            // Legacy dapp browsers...\n            else if (window.web3) {\n                // Use Mist/MetaMask's provider.\n                const web3 = window.web3;\n                console.log(\"Injected web3 detected.\");\n                resolve(web3);\n            }\n            // Fallback to localhost; use dev console port by default...\n            else {\n                const provider = new Web3.providers.WebsocketProvider(\n                    \"http://localshost:8545\"\n                );\n                const web3 = new Web3(provider);\n                console.log(\"No web3 instance injected, using Local web3.\");\n                console.log(\"Use http://localshost:8545.\");\n                resolve(web3);\n            }\n        });\n    });\n}\n\nexport default getWeb3;"]},"metadata":{},"sourceType":"module"}