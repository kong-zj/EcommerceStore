{"ast":null,"code":"const debug = require(\"debug\")(\"contract:utils\"); // eslint-disable-line no-unused-vars\n\n\nconst web3Utils = require(\"web3-utils\");\n\nconst bigNumberify = require(\"ethers/utils/bignumber\").bigNumberify;\n\nconst abi = require(\"web3-eth-abi\");\n\nconst BlockchainUtils = require(\"@truffle/blockchain-utils\");\n\nconst reformat = require(\"./reformat\");\n\nconst Utils = {\n  is_object(val) {\n    return typeof val === \"object\" && !Array.isArray(val);\n  },\n\n  is_big_number(val) {\n    if (typeof val !== \"object\") return false;\n    return web3Utils.isBN(val) || web3Utils.isBigNumber(val);\n  },\n\n  is_tx_params(val) {\n    if (!Utils.is_object(val)) return false;\n    if (Utils.is_big_number(val)) return false;\n    const allowed_fields = {\n      from: true,\n      to: true,\n      gas: true,\n      gasPrice: true,\n      value: true,\n      data: true,\n      nonce: true,\n      privateFor: true\n    };\n\n    for (let field_name of Object.keys(val)) {\n      if (allowed_fields[field_name]) return true;\n    }\n\n    return false;\n  },\n\n  decodeLogs(_logs, isSingle) {\n    const constructor = this;\n    const logs = Utils.toTruffleLog(_logs, isSingle);\n    return logs.map(log => {\n      const logABI = constructor.events[log.topics[0]];\n\n      if (logABI == null) {\n        return null;\n      }\n\n      const copy = Utils.merge({}, log);\n      copy.event = logABI.name;\n      copy.topics = logABI.anonymous ? copy.topics : copy.topics.slice(1);\n\n      if (copy.data === \"0x\") {\n        copy.data = \"\";\n      }\n\n      let logArgs;\n\n      try {\n        logArgs = abi.decodeLog(logABI.inputs, copy.data, copy.topics);\n      } catch (_) {\n        return null;\n      }\n\n      copy.args = reformat.numbers.call(constructor, logArgs, logABI.inputs);\n      delete copy.data;\n      delete copy.topics;\n      return copy;\n    }).filter(log => log != null);\n  },\n\n  toTruffleLog(events, isSingle) {\n    // Transform singletons (from event listeners) to the kind of\n    // object we find on the receipt\n    if (isSingle && typeof isSingle === \"boolean\") {\n      const temp = [];\n      temp.push(events);\n      return temp.map(log => {\n        log.data = log.raw.data;\n        log.topics = log.raw.topics;\n        return log;\n      });\n    } // Or reformat items in the existing array\n\n\n    events.forEach(event => {\n      if (event.raw) {\n        event.data = event.raw.data;\n        event.topics = event.raw.topics;\n      }\n    });\n    return events;\n  },\n\n  merge() {\n    const merged = {};\n    const args = Array.prototype.slice.call(arguments);\n\n    for (let i = 0; i < args.length; i++) {\n      const object = args[i];\n      const keys = Object.keys(object);\n\n      for (let j = 0; j < keys.length; j++) {\n        const key = keys[j];\n        const value = object[key];\n        merged[key] = value;\n      }\n    }\n\n    return merged;\n  },\n\n  parallel(arr, callback = () => {}) {\n    if (!arr.length) {\n      return callback(null, []);\n    }\n\n    let index = 0;\n    const results = new Array(arr.length);\n    arr.forEach((fn, position) => {\n      fn((err, result) => {\n        if (err) {\n          callback(err);\n\n          callback = () => {};\n        } else {\n          index++;\n          results[position] = result;\n\n          if (index >= arr.length) {\n            callback(null, results);\n          }\n        }\n      });\n    });\n  },\n\n  linkBytecode(bytecode, links) {\n    Object.keys(links).forEach(library_name => {\n      const library_address = links[library_name];\n      const regex = new RegExp(`__${library_name}_+`, \"g\");\n      bytecode = bytecode.replace(regex, library_address.replace(\"0x\", \"\"));\n    });\n    return bytecode;\n  },\n\n  // Extracts optional tx params from a list of fn arguments\n  getTxParams(methodABI, args) {\n    const constructor = this;\n    const expected_arg_count = methodABI ? methodABI.inputs.length : 0;\n    let tx_params = {};\n    const last_arg = args[args.length - 1];\n\n    if (args.length === expected_arg_count + 1 && Utils.is_tx_params(last_arg)) {\n      tx_params = args.pop();\n    }\n\n    return Utils.merge(constructor.class_defaults, tx_params);\n  },\n\n  // Verifies that a contracts libraries have been linked correctly.\n  // Throws on error\n  checkLibraries() {\n    const constructor = this;\n    const regex = /__[^_]+_+/g;\n    let unlinked_libraries = constructor.binary.match(regex);\n\n    if (unlinked_libraries !== null) {\n      unlinked_libraries = unlinked_libraries.map((name // Remove underscores\n      ) => name.replace(/_/g, \"\")).sort().filter((name, index, arr) => {\n        // Remove duplicates\n        if (index + 1 >= arr.length) {\n          return true;\n        }\n\n        return name !== arr[index + 1];\n      }).join(\", \");\n      const error = `${constructor.contractName} contains unresolved libraries. You must deploy and link the following libraries before you can deploy a new version of ${constructor.contractName}: ${unlinked_libraries}`;\n      throw new Error(error);\n    }\n  },\n\n  convertToEthersBN(original) {\n    const converted = [];\n    original.forEach(item => {\n      // Recurse for arrays\n      if (Array.isArray(item)) {\n        converted.push(Utils.convertToEthersBN(item)); // Convert Web3 BN / BigNumber\n      } else if (Utils.is_big_number(item)) {\n        const ethersBN = bigNumberify(item.toString());\n        converted.push(ethersBN);\n      } else {\n        converted.push(item);\n      }\n    });\n    return converted;\n  },\n\n  bigNumberify,\n\n  /**\n   * Multiplies an ethers.js BigNumber and a number with decimal places using\n   * integer math rather than using an arbitrary floating-point library like\n   * `bignumber.js`.\n   * @param  {BigNumber} bignum            an ethers.js BigNumber (use bigNumberify)\n   * @param  {Number}    decimal           a number which has 0+ decimal places\n   * @param  {Number}    [maxPrecision=5]  the max number of signficant figures\n   *                                       `decimal` can have. (default: 5)\n   * @return {BigNumber}                   floor(bignum * decimal)\n   */\n  multiplyBigNumberByDecimal(bignum, decimal, maxPrecision) {\n    if (typeof maxPrecision === \"undefined\") {\n      maxPrecision = 5;\n    }\n\n    const significantFigures = Math.min(decimal.toString().length - 1, // length less one because `.`\n    maxPrecision);\n    const denominator = bigNumberify(10).pow(significantFigures);\n    const numerator = Math.round(decimal * denominator);\n    const secondOperand = bigNumberify(numerator).div(denominator);\n    return bignum.mul(secondOperand);\n  },\n\n  // checks if given contract instance has a set provider\n  checkProvider({\n    currentProvider,\n    contractName\n  }) {\n    if (!currentProvider) throw new Error(`${contractName} error: Please call setProvider() first before calling new().`);\n  },\n\n  // verifies current network has been assigned to contract instance\n  checkNetworkArtifactMatch({\n    networks,\n    network_id,\n    contractName\n  }) {\n    if (networks[network_id] == null) throw new Error(`${contractName} has not been deployed to detected network (network/artifact mismatch)`);\n  },\n\n  // verifies contract instance has been deployed\n  checkDeployment({\n    isDeployed,\n    contractName,\n    network_id\n  }) {\n    if (!isDeployed()) throw new Error(`${contractName} has not been deployed to detected network (${network_id})`);\n  },\n\n  // checks if provided contract address has on-chain code\n  checkCode(onChainCode, contractName, address) {\n    if (!onChainCode || onChainCode.replace(\"0x\", \"\").replace(/0/g, \"\") === \"\") throw new Error(`Cannot create instance of ${contractName}; no code at address ${address}`);\n  },\n\n  // parses known contract instance networks\n  parseKnownNetworks({\n    networks,\n    currentProvider,\n    setNetwork,\n    network_id\n  }, gasLimit) {\n    // wrap uri matching in a promise to allow provider.send time to resolve\n    // (.send call happens in BlockchainUtils.matches)\n    return new Promise((accept, reject) => {\n      // go through all the networks that are listed as\n      // blockchain uris and see if they match\n      const uris = Object.keys(networks).filter(network => network.indexOf(\"blockchain://\") === 0);\n      const matches = uris.map(uri => BlockchainUtils.matches.bind(BlockchainUtils, uri, currentProvider));\n      Utils.parallel(matches, (err, results) => {\n        if (err) reject(err);\n\n        for (let i = 0; i < results.length; i++) {\n          if (results[i]) {\n            setNetwork(uris[i]);\n            accept({\n              id: network_id,\n              blockLimit: gasLimit\n            });\n          }\n        } // no match found!\n\n\n        accept(false);\n      });\n    });\n  },\n\n  // sets a contract instance network ID\n  async setInstanceNetworkID(TruffleContractInstance, chainNetworkID, gasLimit) {\n    // if chainNetworkID already present as network configuration, use it\n    if (TruffleContractInstance.hasNetwork(chainNetworkID)) {\n      TruffleContractInstance.setNetwork(chainNetworkID);\n      return {\n        id: TruffleContractInstance.network_id,\n        blockLimit: gasLimit\n      };\n    } // chainNetworkID not present,\n    // parse all known networks\n\n\n    const matchedNetwork = await Utils.parseKnownNetworks(TruffleContractInstance, gasLimit);\n    if (matchedNetwork) return matchedNetwork; // network unknown, trust the provider and use given chainNetworkID\n\n    TruffleContractInstance.setNetwork(chainNetworkID);\n    return {\n      id: TruffleContractInstance.network_id,\n      blockLimit: gasLimit\n    };\n  }\n\n};\nmodule.exports = Utils;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/truffle-contract/lib/utils.js"],"names":["debug","require","web3Utils","bigNumberify","abi","BlockchainUtils","reformat","Utils","is_object","val","Array","isArray","is_big_number","isBN","isBigNumber","is_tx_params","allowed_fields","from","to","gas","gasPrice","value","data","nonce","privateFor","field_name","Object","keys","decodeLogs","_logs","isSingle","constructor","logs","toTruffleLog","map","log","logABI","events","topics","copy","merge","event","name","anonymous","slice","logArgs","decodeLog","inputs","_","args","numbers","call","filter","temp","push","raw","forEach","merged","prototype","arguments","i","length","object","j","key","parallel","arr","callback","index","results","fn","position","err","result","linkBytecode","bytecode","links","library_name","library_address","regex","RegExp","replace","getTxParams","methodABI","expected_arg_count","tx_params","last_arg","pop","class_defaults","checkLibraries","unlinked_libraries","binary","match","sort","join","error","contractName","Error","convertToEthersBN","original","converted","item","ethersBN","toString","multiplyBigNumberByDecimal","bignum","decimal","maxPrecision","significantFigures","Math","min","denominator","pow","numerator","round","secondOperand","div","mul","checkProvider","currentProvider","checkNetworkArtifactMatch","networks","network_id","checkDeployment","isDeployed","checkCode","onChainCode","address","parseKnownNetworks","setNetwork","gasLimit","Promise","accept","reject","uris","network","indexOf","matches","uri","bind","id","blockLimit","setInstanceNetworkID","TruffleContractInstance","chainNetworkID","hasNetwork","matchedNetwork","module","exports"],"mappings":"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","sourcesContent":["const debug = require(\"debug\")(\"contract:utils\"); // eslint-disable-line no-unused-vars\nconst web3Utils = require(\"web3-utils\");\nconst bigNumberify = require(\"ethers/utils/bignumber\").bigNumberify;\nconst abi = require(\"web3-eth-abi\");\nconst BlockchainUtils = require(\"@truffle/blockchain-utils\");\nconst reformat = require(\"./reformat\");\n\nconst Utils = {\n  is_object(val) {\n    return typeof val === \"object\" && !Array.isArray(val);\n  },\n\n  is_big_number(val) {\n    if (typeof val !== \"object\") return false;\n\n    return web3Utils.isBN(val) || web3Utils.isBigNumber(val);\n  },\n\n  is_tx_params(val) {\n    if (!Utils.is_object(val)) return false;\n    if (Utils.is_big_number(val)) return false;\n\n    const allowed_fields = {\n      from: true,\n      to: true,\n      gas: true,\n      gasPrice: true,\n      value: true,\n      data: true,\n      nonce: true,\n      privateFor: true\n    };\n\n    for (let field_name of Object.keys(val)) {\n      if (allowed_fields[field_name]) return true;\n    }\n\n    return false;\n  },\n\n  decodeLogs(_logs, isSingle) {\n    const constructor = this;\n    const logs = Utils.toTruffleLog(_logs, isSingle);\n\n    return logs\n      .map(log => {\n        const logABI = constructor.events[log.topics[0]];\n\n        if (logABI == null) {\n          return null;\n        }\n\n        const copy = Utils.merge({}, log);\n\n        copy.event = logABI.name;\n        copy.topics = logABI.anonymous ? copy.topics : copy.topics.slice(1);\n\n        if (copy.data === \"0x\") {\n          copy.data = \"\";\n        }\n\n        let logArgs;\n        try {\n          logArgs = abi.decodeLog(logABI.inputs, copy.data, copy.topics);\n        } catch (_) {\n          return null;\n        }\n        copy.args = reformat.numbers.call(constructor, logArgs, logABI.inputs);\n\n        delete copy.data;\n        delete copy.topics;\n\n        return copy;\n      })\n      .filter(log => log != null);\n  },\n\n  toTruffleLog(events, isSingle) {\n    // Transform singletons (from event listeners) to the kind of\n    // object we find on the receipt\n    if (isSingle && typeof isSingle === \"boolean\") {\n      const temp = [];\n      temp.push(events);\n      return temp.map(log => {\n        log.data = log.raw.data;\n        log.topics = log.raw.topics;\n        return log;\n      });\n    }\n\n    // Or reformat items in the existing array\n    events.forEach(event => {\n      if (event.raw) {\n        event.data = event.raw.data;\n        event.topics = event.raw.topics;\n      }\n    });\n\n    return events;\n  },\n\n  merge() {\n    const merged = {};\n    const args = Array.prototype.slice.call(arguments);\n\n    for (let i = 0; i < args.length; i++) {\n      const object = args[i];\n      const keys = Object.keys(object);\n      for (let j = 0; j < keys.length; j++) {\n        const key = keys[j];\n        const value = object[key];\n        merged[key] = value;\n      }\n    }\n\n    return merged;\n  },\n  parallel(arr, callback = () => {}) {\n    if (!arr.length) {\n      return callback(null, []);\n    }\n    let index = 0;\n    const results = new Array(arr.length);\n    arr.forEach((fn, position) => {\n      fn((err, result) => {\n        if (err) {\n          callback(err);\n          callback = () => {};\n        } else {\n          index++;\n          results[position] = result;\n          if (index >= arr.length) {\n            callback(null, results);\n          }\n        }\n      });\n    });\n  },\n\n  linkBytecode(bytecode, links) {\n    Object.keys(links).forEach(library_name => {\n      const library_address = links[library_name];\n      const regex = new RegExp(`__${library_name}_+`, \"g\");\n\n      bytecode = bytecode.replace(regex, library_address.replace(\"0x\", \"\"));\n    });\n\n    return bytecode;\n  },\n\n  // Extracts optional tx params from a list of fn arguments\n  getTxParams(methodABI, args) {\n    const constructor = this;\n\n    const expected_arg_count = methodABI ? methodABI.inputs.length : 0;\n\n    let tx_params = {};\n    const last_arg = args[args.length - 1];\n\n    if (\n      args.length === expected_arg_count + 1 &&\n      Utils.is_tx_params(last_arg)\n    ) {\n      tx_params = args.pop();\n    }\n\n    return Utils.merge(constructor.class_defaults, tx_params);\n  },\n\n  // Verifies that a contracts libraries have been linked correctly.\n  // Throws on error\n  checkLibraries() {\n    const constructor = this;\n    const regex = /__[^_]+_+/g;\n    let unlinked_libraries = constructor.binary.match(regex);\n\n    if (unlinked_libraries !== null) {\n      unlinked_libraries = unlinked_libraries\n        .map((\n          name // Remove underscores\n        ) => name.replace(/_/g, \"\"))\n        .sort()\n        .filter((name, index, arr) => {\n          // Remove duplicates\n          if (index + 1 >= arr.length) {\n            return true;\n          }\n\n          return name !== arr[index + 1];\n        })\n        .join(\", \");\n\n      const error = `${\n        constructor.contractName\n      } contains unresolved libraries. You must deploy and link the following libraries before you can deploy a new version of ${\n        constructor.contractName\n      }: ${unlinked_libraries}`;\n\n      throw new Error(error);\n    }\n  },\n\n  convertToEthersBN(original) {\n    const converted = [];\n    original.forEach(item => {\n      // Recurse for arrays\n      if (Array.isArray(item)) {\n        converted.push(Utils.convertToEthersBN(item));\n\n        // Convert Web3 BN / BigNumber\n      } else if (Utils.is_big_number(item)) {\n        const ethersBN = bigNumberify(item.toString());\n        converted.push(ethersBN);\n      } else {\n        converted.push(item);\n      }\n    });\n    return converted;\n  },\n\n  bigNumberify,\n\n  /**\n   * Multiplies an ethers.js BigNumber and a number with decimal places using\n   * integer math rather than using an arbitrary floating-point library like\n   * `bignumber.js`.\n   * @param  {BigNumber} bignum            an ethers.js BigNumber (use bigNumberify)\n   * @param  {Number}    decimal           a number which has 0+ decimal places\n   * @param  {Number}    [maxPrecision=5]  the max number of signficant figures\n   *                                       `decimal` can have. (default: 5)\n   * @return {BigNumber}                   floor(bignum * decimal)\n   */\n  multiplyBigNumberByDecimal(bignum, decimal, maxPrecision) {\n    if (typeof maxPrecision === \"undefined\") {\n      maxPrecision = 5;\n    }\n\n    const significantFigures = Math.min(\n      decimal.toString().length - 1, // length less one because `.`\n      maxPrecision\n    );\n\n    const denominator = bigNumberify(10).pow(significantFigures);\n    const numerator = Math.round(decimal * denominator);\n    const secondOperand = bigNumberify(numerator).div(denominator);\n\n    return bignum.mul(secondOperand);\n  },\n\n  // checks if given contract instance has a set provider\n  checkProvider({ currentProvider, contractName }) {\n    if (!currentProvider)\n      throw new Error(\n        `${contractName} error: Please call setProvider() first before calling new().`\n      );\n  },\n\n  // verifies current network has been assigned to contract instance\n  checkNetworkArtifactMatch({ networks, network_id, contractName }) {\n    if (networks[network_id] == null)\n      throw new Error(\n        `${contractName} has not been deployed to detected network (network/artifact mismatch)`\n      );\n  },\n\n  // verifies contract instance has been deployed\n  checkDeployment({ isDeployed, contractName, network_id }) {\n    if (!isDeployed())\n      throw new Error(\n        `${contractName} has not been deployed to detected network (${network_id})`\n      );\n  },\n\n  // checks if provided contract address has on-chain code\n  checkCode(onChainCode, contractName, address) {\n    if (!onChainCode || onChainCode.replace(\"0x\", \"\").replace(/0/g, \"\") === \"\")\n      throw new Error(\n        `Cannot create instance of ${contractName}; no code at address ${address}`\n      );\n  },\n\n  // parses known contract instance networks\n  parseKnownNetworks(\n    { networks, currentProvider, setNetwork, network_id },\n    gasLimit\n  ) {\n    // wrap uri matching in a promise to allow provider.send time to resolve\n    // (.send call happens in BlockchainUtils.matches)\n    return new Promise((accept, reject) => {\n      // go through all the networks that are listed as\n      // blockchain uris and see if they match\n      const uris = Object.keys(networks).filter(\n        network => network.indexOf(\"blockchain://\") === 0\n      );\n      const matches = uris.map(uri =>\n        BlockchainUtils.matches.bind(BlockchainUtils, uri, currentProvider)\n      );\n\n      Utils.parallel(matches, (err, results) => {\n        if (err) reject(err);\n\n        for (let i = 0; i < results.length; i++) {\n          if (results[i]) {\n            setNetwork(uris[i]);\n            accept({\n              id: network_id,\n              blockLimit: gasLimit\n            });\n          }\n        }\n        // no match found!\n        accept(false);\n      });\n    });\n  },\n\n  // sets a contract instance network ID\n  async setInstanceNetworkID(\n    TruffleContractInstance,\n    chainNetworkID,\n    gasLimit\n  ) {\n    // if chainNetworkID already present as network configuration, use it\n    if (TruffleContractInstance.hasNetwork(chainNetworkID)) {\n      TruffleContractInstance.setNetwork(chainNetworkID);\n      return {\n        id: TruffleContractInstance.network_id,\n        blockLimit: gasLimit\n      };\n    }\n    // chainNetworkID not present,\n    // parse all known networks\n    const matchedNetwork = await Utils.parseKnownNetworks(\n      TruffleContractInstance,\n      gasLimit\n    );\n    if (matchedNetwork) return matchedNetwork;\n\n    // network unknown, trust the provider and use given chainNetworkID\n    TruffleContractInstance.setNetwork(chainNetworkID);\n    return { id: TruffleContractInstance.network_id, blockLimit: gasLimit };\n  }\n};\n\nmodule.exports = Utils;\n"]},"metadata":{},"sourceType":"script"}