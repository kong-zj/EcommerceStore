{"ast":null,"code":"import \"antd/es/empty/style\";\nimport _Empty from \"antd/es/empty\";\nvar _jsxFileName = \"/home/kzj/project/finalize/final/code/react_code/src/components/OnlineChart/index.jsx\";\nimport React, { Component } from 'react';\nimport * as echarts from 'echarts/core';\nimport { TitleComponent, GridComponent, DataZoomComponent } from 'echarts/components';\nimport { BarChart } from 'echarts/charts';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\necharts.use([TitleComponent, GridComponent, DataZoomComponent, BarChart, CanvasRenderer]);\n\nclass OnlineChart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      onlineTimePoint: []\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      data: nextProps.data,\n      onlineTimePoint: nextProps.onlineTimePoint\n    }, () => {\n      if (this.state.data !== undefined) {\n        if (this.state.data.length !== 0) {\n          const chartDom = document.getElementById('onlineChart');\n          const myChart = echarts.init(chartDom);\n          let option;\n          const data = this.state.data;\n          const dataAxis = this.state.onlineTimePoint;\n          option = {\n            title: {\n              text: '在线时长统计/min',\n              subtext: '滑动进行大小缩放'\n            },\n            xAxis: {\n              type: \"category\",\n              data: dataAxis,\n              axisTick: {\n                show: false\n              },\n              axisLine: {\n                show: false\n              },\n              z: 10\n            },\n            yAxis: {\n              axisLine: {\n                show: false\n              },\n              axisTick: {\n                show: false\n              },\n              axisLabel: {\n                textStyle: {\n                  color: '#999'\n                }\n              }\n            },\n            dataZoom: [{\n              type: 'inside'\n            }],\n            series: [{\n              type: 'bar',\n              label: {\n                show: true\n              },\n              showBackground: true,\n              itemStyle: {\n                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                  offset: 0,\n                  color: '#83bff6'\n                }, {\n                  offset: 0.5,\n                  color: '#188df0'\n                }, {\n                  offset: 1,\n                  color: '#188df0'\n                }])\n              },\n              emphasis: {\n                itemStyle: {\n                  color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                    offset: 0,\n                    color: '#2378f7'\n                  }, {\n                    offset: 0.7,\n                    color: '#2378f7'\n                  }, {\n                    offset: 1,\n                    color: '#83bff6'\n                  }])\n                }\n              },\n              data: data\n            }]\n          }; // Enable data zoom when user click bar.\n\n          let zoomSize = 6;\n          myChart.on('click', function (params) {\n            myChart.dispatchAction({\n              type: 'dataZoom',\n              startValue: dataAxis[Math.max(params.dataIndex - zoomSize / 2, 0)],\n              endValue: dataAxis[Math.min(params.dataIndex + zoomSize / 2, data.length - 1)]\n            });\n          });\n          option && myChart.setOption(option);\n        }\n      }\n    });\n  }\n\n  render() {\n    if (this.state.data.length === 0) return /*#__PURE__*/_jsxDEV(_Empty, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 49\n    }, this);else return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: 'onlineChart',\n      style: {\n        height: '400px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }, this);\n  }\n\n}\n\nexport default OnlineChart;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/src/components/OnlineChart/index.jsx"],"names":["React","Component","echarts","TitleComponent","GridComponent","DataZoomComponent","BarChart","CanvasRenderer","use","OnlineChart","state","data","onlineTimePoint","componentWillReceiveProps","nextProps","setState","undefined","length","chartDom","document","getElementById","myChart","init","option","dataAxis","title","text","subtext","xAxis","type","axisTick","show","axisLine","z","yAxis","axisLabel","textStyle","color","dataZoom","series","label","showBackground","itemStyle","graphic","LinearGradient","offset","emphasis","zoomSize","on","params","dispatchAction","startValue","Math","max","dataIndex","endValue","min","setOption","render","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;AAEA,SACIC,cADJ,EAEIC,aAFJ,EAGIC,iBAHJ,QAIO,oBAJP;AAKA,SACIC,QADJ,QAEO,gBAFP;AAGA,SACIC,cADJ,QAEO,mBAFP;;AAIAL,OAAO,CAACM,GAAR,CACI,CAACL,cAAD,EAAiBC,aAAjB,EAAgCC,iBAAhC,EAAmDC,QAAnD,EAA6DC,cAA7D,CADJ;;AAKA,MAAME,WAAN,SAA0BR,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAChCS,KADgC,GACxB;AAACC,MAAAA,IAAI,EAAC,EAAN;AAAUC,MAAAA,eAAe,EAAC;AAA1B,KADwB;AAAA;;AAGhCC,EAAAA,yBAAyB,CAACC,SAAD,EAAW;AAChC,SAAKC,QAAL,CAAc;AACVJ,MAAAA,IAAI,EAAEG,SAAS,CAACH,IADN;AAEVC,MAAAA,eAAe,EAACE,SAAS,CAACF;AAFhB,KAAd,EAGG,MAAM;AACL,UAAG,KAAKF,KAAL,CAAWC,IAAX,KAAoBK,SAAvB,EAAiC;AAC7B,YAAG,KAAKN,KAAL,CAAWC,IAAX,CAAgBM,MAAhB,KAA2B,CAA9B,EAAgC;AAC5B,gBAAMC,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAyB,aAAzB,CAAjB;AACA,gBAAMC,OAAO,GAAGnB,OAAO,CAACoB,IAAR,CAAcJ,QAAd,CAAhB;AACA,cAAIK,MAAJ;AACA,gBAAMZ,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;AACA,gBAAMa,QAAQ,GAAG,KAAKd,KAAL,CAAWE,eAA5B;AAEAW,UAAAA,MAAM,GAAG;AACLE,YAAAA,KAAK,EAAE;AACHC,cAAAA,IAAI,EAAE,YADH;AAEHC,cAAAA,OAAO,EAAE;AAFN,aADF;AAKLC,YAAAA,KAAK,EAAE;AACHC,cAAAA,IAAI,EAAE,UADH;AAEHlB,cAAAA,IAAI,EAAEa,QAFH;AAGHM,cAAAA,QAAQ,EAAE;AACNC,gBAAAA,IAAI,EAAE;AADA,eAHP;AAMHC,cAAAA,QAAQ,EAAE;AACND,gBAAAA,IAAI,EAAE;AADA,eANP;AASHE,cAAAA,CAAC,EAAE;AATA,aALF;AAgBLC,YAAAA,KAAK,EAAE;AACHF,cAAAA,QAAQ,EAAE;AACND,gBAAAA,IAAI,EAAE;AADA,eADP;AAIHD,cAAAA,QAAQ,EAAE;AACNC,gBAAAA,IAAI,EAAE;AADA,eAJP;AAOHI,cAAAA,SAAS,EAAE;AACPC,gBAAAA,SAAS,EAAE;AACPC,kBAAAA,KAAK,EAAE;AADA;AADJ;AAPR,aAhBF;AA6BLC,YAAAA,QAAQ,EAAE,CACN;AACIT,cAAAA,IAAI,EAAE;AADV,aADM,CA7BL;AAkCLU,YAAAA,MAAM,EAAE,CACJ;AACIV,cAAAA,IAAI,EAAE,KADV;AAEIW,cAAAA,KAAK,EAAC;AACFT,gBAAAA,IAAI,EAAC;AADH,eAFV;AAKIU,cAAAA,cAAc,EAAE,IALpB;AAMIC,cAAAA,SAAS,EAAE;AACPL,gBAAAA,KAAK,EAAE,IAAInC,OAAO,CAACyC,OAAR,CAAgBC,cAApB,CACH,CADG,EACA,CADA,EACG,CADH,EACM,CADN,EAEH,CACI;AAACC,kBAAAA,MAAM,EAAE,CAAT;AAAYR,kBAAAA,KAAK,EAAE;AAAnB,iBADJ,EAEI;AAACQ,kBAAAA,MAAM,EAAE,GAAT;AAAcR,kBAAAA,KAAK,EAAE;AAArB,iBAFJ,EAGI;AAACQ,kBAAAA,MAAM,EAAE,CAAT;AAAYR,kBAAAA,KAAK,EAAE;AAAnB,iBAHJ,CAFG;AADA,eANf;AAgBIS,cAAAA,QAAQ,EAAE;AACNJ,gBAAAA,SAAS,EAAE;AACPL,kBAAAA,KAAK,EAAE,IAAInC,OAAO,CAACyC,OAAR,CAAgBC,cAApB,CACH,CADG,EACA,CADA,EACG,CADH,EACM,CADN,EAEH,CACI;AAACC,oBAAAA,MAAM,EAAE,CAAT;AAAYR,oBAAAA,KAAK,EAAE;AAAnB,mBADJ,EAEI;AAACQ,oBAAAA,MAAM,EAAE,GAAT;AAAcR,oBAAAA,KAAK,EAAE;AAArB,mBAFJ,EAGI;AAACQ,oBAAAA,MAAM,EAAE,CAAT;AAAYR,oBAAAA,KAAK,EAAE;AAAnB,mBAHJ,CAFG;AADA;AADL,eAhBd;AA4BI1B,cAAAA,IAAI,EAAEA;AA5BV,aADI;AAlCH,WAAT,CAP4B,CA0E5B;;AACA,cAAIoC,QAAQ,GAAG,CAAf;AACA1B,UAAAA,OAAO,CAAC2B,EAAR,CAAW,OAAX,EAAoB,UAAUC,MAAV,EAAkB;AAClC5B,YAAAA,OAAO,CAAC6B,cAAR,CAAuB;AACnBrB,cAAAA,IAAI,EAAE,UADa;AAEnBsB,cAAAA,UAAU,EAAE3B,QAAQ,CAAC4B,IAAI,CAACC,GAAL,CAASJ,MAAM,CAACK,SAAP,GAAmBP,QAAQ,GAAG,CAAvC,EAA0C,CAA1C,CAAD,CAFD;AAGnBQ,cAAAA,QAAQ,EAAE/B,QAAQ,CAAC4B,IAAI,CAACI,GAAL,CAASP,MAAM,CAACK,SAAP,GAAmBP,QAAQ,GAAG,CAAvC,EAA0CpC,IAAI,CAACM,MAAL,GAAc,CAAxD,CAAD;AAHC,aAAvB;AAKH,WAND;AAOAM,UAAAA,MAAM,IAAIF,OAAO,CAACoC,SAAR,CAAkBlC,MAAlB,CAAV;AACH;AACJ;AACJ,KA3FD;AA4FH;;AAEDmC,EAAAA,MAAM,GAAI;AACN,QAAG,KAAKhD,KAAL,CAAWC,IAAX,CAAgBM,MAAhB,KAA2B,CAA9B,EAAiC,oBAAO;AAAA;AAAA;AAAA;AAAA,YAAP,CAAjC,KACK,oBAAO;AAAK,MAAA,EAAE,EAAE,aAAT;AAAwB,MAAA,KAAK,EAAE;AAAC0C,QAAAA,MAAM,EAAC;AAAR;AAA/B;AAAA;AAAA;AAAA;AAAA,YAAP;AACR;;AArG+B;;AAwGpC,eAAelD,WAAf","sourcesContent":["import React, {Component} from 'react';\nimport * as echarts from 'echarts/core';\nimport { Empty } from 'antd';\nimport {\n    TitleComponent,\n    GridComponent,\n    DataZoomComponent\n} from 'echarts/components';\nimport {\n    BarChart\n} from 'echarts/charts';\nimport {\n    CanvasRenderer\n} from 'echarts/renderers';\n\necharts.use(\n    [TitleComponent, GridComponent, DataZoomComponent, BarChart, CanvasRenderer]\n);\n\n\nclass OnlineChart extends Component {\n    state = {data:[], onlineTimePoint:[]}\n\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            data: nextProps.data,\n            onlineTimePoint:nextProps.onlineTimePoint\n        }, () => {\n            if(this.state.data !== undefined){\n                if(this.state.data.length !== 0){\n                    const chartDom = document.getElementById ('onlineChart');\n                    const myChart = echarts.init (chartDom);\n                    let option;\n                    const data = this.state.data;\n                    const dataAxis = this.state.onlineTimePoint;\n\n                    option = {\n                        title: {\n                            text: '在线时长统计/min',\n                            subtext: '滑动进行大小缩放'\n                        },\n                        xAxis: {\n                            type: \"category\",\n                            data: dataAxis,\n                            axisTick: {\n                                show: false\n                            },\n                            axisLine: {\n                                show: false\n                            },\n                            z: 10\n                        },\n                        yAxis: {\n                            axisLine: {\n                                show: false\n                            },\n                            axisTick: {\n                                show: false\n                            },\n                            axisLabel: {\n                                textStyle: {\n                                    color: '#999'\n                                }\n                            }\n                        },\n                        dataZoom: [\n                            {\n                                type: 'inside'\n                            }\n                        ],\n                        series: [\n                            {\n                                type: 'bar',\n                                label:{\n                                    show:true\n                                },\n                                showBackground: true,\n                                itemStyle: {\n                                    color: new echarts.graphic.LinearGradient(\n                                        0, 0, 0, 1,\n                                        [\n                                            {offset: 0, color: '#83bff6'},\n                                            {offset: 0.5, color: '#188df0'},\n                                            {offset: 1, color: '#188df0'}\n                                        ]\n                                    )\n                                },\n                                emphasis: {\n                                    itemStyle: {\n                                        color: new echarts.graphic.LinearGradient(\n                                            0, 0, 0, 1,\n                                            [\n                                                {offset: 0, color: '#2378f7'},\n                                                {offset: 0.7, color: '#2378f7'},\n                                                {offset: 1, color: '#83bff6'}\n                                            ]\n                                        )\n                                    }\n                                },\n                                data: data\n                            }\n                        ]\n                    };\n                    // Enable data zoom when user click bar.\n                    let zoomSize = 6;\n                    myChart.on('click', function (params) {\n                        myChart.dispatchAction({\n                            type: 'dataZoom',\n                            startValue: dataAxis[Math.max(params.dataIndex - zoomSize / 2, 0)],\n                            endValue: dataAxis[Math.min(params.dataIndex + zoomSize / 2, data.length - 1)]\n                        });\n                    });\n                    option && myChart.setOption(option);\n                }\n            }\n        })\n    }\n\n    render () {\n        if(this.state.data.length === 0) return <Empty/>;\n        else return <div id={'onlineChart'} style={{height:'400px'}}/>;\n    }\n}\n\nexport default OnlineChart;"]},"metadata":{},"sourceType":"module"}