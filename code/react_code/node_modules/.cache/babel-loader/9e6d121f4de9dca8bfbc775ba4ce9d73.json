{"ast":null,"code":"import \"antd/es/timeline/style\";\nimport _Timeline from \"antd/es/timeline\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nvar _jsxFileName = \"/home/kzj/project/finalize/final/code/react_code/src/components/Tracing/index.jsx\";\nimport React, { Component } from \"react\";\nimport { SmileOutlined } from '@ant-design/icons'; //接入web3\n// import getWeb3 from \"../../../utils/getWeb3\";\n// import getEcommerceStore from \"../../../utils/getEcommerceStore\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Tracing extends Component {\n  // 父组件传入\n  // web3={this.state.web3}\n  // tracingContract={this.state.tracingContract}\n  // class={1}\n  // id={productData.ID}\n  constructor(props) {\n    super(props);\n    this.state = {\n      //存储该商品的溯源时间轴数据\n      publisher: [],\n      //描述语句的IPFS解析链接\n      descLink: [],\n      //发生时间\n      exeTimeString: []\n    };\n\n    this.renderTracingDetails = () => {\n      if (this.props.tracingContract === null || this.props.web3 === null) {\n        _message.error(\"连接溯源合约失败\", 2);\n\n        console.log(\"[ERROR]web3 或者 tracingContract 为 null\");\n        return;\n      }\n\n      console.log(\"用来查询的信息 : \");\n      console.log(\"class : \" + this.props.class);\n      console.log(\"id : \" + this.props.id);\n      console.log(\"合约为 : \");\n      console.dir(this.props.tracingContract); //注意回调函数中的this，和外界的this不同，如果向使用外界的this，要赋值成that传过去\n      //注意要使用async，确保先拿到地址，用await关键字确保运行的先后顺序，再用这个地址调用合约方法\n\n      let that = this; // this.props.tracingContract.deployed().then( (i) => {\n      //     console.log(\"进入 this.props.tracingContract.deployed() 的回调函数\");\n      //     try{\n      //         i.getInfoLine(this.props.class, this.props.id).then(res => {\n      //             //可能返回为空，要判断是否真的取到了数据，如果不判断，直接调用，可能出错\n      //             console.log(\"getInfoLine 取到的原始数据为 : \");\n      //             console.dir(res);\n      //             this.setState({\n      //                 Lines : res\n      //             })\n      //             console.log(\"this.state.Lines : \");\n      //             console.dir(this.state.Lines);\n      //         });  \n      //     }catch(err) {\n      //         message.error(\"商品溯源失败\",2);\n      //         console.log(\"调用合约的getInfoLine方法失败 \" + err);\n      //     }\n      // });\n\n      this.props.truffleContract.deployed().then(i => {\n        console.log(\"进入 this.props.truffleContract.deployed() 的回调函数\");\n\n        try {\n          console.log(\"try getTracingInfo\");\n          i.getTracingInfo(this.props.id).then(res => {\n            //可能返回为空，要判断是否真的取到了数据，如果不判断，直接调用，可能出错\n            console.log(\"getInfoLine 取到的原始数据为 : \");\n            console.dir(res);\n            this.setState({\n              publisher: res[0],\n              descLink: res[1],\n              exeTimeString: res[2]\n            });\n            console.log(\"this.state.Lines : \");\n            console.dir(this.state.Lines);\n          });\n        } catch (err) {\n          _message.error(\"商品溯源失败\", 2);\n\n          console.log(\"调用合约的getInfoLine方法失败 \" + err);\n        }\n      });\n    };\n  }\n\n  async componentDidMount() {\n    console.log(\"生成Tracing模块\"); //从区块链拿数据\n\n    this.renderTracingDetails();\n  } //调用区块链方法，得到该商品的溯源信息\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(_Timeline, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.publisher.map((item, i) => {\n            {\n              // 0, 1, 2, 3\n              //blue、red、green、gray\n              let iM4 = i % 4;\n              var colorString = iM4 == 0 ? \"blue\" : iM4 == 1 ? \"red\" : iM4 == 2 ? \"green\" : \"gray\";\n            } // //item中的信息(数组形式)\n            // // 信息发布人\n            // // 描述语句的IPFS解析链接\n            // // 发生时间\n            // return <Timeline.Item color={colorString}>\n            //   <p>{item[1]}</p>\n            //   <p>创建于 {item[2]}</p>\n            //   <p>来自 {item[0]}</p>\n            //    </Timeline.Item>\n            //item中的信息只有publisher, 另外两个信息用i索引\n\n            return /*#__PURE__*/_jsxDEV(_Timeline.Item, {\n              color: colorString,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: item[1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"\\u521B\\u5EFA\\u4E8E \", item[2]]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"\\u6765\\u81EA \", item[0]]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 28\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(_Timeline.Item, {\n          color: \"#00CCFF\",\n          dot: /*#__PURE__*/_jsxDEV(SmileOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 41\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u5173\\u952E\\u4E8B\\u4EF6\\u6301\\u7EED\\u76D1\\u63A7\\u4E2D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Tracing;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/src/components/Tracing/index.jsx"],"names":["React","Component","SmileOutlined","Tracing","constructor","props","state","publisher","descLink","exeTimeString","renderTracingDetails","tracingContract","web3","error","console","log","class","id","dir","that","truffleContract","deployed","then","i","getTracingInfo","res","setState","Lines","err","componentDidMount","render","map","item","iM4","colorString"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport { message, Timeline } from 'antd';\nimport { SmileOutlined } from '@ant-design/icons';\n//接入web3\n// import getWeb3 from \"../../../utils/getWeb3\";\n// import getEcommerceStore from \"../../../utils/getEcommerceStore\";\n\nclass Tracing extends Component {\n\n    state = {\n      //存储该商品的溯源时间轴数据\n      publisher:[],\n      //描述语句的IPFS解析链接\n      descLink:[],\n      //发生时间\n      exeTimeString:[]\n    }\n\n    // 父组件传入\n    // web3={this.state.web3}\n    // tracingContract={this.state.tracingContract}\n    // class={1}\n    // id={productData.ID}\n\n    constructor (props) {\n        super (props);\n    }\n\n\n    async componentDidMount () {\n          console.log(\"生成Tracing模块\");\n          //从区块链拿数据\n          this.renderTracingDetails();      \n    }\n\n\n      //调用区块链方法，得到该商品的溯源信息\n    renderTracingDetails = () => {\n\n      if(this.props.tracingContract === null || this.props.web3 === null){\n          message.error(\"连接溯源合约失败\",2);\n          console.log(\"[ERROR]web3 或者 tracingContract 为 null\");\n          return;\n      }\n\n      console.log(\"用来查询的信息 : \");\n      console.log(\"class : \" + this.props.class);\n      console.log(\"id : \" + this.props.id);\n\n      console.log(\"合约为 : \");\n      console.dir(this.props.tracingContract);\n      \n  \n      //注意回调函数中的this，和外界的this不同，如果向使用外界的this，要赋值成that传过去\n      //注意要使用async，确保先拿到地址，用await关键字确保运行的先后顺序，再用这个地址调用合约方法\n      let that = this;\n\n      // this.props.tracingContract.deployed().then( (i) => {\n      //     console.log(\"进入 this.props.tracingContract.deployed() 的回调函数\");\n      //     try{\n      //         i.getInfoLine(this.props.class, this.props.id).then(res => {\n      //             //可能返回为空，要判断是否真的取到了数据，如果不判断，直接调用，可能出错\n      //             console.log(\"getInfoLine 取到的原始数据为 : \");\n      //             console.dir(res);\n                \n\n      //             this.setState({\n      //                 Lines : res\n      //             })\n\n      //             console.log(\"this.state.Lines : \");\n      //             console.dir(this.state.Lines);\n                  \n      //         });  \n      //     }catch(err) {\n      //         message.error(\"商品溯源失败\",2);\n      //         console.log(\"调用合约的getInfoLine方法失败 \" + err);\n      //     }\n\n          \n      // });\n\n      this.props.truffleContract.deployed().then( (i) => {\n        console.log(\"进入 this.props.truffleContract.deployed() 的回调函数\");\n        try{\n            console.log(\"try getTracingInfo\");\n            i.getTracingInfo(this.props.id).then(res => {\n                //可能返回为空，要判断是否真的取到了数据，如果不判断，直接调用，可能出错\n                console.log(\"getInfoLine 取到的原始数据为 : \");\n                console.dir(res);\n              \n\n                this.setState({\n                  publisher:res[0],\n                  descLink:res[1],\n                  exeTimeString:res[2]\n                })\n\n                console.log(\"this.state.Lines : \");\n                console.dir(this.state.Lines);\n                \n            });  \n        }catch(err) {\n            message.error(\"商品溯源失败\",2);\n            console.log(\"调用合约的getInfoLine方法失败 \" + err);\n        }\n\n        \n    });\n  }\n\n  \n    \n\n\n    \n    render () {\n        return (\n\n\n            <div>\n\n<Timeline>\n            <div>\n                {this.state.publisher.map((item,i)=>{\n                    {\n                      // 0, 1, 2, 3\n                      //blue、red、green、gray\n                      let iM4=i%4;\n                      var colorString = iM4==0 ? \"blue\" : (iM4==1 ? \"red\" : (iM4==2 ? \"green\" : \"gray\"));\n                    }\n                    // //item中的信息(数组形式)\n                    // // 信息发布人\n                    // // 描述语句的IPFS解析链接\n                    // // 发生时间\n\n                    // return <Timeline.Item color={colorString}>\n                    //   <p>{item[1]}</p>\n                    //   <p>创建于 {item[2]}</p>\n                    //   <p>来自 {item[0]}</p>\n                    //    </Timeline.Item>\n\n                    //item中的信息只有publisher, 另外两个信息用i索引\n\n                    return <Timeline.Item color={colorString}>\n                      <p>{item[1]}</p>\n                      <p>创建于 {item[2]}</p>\n                      <p>来自 {item[0]}</p>\n                       </Timeline.Item>\n                })}\n            </div>\n    \n    <Timeline.Item color=\"#00CCFF\" dot={<SmileOutlined />}>\n      <p>关键事件持续监控中</p>\n    </Timeline.Item>\n  </Timeline>\n\n            </div>\n        );\n    }\n}\n\nexport default Tracing;\n"]},"metadata":{},"sourceType":"module"}