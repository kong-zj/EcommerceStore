{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useEffect, useRef } from 'react';\nimport isDeepEqualReact from '../../isDeepEqualReact';\nimport useDebounceFn from '../useDebounceFn';\nexport var isDeepEqual = function isDeepEqual(a, b, ignoreKeys) {\n  return isDeepEqualReact(a, b, ignoreKeys);\n};\n\nfunction useDeepCompareMemoize(value, ignoreKeys) {\n  var ref = useRef(); // it can be done by using useMemo as well\n  // but useRef is rather cleaner and easier\n\n  if (!isDeepEqual(value, ref.current, ignoreKeys)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}\n\nfunction useDeepCompareEffect(effect, dependencies, ignoreKeys) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(effect, useDeepCompareMemoize(dependencies || [], ignoreKeys));\n}\n\nfunction useDeepCompareEffectDebounce(effect, dependencies, ignoreKeys, waitTime) {\n  var effectDn = useDebounceFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            effect();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), waitTime || 16);\n  useEffect(function () {\n    effectDn.run(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, useDeepCompareMemoize(dependencies || [], ignoreKeys));\n}\n\nexport { useDeepCompareEffectDebounce };\nexport default useDeepCompareEffect;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/@ant-design/pro-card/node_modules/@ant-design/pro-utils/es/hooks/useDeepCompareEffect/index.js"],"names":["_regeneratorRuntime","_asyncToGenerator","useEffect","useRef","isDeepEqualReact","useDebounceFn","isDeepEqual","a","b","ignoreKeys","useDeepCompareMemoize","value","ref","current","useDeepCompareEffect","effect","dependencies","useDeepCompareEffectDebounce","waitTime","effectDn","mark","_callee","wrap","_callee$","_context","prev","next","stop","run"],"mappings":"AAAA,OAAOA,mBAAP,MAAgC,4BAAhC;AACA,OAAOC,iBAAP,MAA8B,6CAA9B;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAO,IAAIC,WAAW,GAAG,SAASA,WAAT,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2BC,UAA3B,EAAuC;AAC9D,SAAOL,gBAAgB,CAACG,CAAD,EAAIC,CAAJ,EAAOC,UAAP,CAAvB;AACD,CAFM;;AAIP,SAASC,qBAAT,CAA+BC,KAA/B,EAAsCF,UAAtC,EAAkD;AAChD,MAAIG,GAAG,GAAGT,MAAM,EAAhB,CADgD,CAC5B;AACpB;;AAEA,MAAI,CAACG,WAAW,CAACK,KAAD,EAAQC,GAAG,CAACC,OAAZ,EAAqBJ,UAArB,CAAhB,EAAkD;AAChDG,IAAAA,GAAG,CAACC,OAAJ,GAAcF,KAAd;AACD;;AAED,SAAOC,GAAG,CAACC,OAAX;AACD;;AAED,SAASC,oBAAT,CAA8BC,MAA9B,EAAsCC,YAAtC,EAAoDP,UAApD,EAAgE;AAC9D;AACAP,EAAAA,SAAS,CAACa,MAAD,EAASL,qBAAqB,CAACM,YAAY,IAAI,EAAjB,EAAqBP,UAArB,CAA9B,CAAT;AACD;;AAED,SAASQ,4BAAT,CAAsCF,MAAtC,EAA8CC,YAA9C,EAA4DP,UAA5D,EAAwES,QAAxE,EAAkF;AAChF,MAAIC,QAAQ,GAAGd,aAAa,EAAE,aAAaJ,iBAAiB,EAAE,aAAaD,mBAAmB,CAACoB,IAApB,CAAyB,SAASC,OAAT,GAAmB;AACrH,WAAOrB,mBAAmB,CAACsB,IAApB,CAAyB,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC1D,aAAO,CAAP,EAAU;AACR,gBAAQA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACE,IAAjC;AACE,eAAK,CAAL;AACEX,YAAAA,MAAM;;AAER,eAAK,CAAL;AACA,eAAK,KAAL;AACE,mBAAOS,QAAQ,CAACG,IAAT,EAAP;AANJ;AAQD;AACF,KAXM,EAWJN,OAXI,CAAP;AAYD,GAb0E,CAAf,CAAhC,EAavBH,QAAQ,IAAI,EAbW,CAA5B;AAcAhB,EAAAA,SAAS,CAAC,YAAY;AACpBiB,IAAAA,QAAQ,CAACS,GAAT,GADoB,CACJ;AACjB,GAFQ,EAENlB,qBAAqB,CAACM,YAAY,IAAI,EAAjB,EAAqBP,UAArB,CAFf,CAAT;AAGD;;AAED,SAASQ,4BAAT;AACA,eAAeH,oBAAf","sourcesContent":["import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useEffect, useRef } from 'react';\nimport isDeepEqualReact from '../../isDeepEqualReact';\nimport useDebounceFn from '../useDebounceFn';\nexport var isDeepEqual = function isDeepEqual(a, b, ignoreKeys) {\n  return isDeepEqualReact(a, b, ignoreKeys);\n};\n\nfunction useDeepCompareMemoize(value, ignoreKeys) {\n  var ref = useRef(); // it can be done by using useMemo as well\n  // but useRef is rather cleaner and easier\n\n  if (!isDeepEqual(value, ref.current, ignoreKeys)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}\n\nfunction useDeepCompareEffect(effect, dependencies, ignoreKeys) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(effect, useDeepCompareMemoize(dependencies || [], ignoreKeys));\n}\n\nfunction useDeepCompareEffectDebounce(effect, dependencies, ignoreKeys, waitTime) {\n  var effectDn = useDebounceFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            effect();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), waitTime || 16);\n  useEffect(function () {\n    effectDn.run(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, useDeepCompareMemoize(dependencies || [], ignoreKeys));\n}\n\nexport { useDeepCompareEffectDebounce };\nexport default useDeepCompareEffect;"]},"metadata":{},"sourceType":"module"}