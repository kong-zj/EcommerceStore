{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nexports.EthereumDefinition = {\n  initNetworkType(web3) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // truffle has started expecting gas used/limit to be\n      // hex strings to support bignumbers for other ledgers\n      overrides.getBlock(web3);\n      overrides.getTransaction(web3);\n      overrides.getTransactionReceipt(web3);\n    });\n  }\n\n};\nconst overrides = {\n  // The ts-ignores are ignoring the checks that are\n  // saying that web3.eth.getBlock is a function and doesn't\n  // have a `method` property, which it does\n  \"getBlock\": web3 => {\n    // @ts-ignore\n    const _oldFormatter = web3.eth.getBlock.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getBlock.method.outputFormatter = block => {\n      // @ts-ignore\n      let result = _oldFormatter.call(web3.eth.getBlock.method, block); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gasLimit = \"0x\" + new bn_js_1.default(result.gasLimit).toString(16);\n      result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\n      return result;\n    };\n  },\n  \"getTransaction\": web3 => {\n    const _oldTransactionFormatter = // @ts-ignore\n    web3.eth.getTransaction.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getTransaction.method.outputFormatter = tx => {\n      let result = _oldTransactionFormatter.call( // @ts-ignore\n      web3.eth.getTransaction.method, tx); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gas = \"0x\" + new bn_js_1.default(result.gas).toString(16);\n      return result;\n    };\n  },\n  \"getTransactionReceipt\": web3 => {\n    const _oldTransactionReceiptFormatter = // @ts-ignore\n    web3.eth.getTransactionReceipt.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getTransactionReceipt.method.outputFormatter = receipt => {\n      let result = _oldTransactionReceiptFormatter.call( // @ts-ignore\n      web3.eth.getTransactionReceipt.method, receipt); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\n      return result;\n    };\n  }\n};","map":{"version":3,"sources":["../lib/ethereum-overloads.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAGa,OAAA,CAAA,kBAAA,GAAqB;AAC1B,EAAA,eAAe,CAAE,IAAF,EAAgB;;AACnC;AACA;AACA,MAAA,SAAS,CAAC,QAAV,CAAmB,IAAnB;AACA,MAAA,SAAS,CAAC,cAAV,CAAyB,IAAzB;AACA,MAAA,SAAS,CAAC,qBAAV,CAAgC,IAAhC;AACD,K;AAAA;;AAP+B,CAArB;AAUb,MAAM,SAAS,GAAG;AAClB;AACA;AACA;AACE,cAAa,IAAD,IAAmB;AAC/B;AACA,UAAM,aAAa,GAAG,IAAI,CAAC,GAAL,CAAS,QAAT,CAAkB,MAAlB,CAAyB,eAA/C,CAF+B,CAI/B;;AACA,IAAA,IAAI,CAAC,GAAL,CAAS,QAAT,CAAkB,MAAlB,CAAyB,eAAzB,GAA2C,KAAK,IAAG;AACjD;AACA,UAAI,MAAM,GAAG,aAAa,CAAC,IAAd,CAAmB,IAAI,CAAC,GAAL,CAAS,QAAT,CAAkB,MAArC,EAA6C,KAA7C,CAAb,CAFiD,CAIjD;AACA;;;AACA,MAAA,MAAM,CAAC,QAAP,GAAkB,OAAO,IAAI,OAAA,CAAA,OAAJ,CAAO,MAAM,CAAC,QAAd,EAAwB,QAAxB,CAAiC,EAAjC,CAAzB;AACA,MAAA,MAAM,CAAC,OAAP,GAAiB,OAAO,IAAI,OAAA,CAAA,OAAJ,CAAO,MAAM,CAAC,OAAd,EAAuB,QAAvB,CAAgC,EAAhC,CAAxB;AAEA,aAAO,MAAP;AACD,KAVD;AAWC,GApBe;AAsBhB,oBAAmB,IAAD,IAAmB;AACrC,UAAM,wBAAwB,GAC5B;AACA,IAAA,IAAI,CAAC,GAAL,CAAS,cAAT,CAAwB,MAAxB,CAA+B,eAFjC,CADqC,CAKrC;;AACA,IAAA,IAAI,CAAC,GAAL,CAAS,cAAT,CAAwB,MAAxB,CAA+B,eAA/B,GAAiD,EAAE,IAAG;AACpD,UAAI,MAAM,GAAG,wBAAwB,CAAC,IAAzB,EACX;AACA,MAAA,IAAI,CAAC,GAAL,CAAS,cAAT,CAAwB,MAFb,EAGX,EAHW,CAAb,CADoD,CAOpD;AACA;;;AACA,MAAA,MAAM,CAAC,GAAP,GAAa,OAAO,IAAI,OAAA,CAAA,OAAJ,CAAO,MAAM,CAAC,GAAd,EAAmB,QAAnB,CAA4B,EAA5B,CAApB;AAEA,aAAO,MAAP;AACD,KAZD;AAcC,GA1Ce;AA4ChB,2BAA0B,IAAD,IAAmB;AAC1C,UAAM,+BAA+B,GACrC;AACA,IAAA,IAAI,CAAC,GAAL,CAAS,qBAAT,CAA+B,MAA/B,CAAsC,eAFtC,CAD0C,CAK5C;;AACA,IAAA,IAAI,CAAC,GAAL,CAAS,qBAAT,CAA+B,MAA/B,CAAsC,eAAtC,GAAwD,OAAO,IAAG;AAChE,UAAI,MAAM,GAAG,+BAA+B,CAAC,IAAhC,EACX;AACA,MAAA,IAAI,CAAC,GAAL,CAAS,qBAAT,CAA+B,MAFpB,EAGX,OAHW,CAAb,CADgE,CAOhE;AACA;;;AACA,MAAA,MAAM,CAAC,OAAP,GAAiB,OAAO,IAAI,OAAA,CAAA,OAAJ,CAAO,MAAM,CAAC,OAAd,EAAuB,QAAvB,CAAgC,EAAhC,CAAxB;AAEA,aAAO,MAAP;AACD,KAZD;AAaC;AA/De,CAAlB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nexports.EthereumDefinition = {\n    initNetworkType(web3) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // truffle has started expecting gas used/limit to be\n            // hex strings to support bignumbers for other ledgers\n            overrides.getBlock(web3);\n            overrides.getTransaction(web3);\n            overrides.getTransactionReceipt(web3);\n        });\n    }\n};\nconst overrides = {\n    // The ts-ignores are ignoring the checks that are\n    // saying that web3.eth.getBlock is a function and doesn't\n    // have a `method` property, which it does\n    \"getBlock\": (web3) => {\n        // @ts-ignore\n        const _oldFormatter = web3.eth.getBlock.method.outputFormatter;\n        // @ts-ignore\n        web3.eth.getBlock.method.outputFormatter = block => {\n            // @ts-ignore\n            let result = _oldFormatter.call(web3.eth.getBlock.method, block);\n            // Perhaps there is a better method of doing this,\n            // but the raw hexstrings work for the time being\n            result.gasLimit = \"0x\" + new bn_js_1.default(result.gasLimit).toString(16);\n            result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\n            return result;\n        };\n    },\n    \"getTransaction\": (web3) => {\n        const _oldTransactionFormatter = \n        // @ts-ignore\n        web3.eth.getTransaction.method.outputFormatter;\n        // @ts-ignore\n        web3.eth.getTransaction.method.outputFormatter = tx => {\n            let result = _oldTransactionFormatter.call(\n            // @ts-ignore\n            web3.eth.getTransaction.method, tx);\n            // Perhaps there is a better method of doing this,\n            // but the raw hexstrings work for the time being\n            result.gas = \"0x\" + new bn_js_1.default(result.gas).toString(16);\n            return result;\n        };\n    },\n    \"getTransactionReceipt\": (web3) => {\n        const _oldTransactionReceiptFormatter = \n        // @ts-ignore\n        web3.eth.getTransactionReceipt.method.outputFormatter;\n        // @ts-ignore\n        web3.eth.getTransactionReceipt.method.outputFormatter = receipt => {\n            let result = _oldTransactionReceiptFormatter.call(\n            // @ts-ignore\n            web3.eth.getTransactionReceipt.method, receipt);\n            // Perhaps there is a better method of doing this,\n            // but the raw hexstrings work for the time being\n            result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\n            return result;\n        };\n    }\n};\n//# sourceMappingURL=ethereum-overloads.js.map"]},"metadata":{},"sourceType":"script"}