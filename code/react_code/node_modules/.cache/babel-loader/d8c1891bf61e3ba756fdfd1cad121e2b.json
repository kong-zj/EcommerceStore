{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bytes_1 = require(\"./bytes\");\n\nvar UnicodeNormalizationForm;\n\n(function (UnicodeNormalizationForm) {\n  UnicodeNormalizationForm[\"current\"] = \"\";\n  UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n  UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n  UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n  UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));\n\n; // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n\nfunction toUtf8Bytes(str, form) {\n  if (form === void 0) {\n    form = UnicodeNormalizationForm.current;\n  }\n\n  if (form != UnicodeNormalizationForm.current) {\n    str = str.normalize(form);\n  }\n\n  var result = [];\n  var offset = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n\n    if (c < 128) {\n      result[offset++] = c;\n    } else if (c < 2048) {\n      result[offset++] = c >> 6 | 192;\n      result[offset++] = c & 63 | 128;\n    } else if ((c & 0xFC00) == 0xD800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xFC00) == 0xDC00) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);\n      result[offset++] = c >> 18 | 240;\n      result[offset++] = c >> 12 & 63 | 128;\n      result[offset++] = c >> 6 & 63 | 128;\n      result[offset++] = c & 63 | 128;\n    } else {\n      result[offset++] = c >> 12 | 224;\n      result[offset++] = c >> 6 & 63 | 128;\n      result[offset++] = c & 63 | 128;\n    }\n  }\n\n  return bytes_1.arrayify(result);\n}\n\nexports.toUtf8Bytes = toUtf8Bytes;\n; // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\n\nfunction toUtf8String(bytes) {\n  bytes = bytes_1.arrayify(bytes);\n  var result = '';\n  var i = 0; // Invalid bytes are ignored\n\n  while (i < bytes.length) {\n    var c = bytes[i++];\n\n    if (c >> 7 == 0) {\n      // 0xxx xxxx\n      result += String.fromCharCode(c);\n      continue;\n    } // Invalid starting byte\n\n\n    if (c >> 6 == 0x02) {\n      continue;\n    } // Multibyte; how many bytes left for thus character?\n\n\n    var extraLength = null;\n\n    if (c >> 5 == 0x06) {\n      extraLength = 1;\n    } else if (c >> 4 == 0x0e) {\n      extraLength = 2;\n    } else if (c >> 3 == 0x1e) {\n      extraLength = 3;\n    } else if (c >> 2 == 0x3e) {\n      extraLength = 4;\n    } else if (c >> 1 == 0x7e) {\n      extraLength = 5;\n    } else {\n      continue;\n    } // Do we have enough bytes in our data?\n\n\n    if (i + extraLength > bytes.length) {\n      // If there is an invalid unprocessed byte, try to continue\n      for (; i < bytes.length; i++) {\n        if (bytes[i] >> 6 != 0x02) {\n          break;\n        }\n      }\n\n      if (i != bytes.length) continue; // All leftover bytes are valid.\n\n      return result;\n    } // Remove the UTF-8 prefix from the char (res)\n\n\n    var res = c & (1 << 8 - extraLength - 1) - 1;\n    var count;\n\n    for (count = 0; count < extraLength; count++) {\n      var nextChar = bytes[i++]; // Is the char valid multibyte part?\n\n      if (nextChar >> 6 != 0x02) {\n        break;\n      }\n\n      ;\n      res = res << 6 | nextChar & 0x3f;\n    }\n\n    if (count != extraLength) {\n      i--;\n      continue;\n    }\n\n    if (res <= 0xffff) {\n      result += String.fromCharCode(res);\n      continue;\n    }\n\n    res -= 0x10000;\n    result += String.fromCharCode((res >> 10 & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);\n  }\n\n  return result;\n}\n\nexports.toUtf8String = toUtf8String;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/web3-eth-abi/node_modules/ethers/utils/utf8.js"],"names":["Object","defineProperty","exports","value","bytes_1","require","UnicodeNormalizationForm","toUtf8Bytes","str","form","current","normalize","result","offset","i","length","c","charCodeAt","arrayify","toUtf8String","bytes","String","fromCharCode","extraLength","res","count","nextChar"],"mappings":"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","sourcesContent":["'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bytes_1 = require(\"./bytes\");\nvar UnicodeNormalizationForm;\n(function (UnicodeNormalizationForm) {\n    UnicodeNormalizationForm[\"current\"] = \"\";\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));\n;\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nfunction toUtf8Bytes(str, form) {\n    if (form === void 0) { form = UnicodeNormalizationForm.current; }\n    if (form != UnicodeNormalizationForm.current) {\n        str = str.normalize(form);\n    }\n    var result = [];\n    var offset = 0;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        if (c < 128) {\n            result[offset++] = c;\n        }\n        else if (c < 2048) {\n            result[offset++] = (c >> 6) | 192;\n            result[offset++] = (c & 63) | 128;\n        }\n        else if (((c & 0xFC00) == 0xD800) && (i + 1) < str.length && ((str.charCodeAt(i + 1) & 0xFC00) == 0xDC00)) {\n            // Surrogate Pair\n            c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);\n            result[offset++] = (c >> 18) | 240;\n            result[offset++] = ((c >> 12) & 63) | 128;\n            result[offset++] = ((c >> 6) & 63) | 128;\n            result[offset++] = (c & 63) | 128;\n        }\n        else {\n            result[offset++] = (c >> 12) | 224;\n            result[offset++] = ((c >> 6) & 63) | 128;\n            result[offset++] = (c & 63) | 128;\n        }\n    }\n    return bytes_1.arrayify(result);\n}\nexports.toUtf8Bytes = toUtf8Bytes;\n;\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction toUtf8String(bytes) {\n    bytes = bytes_1.arrayify(bytes);\n    var result = '';\n    var i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        var c = bytes[i++];\n        if (c >> 7 == 0) {\n            // 0xxx xxxx\n            result += String.fromCharCode(c);\n            continue;\n        }\n        // Invalid starting byte\n        if (c >> 6 == 0x02) {\n            continue;\n        }\n        // Multibyte; how many bytes left for thus character?\n        var extraLength = null;\n        if (c >> 5 == 0x06) {\n            extraLength = 1;\n        }\n        else if (c >> 4 == 0x0e) {\n            extraLength = 2;\n        }\n        else if (c >> 3 == 0x1e) {\n            extraLength = 3;\n        }\n        else if (c >> 2 == 0x3e) {\n            extraLength = 4;\n        }\n        else if (c >> 1 == 0x7e) {\n            extraLength = 5;\n        }\n        else {\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i + extraLength > bytes.length) {\n            // If there is an invalid unprocessed byte, try to continue\n            for (; i < bytes.length; i++) {\n                if (bytes[i] >> 6 != 0x02) {\n                    break;\n                }\n            }\n            if (i != bytes.length)\n                continue;\n            // All leftover bytes are valid.\n            return result;\n        }\n        // Remove the UTF-8 prefix from the char (res)\n        var res = c & ((1 << (8 - extraLength - 1)) - 1);\n        var count;\n        for (count = 0; count < extraLength; count++) {\n            var nextChar = bytes[i++];\n            // Is the char valid multibyte part?\n            if (nextChar >> 6 != 0x02) {\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n        }\n        if (count != extraLength) {\n            i--;\n            continue;\n        }\n        if (res <= 0xffff) {\n            result += String.fromCharCode(res);\n            continue;\n        }\n        res -= 0x10000;\n        result += String.fromCharCode(((res >> 10) & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);\n    }\n    return result;\n}\nexports.toUtf8String = toUtf8String;\n"]},"metadata":{},"sourceType":"script"}