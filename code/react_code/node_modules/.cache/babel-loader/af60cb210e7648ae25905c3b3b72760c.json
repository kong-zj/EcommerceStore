{"ast":null,"code":"import \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nvar _jsxFileName = \"/home/kzj/project/finalize/final/code/react_code/src/components/Auction/HighestBidderInfo/index.jsx\";\nimport React, { Component } from \"react\";\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\"; //接入web3\n\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport openNotification from \"../../Notification\"; //价格格式化\n\nimport handlePrice from '../../../utils/handlePrice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HighestBidderInfo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      highestBidderString: \"\"\n    };\n\n    this.componentDidMount = async () => {\n      console.log(\"生成HighestBidderInfo模块\");\n\n      if (await this.getBlockChainInfo()) {\n        console.log(\"获得合约信息成功\");\n        this.getInfoFromBlockchain();\n      } else {\n        console.log(\"获得合约信息失败\");\n      }\n    };\n\n    this.getBlockChainInfo = async () => {\n      try {\n        const web3 = await getWeb3();\n        const EcommerceStore = await getEcommerceStore(web3);\n        this.setState({\n          web3: web3,\n          truffleContract: EcommerceStore\n        });\n        console.log(\"HighestBidderInfo 的 web3 : \");\n        console.dir(web3);\n        console.log(\"HighestBidderInfo 的 EcommerceStore : \");\n        console.dir(this.state.truffleContract);\n        return true;\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`[ERROR]接入智能合约失败.`);\n        console.error(error);\n        return false;\n      }\n    };\n\n    this.getInfoFromBlockchain = () => {\n      let blockChainID = this.props.dataArray[0].ID;\n      console.log(\"竞拍商品ID : \" + blockChainID);\n      let that = this;\n      this.state.truffleContract.deployed().then(async i => {\n        console.log(\"进入 this.state.truffleContract.deployed() 的回调函数\"); //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n        //即时获取当前地址，用该地址发交易\n\n        let currentAccount = await that.state.web3.eth.getAccounts();\n        console.log(\"交易发起地址为: \" + currentAccount);\n\n        try {\n          //调用合约的 highestBidderInfo 方法\n          await i.highestBidderInfo(parseInt(blockChainID)).then(info => {\n            console.log(\"成功调用合约的highestBidderInfo方法，返回 : \");\n            console.dir(info);\n            let highestBidderString = \"\";\n\n            if (info[2].toLocaleString() == '0') {\n              //没有人揭示报价\n              highestBidderString = \"拍卖结束，没有人揭示报价\";\n            } else {\n              //有人出价\n              highestBidderString = \"拍卖结束，最高出价竞拍人 (\" + info[0] + \") 以次高价格 (\" + handlePrice(info[2]) + \") 赢得竞拍\";\n              highestBidderString += \"---------The money is in the escrow. Two of the three participants (Buyer, Seller and Arbiter) have to \" + \"either release the funds to seller or refund the money to the buyer\";\n            }\n\n            this.setState({\n              highestBidderString: highestBidderString\n            });\n\n            _message.success(\"查询最高竞价人信息成功\", 2);\n          });\n        } catch (err) {\n          _message.error(\"查询最高竞价人信息失败\", 2);\n\n          console.log(\"调用合约的highestBidderInfo方法失败 \" + err);\n          return;\n        }\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u6700\\u9AD8\\u7ADE\\u4EF7\\u4EBA\\u4FE1\\u606F\\u6A21\\u5757\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.highestBidderString\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default HighestBidderInfo;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/src/components/Auction/HighestBidderInfo/index.jsx"],"names":["React","Component","UserOutlined","LaptopOutlined","FileSearchOutlined","HomeOutlined","EyeTwoTone","EyeInvisibleOutlined","RocketOutlined","cookie","getWeb3","getEcommerceStore","openNotification","handlePrice","HighestBidderInfo","state","highestBidderString","componentDidMount","console","log","getBlockChainInfo","getInfoFromBlockchain","web3","EcommerceStore","setState","truffleContract","dir","error","alert","blockChainID","props","dataArray","ID","that","deployed","then","i","currentAccount","eth","getAccounts","highestBidderInfo","parseInt","info","toLocaleString","success","err","render"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,kBAAvC,EAA2DC,YAA3D,EAAyEC,UAAzE,EAAqFC,oBAArF,EAA2GC,cAA3G,QAAiI,mBAAjI;AACA,OAAOC,MAAP,MAAmB,eAAnB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B,C,CACA;;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;;AAIA,MAAMC,iBAAN,SAAgCb,SAAhC,CAA0C;AAAA;AAAA;AAAA,SAEtCc,KAFsC,GAE9B;AACJC,MAAAA,mBAAmB,EAAG;AADlB,KAF8B;;AAAA,SAMtCC,iBANsC,GAMlB,YAAY;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;AACA,UAAG,MAAM,KAAKC,iBAAL,EAAT,EAAkC;AAC9BF,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,aAAKE,qBAAL;AACH,OAHD,MAGK;AACDH,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH;AACJ,KAdqC;;AAAA,SAgBvCC,iBAhBuC,GAgBnB,YAAW;AAC1B,UAAG;AACC,cAAME,IAAI,GAAG,MAAMZ,OAAO,EAA1B;AACA,cAAMa,cAAc,GAAG,MAAMZ,iBAAiB,CAACW,IAAD,CAA9C;AACA,aAAKE,QAAL,CAAc;AACVF,UAAAA,IAAI,EAAEA,IADI;AAEVG,UAAAA,eAAe,EAACF;AAFN,SAAd;AAIAL,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAD,QAAAA,OAAO,CAACQ,GAAR,CAAYJ,IAAZ;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACAD,QAAAA,OAAO,CAACQ,GAAR,CAAY,KAAKX,KAAL,CAAWU,eAAvB;AACA,eAAO,IAAP;AACH,OAZD,CAYC,OAAOE,KAAP,EAAc;AACX;AACAC,QAAAA,KAAK,CACF,kBADE,CAAL;AAGAV,QAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACA,eAAO,KAAP;AACD;AAEN,KAtCqC;;AAAA,SAwCtCN,qBAxCsC,GAwCd,MAAM;AAC1B,UAAIQ,YAAY,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqB,CAArB,EAAwBC,EAA3C;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAcU,YAA1B;AAEA,UAAII,IAAI,GAAG,IAAX;AACA,WAAKlB,KAAL,CAAWU,eAAX,CAA2BS,QAA3B,GAAsCC,IAAtC,CAA2C,MAAOC,CAAP,IAAa;AACpDlB,QAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ,EADoD,CAEpD;AACA;;AACA,YAAIkB,cAAc,GAAG,MAAMJ,IAAI,CAAClB,KAAL,CAAWO,IAAX,CAAgBgB,GAAhB,CAAoBC,WAApB,EAA3B;AACArB,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAYkB,cAAxB;;AAEA,YAAG;AACC;AACA,gBAAMD,CAAC,CAACI,iBAAF,CAAoBC,QAAQ,CAACZ,YAAD,CAA5B,EAA4CM,IAA5C,CAAiDO,IAAI,IAAI;AAC3DxB,YAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACAD,YAAAA,OAAO,CAACQ,GAAR,CAAYgB,IAAZ;AACA,gBAAI1B,mBAAmB,GAAG,EAA1B;;AACA,gBAAI0B,IAAI,CAAC,CAAD,CAAJ,CAAQC,cAAR,MAA4B,GAAhC,EAAqC;AACjC;AACA3B,cAAAA,mBAAmB,GAAG,cAAtB;AACH,aAHD,MAGO;AACH;AACAA,cAAAA,mBAAmB,GAAG,mBAAmB0B,IAAI,CAAC,CAAD,CAAvB,GAA6B,WAA7B,GAA2C7B,WAAW,CAAC6B,IAAI,CAAC,CAAD,CAAL,CAAtD,GAAkE,QAAxF;AACA1B,cAAAA,mBAAmB,IAAK,4GACxB,qEADA;AAEH;;AAED,iBAAKQ,QAAL,CAAc;AACVR,cAAAA,mBAAmB,EAAGA;AADZ,aAAd;;AAIA,qBAAQ4B,OAAR,CAAgB,aAAhB,EAA8B,CAA9B;AACH,WAnBK,CAAN;AAoBH,SAtBD,CAsBC,OAAMC,GAAN,EAAW;AACR,mBAAQlB,KAAR,CAAc,aAAd,EAA4B,CAA5B;;AACAT,UAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgC0B,GAA5C;AACA;AACH;AACJ,OAlCD;AAmCH,KAhFqC;AAAA;;AAqFtCC,EAAAA,MAAM,GAAI;AACN,wBAGI;AAAA,8BAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kBAAI,KAAK/B,KAAL,CAAWC;AAAf;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAaH;;AAnGqC;;AAsG1C,eAAeF,iBAAf","sourcesContent":["import React, {Component} from \"react\";\nimport { Menu, Layout, message, Drawer, Space, Button, Divider, Form, InputNumber, Input, Select } from 'antd';\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\";\n//接入web3\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport openNotification from \"../../Notification\";\n//价格格式化\nimport handlePrice from '../../../utils/handlePrice';\n\n\n\nclass HighestBidderInfo extends Component {\n\n    state = {\n        highestBidderString : \"\"\n    }\n\n    componentDidMount = async () => {\n        console.log(\"生成HighestBidderInfo模块\");\n        if(await this.getBlockChainInfo()){\n            console.log(\"获得合约信息成功\");\n            this.getInfoFromBlockchain();\n        }else{\n            console.log(\"获得合约信息失败\");\n        }  \n    }\n\n   getBlockChainInfo = async() => {\n        try{\n            const web3 = await getWeb3();\n            const EcommerceStore = await getEcommerceStore(web3);\n            this.setState({\n                web3: web3,\n                truffleContract:EcommerceStore\n            });\n            console.log(\"HighestBidderInfo 的 web3 : \");\n            console.dir(web3);\n            console.log(\"HighestBidderInfo 的 EcommerceStore : \");\n            console.dir(this.state.truffleContract);\n            return true;\n        }catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n              `[ERROR]接入智能合约失败.`,\n            );\n            console.error(error);\n            return false;\n          }\n        \n    }\n\n    getInfoFromBlockchain = () => {\n        let blockChainID = this.props.dataArray[0].ID;\n        console.log(\"竞拍商品ID : \" + blockChainID);\n\n        let that = this;\n        this.state.truffleContract.deployed().then(async (i) => {\n            console.log(\"进入 this.state.truffleContract.deployed() 的回调函数\");\n            //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n            //即时获取当前地址，用该地址发交易\n            let currentAccount = await that.state.web3.eth.getAccounts();\n            console.log(\"交易发起地址为: \"+currentAccount);\n\n            try{\n                //调用合约的 highestBidderInfo 方法\n                await i.highestBidderInfo(parseInt(blockChainID)).then(info => {\n                    console.log(\"成功调用合约的highestBidderInfo方法，返回 : \");\n                    console.dir(info);\n                    let highestBidderString = \"\";\n                    if (info[2].toLocaleString() == '0') {\n                        //没有人揭示报价\n                        highestBidderString = \"拍卖结束，没有人揭示报价\";\n                    } else {\n                        //有人出价\n                        highestBidderString = \"拍卖结束，最高出价竞拍人 (\" + info[0] + \") 以次高价格 (\" + handlePrice(info[2]) + \") 赢得竞拍\";\n                        highestBidderString +=  \"---------The money is in the escrow. Two of the three participants (Buyer, Seller and Arbiter) have to \" +\n                        \"either release the funds to seller or refund the money to the buyer\";\n                    }\n\n                    this.setState({\n                        highestBidderString : highestBidderString\n                    })\n\n                    message.success(\"查询最高竞价人信息成功\",2);\n                });\n            }catch(err) {\n                message.error(\"查询最高竞价人信息失败\",2);\n                console.log(\"调用合约的highestBidderInfo方法失败 \" + err);\n                return;\n            }  \n        });\n    }\n   \n\n \n    \n    render () {\n        return (\n\n\n            <div>    \n                        \n                <p>最高竞价人信息模块</p>\n                <p>{this.state.highestBidderString}</p>\n         \n            </div>\n\n            \n\n        );\n    }\n}\n\nexport default HighestBidderInfo;\n"]},"metadata":{},"sourceType":"module"}