{"ast":null,"code":"/*\r\n *      bignumber.js v7.2.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\nvar isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n    mathceil = Math.ceil,\n    mathfloor = Math.floor,\n    bignumberError = '[BigNumber Error] ',\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n    BASE = 1e14,\n    LOG_BASE = 14,\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,\n    // 2^53 - 1\n// MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\nPOWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n    SQRT_BASE = 1e7,\n    // EDITABLE\n// The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n// the arguments to toExponential, toFixed, toFormat, and toPrecision.\nMAX = 1E9; // 0 to MAX_INT32\n\n/*\r\n * Create and return a BigNumber constructor.\r\n */\n\nfunction clone(configObject) {\n  var div,\n      convertBase,\n      parseNumeric,\n      P = BigNumber.prototype = {\n    constructor: BigNumber,\n    toString: null,\n    valueOf: null\n  },\n      ONE = new BigNumber(1),\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n  // The default values below must be integers within the inclusive ranges stated.\n  // The values can also be changed at run-time using BigNumber.set.\n  // The maximum number of decimal places for operations involving division.\n  DECIMAL_PLACES = 20,\n      // 0 to MAX\n  // The rounding mode used when rounding to the above decimal places, and when using\n  // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n  // UP         0 Away from zero.\n  // DOWN       1 Towards zero.\n  // CEIL       2 Towards +Infinity.\n  // FLOOR      3 Towards -Infinity.\n  // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n  // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n  // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n  // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n  // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n  ROUNDING_MODE = 4,\n      // 0 to 8\n  // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n  // The exponent value at and beneath which toString returns exponential notation.\n  // Number type: -7\n  TO_EXP_NEG = -7,\n      // 0 to -MAX\n  // The exponent value at and above which toString returns exponential notation.\n  // Number type: 21\n  TO_EXP_POS = 21,\n      // 0 to MAX\n  // RANGE : [MIN_EXP, MAX_EXP]\n  // The minimum exponent value, beneath which underflow to zero occurs.\n  // Number type: -324  (5e-324)\n  MIN_EXP = -1e7,\n      // -1 to -MAX\n  // The maximum exponent value, above which overflow to Infinity occurs.\n  // Number type:  308  (1.7976931348623157e+308)\n  // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n  MAX_EXP = 1e7,\n      // 1 to MAX\n  // Whether to use cryptographically-secure random number generation, if available.\n  CRYPTO = false,\n      // true or false\n  // The modulo mode used when calculating the modulus: a mod n.\n  // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n  // The remainder (r) is calculated as: r = a - n * q.\n  //\n  // UP        0 The remainder is positive if the dividend is negative, else is negative.\n  // DOWN      1 The remainder has the same sign as the dividend.\n  //             This modulo mode is commonly known as 'truncated division' and is\n  //             equivalent to (a % n) in JavaScript.\n  // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n  // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n  // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n  //             The remainder is always positive.\n  //\n  // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n  // modes are commonly used for the modulus operation.\n  // Although the other rounding modes can also be used, they may not give useful results.\n  MODULO_MODE = 1,\n      // 0 to 9\n  // The maximum number of significant digits of the result of the exponentiatedBy operation.\n  // If POW_PRECISION is 0, there will be unlimited significant digits.\n  POW_PRECISION = 0,\n      // 0 to MAX\n  // The format specification used by the BigNumber.prototype.toFormat method.\n  FORMAT = {\n    decimalSeparator: '.',\n    groupSeparator: ',',\n    groupSize: 3,\n    secondaryGroupSize: 0,\n    fractionGroupSeparator: '\\xA0',\n    // non-breaking space\n    fractionGroupSize: 0\n  },\n      // The alphabet used for base conversion.\n  // It must be at least 2 characters long, with no '.' or repeated character.\n  // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n  ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'; //------------------------------------------------------------------------------------------\n  // CONSTRUCTOR\n\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * n {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\r\n   */\n\n  function BigNumber(n, b) {\n    var alphabet,\n        c,\n        caseChanged,\n        e,\n        i,\n        isNum,\n        len,\n        str,\n        x = this; // Enable constructor usage without new.\n\n    if (!(x instanceof BigNumber)) {\n      // Don't throw on constructor call without new (#81).\n      // '[BigNumber Error] Constructor call without new: {n}'\n      //throw Error(bignumberError + ' Constructor call without new: ' + n);\n      return new BigNumber(n, b);\n    }\n\n    if (b == null) {\n      // Duplicate.\n      if (n instanceof BigNumber) {\n        x.s = n.s;\n        x.e = n.e;\n        x.c = (n = n.c) ? n.slice() : n;\n        return;\n      }\n\n      isNum = typeof n == 'number';\n\n      if (isNum && n * 0 == 0) {\n        // Use `1 / n` to handle minus zero also.\n        x.s = 1 / n < 0 ? (n = -n, -1) : 1; // Faster path for integers.\n\n        if (n === ~~n) {\n          for (e = 0, i = n; i >= 10; i /= 10, e++);\n\n          x.e = e;\n          x.c = [n];\n          return;\n        }\n\n        str = n + '';\n      } else {\n        if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n      } // Decimal point?\n\n\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?\n\n      if ((i = str.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0) e = i;\n        e += +str.slice(i + 1);\n        str = str.substring(0, i);\n      } else if (e < 0) {\n        // Integer.\n        e = str.length;\n      }\n    } else {\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n      intCheck(b, 2, ALPHABET.length, 'Base');\n      str = n + ''; // Allow exponential notation to be used with base 10 argument, while\n      // also rounding to DECIMAL_PLACES as with other bases.\n\n      if (b == 10) {\n        x = new BigNumber(n instanceof BigNumber ? n : str);\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n      }\n\n      isNum = typeof n == 'number';\n\n      if (isNum) {\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n        if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\n        x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n          throw Error(tooManyDigits + n);\n        } // Prevent later check for length on converted number.\n\n\n        isNum = false;\n      } else {\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n      }\n\n      alphabet = ALPHABET.slice(0, b);\n      e = i = 0; // Check that str is a valid base b number.\n      // Don't use RegExp so alphabet can contain special characters.\n\n      for (len = str.length; i < len; i++) {\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n          if (c == '.') {\n            // If '.' is not the first character and it has not be found before.\n            if (i > e) {\n              e = len;\n              continue;\n            }\n          } else if (!caseChanged) {\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {\n              caseChanged = true;\n              i = -1;\n              e = 0;\n              continue;\n            }\n          }\n\n          return parseNumeric(x, n + '', isNum, b);\n        }\n      }\n\n      str = convertBase(str, b, 10, x.s); // Decimal point?\n\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;\n    } // Determine leading zeros.\n\n\n    for (i = 0; str.charCodeAt(i) === 48; i++); // Determine trailing zeros.\n\n\n    for (len = str.length; str.charCodeAt(--len) === 48;);\n\n    str = str.slice(i, ++len);\n\n    if (str) {\n      len -= i; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n      if (isNum && BigNumber.DEBUG && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\n        throw Error(tooManyDigits + x.s * n);\n      }\n\n      e = e - i - 1; // Overflow?\n\n      if (e > MAX_EXP) {\n        // Infinity.\n        x.c = x.e = null; // Underflow?\n      } else if (e < MIN_EXP) {\n        // Zero.\n        x.c = [x.e = 0];\n      } else {\n        x.e = e;\n        x.c = []; // Transform base\n        // e is the base 10 exponent.\n        // i is where to slice str to get the first element of the coefficient array.\n\n        i = (e + 1) % LOG_BASE;\n        if (e < 0) i += LOG_BASE;\n\n        if (i < len) {\n          if (i) x.c.push(+str.slice(0, i));\n\n          for (len -= LOG_BASE; i < len;) {\n            x.c.push(+str.slice(i, i += LOG_BASE));\n          }\n\n          str = str.slice(i);\n          i = LOG_BASE - str.length;\n        } else {\n          i -= len;\n        }\n\n        for (; i--; str += '0');\n\n        x.c.push(+str);\n      }\n    } else {\n      // Zero.\n      x.c = [x.e = 0];\n    }\n  } // CONSTRUCTOR PROPERTIES\n\n\n  BigNumber.clone = clone;\n  BigNumber.ROUND_UP = 0;\n  BigNumber.ROUND_DOWN = 1;\n  BigNumber.ROUND_CEIL = 2;\n  BigNumber.ROUND_FLOOR = 3;\n  BigNumber.ROUND_HALF_UP = 4;\n  BigNumber.ROUND_HALF_DOWN = 5;\n  BigNumber.ROUND_HALF_EVEN = 6;\n  BigNumber.ROUND_HALF_CEIL = 7;\n  BigNumber.ROUND_HALF_FLOOR = 8;\n  BigNumber.EUCLID = 9;\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                     not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *      decimalSeparator       {string}\r\n   *      groupSeparator         {string}\r\n   *      groupSize              {number}\r\n   *      secondaryGroupSize     {number}\r\n   *      fractionGroupSeparator {string}\r\n   *      fractionGroupSize      {number}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\n\n  BigNumber.config = BigNumber.set = function (obj) {\n    var p, v;\n\n    if (obj != null) {\n      if (typeof obj == 'object') {\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n          v = obj[p];\n          intCheck(v, 0, MAX, p);\n          DECIMAL_PLACES = v;\n        } // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n          v = obj[p];\n          intCheck(v, 0, 8, p);\n          ROUNDING_MODE = v;\n        } // EXPONENTIAL_AT {number|number[]}\n        // Integer, -MAX to MAX inclusive or\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n\n\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n          v = obj[p];\n\n          if (isArray(v)) {\n            intCheck(v[0], -MAX, 0, p);\n            intCheck(v[1], 0, MAX, p);\n            TO_EXP_NEG = v[0];\n            TO_EXP_POS = v[1];\n          } else {\n            intCheck(v, -MAX, MAX, p);\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n          }\n        } // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n\n\n        if (obj.hasOwnProperty(p = 'RANGE')) {\n          v = obj[p];\n\n          if (isArray(v)) {\n            intCheck(v[0], -MAX, -1, p);\n            intCheck(v[1], 1, MAX, p);\n            MIN_EXP = v[0];\n            MAX_EXP = v[1];\n          } else {\n            intCheck(v, -MAX, MAX, p);\n\n            if (v) {\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n            } else {\n              throw Error(bignumberError + p + ' cannot be zero: ' + v);\n            }\n          }\n        } // CRYPTO {boolean} true or false.\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\n        // '[BigNumber Error] crypto unavailable'\n\n\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\n          v = obj[p];\n\n          if (v === !!v) {\n            if (v) {\n              if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                CRYPTO = v;\n              } else {\n                CRYPTO = !v;\n                throw Error(bignumberError + 'crypto unavailable');\n              }\n            } else {\n              CRYPTO = v;\n            }\n          } else {\n            throw Error(bignumberError + p + ' not true or false: ' + v);\n          }\n        } // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n          v = obj[p];\n          intCheck(v, 0, 9, p);\n          MODULO_MODE = v;\n        } // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n\n\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n          v = obj[p];\n          intCheck(v, 0, MAX, p);\n          POW_PRECISION = v;\n        } // FORMAT {object}\n        // '[BigNumber Error] FORMAT not an object: {v}'\n\n\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\n          v = obj[p];\n          if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);\n        } // ALPHABET {string}\n        // '[BigNumber Error] ALPHABET invalid: {v}'\n\n\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\n          v = obj[p]; // Disallow if only one character, or contains '.' or a repeated character.\n\n          if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\n            ALPHABET = v;\n          } else {\n            throw Error(bignumberError + p + ' invalid: ' + v);\n          }\n        }\n      } else {\n        // '[BigNumber Error] Object expected: {v}'\n        throw Error(bignumberError + 'Object expected: ' + obj);\n      }\n    }\n\n    return {\n      DECIMAL_PLACES: DECIMAL_PLACES,\n      ROUNDING_MODE: ROUNDING_MODE,\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n      RANGE: [MIN_EXP, MAX_EXP],\n      CRYPTO: CRYPTO,\n      MODULO_MODE: MODULO_MODE,\n      POW_PRECISION: POW_PRECISION,\n      FORMAT: FORMAT,\n      ALPHABET: ALPHABET\n    };\n  };\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * v {any}\r\n   */\n\n\n  BigNumber.isBigNumber = function (v) {\n    return v instanceof BigNumber || v && v._isBigNumber === true || false;\n  };\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\n\n\n  BigNumber.maximum = BigNumber.max = function () {\n    return maxOrMin(arguments, P.lt);\n  };\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\n\n\n  BigNumber.minimum = BigNumber.min = function () {\n    return maxOrMin(arguments, P.gt);\n  };\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\n\n\n  BigNumber.random = function () {\n    var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n    // Check if Math.random() produces more than 32 bits of randomness.\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n\n    var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n      return mathfloor(Math.random() * pow2_53);\n    } : function () {\n      return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n    };\n    return function (dp) {\n      var a,\n          b,\n          e,\n          k,\n          v,\n          i = 0,\n          c = [],\n          rand = new BigNumber(ONE);\n      if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);\n      k = mathceil(dp / LOG_BASE);\n\n      if (CRYPTO) {\n        // Browsers supporting crypto.getRandomValues.\n        if (crypto.getRandomValues) {\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n          for (; i < k;) {\n            // 53 bits:\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n            //                                     11111 11111111 11111111\n            // 0x20000 is 2^21.\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:\n            // 0 <= v < 9007199254740992\n            // Probability that v >= 9e15, is\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n\n            if (v >= 9e15) {\n              b = crypto.getRandomValues(new Uint32Array(2));\n              a[i] = b[0];\n              a[i + 1] = b[1];\n            } else {\n              // 0 <= v <= 8999999999999999\n              // 0 <= (v % 1e14) <= 99999999999999\n              c.push(v % 1e14);\n              i += 2;\n            }\n          }\n\n          i = k / 2; // Node.js supporting crypto.randomBytes.\n        } else if (crypto.randomBytes) {\n          // buffer\n          a = crypto.randomBytes(k *= 7);\n\n          for (; i < k;) {\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n            // 0 <= v < 9007199254740992\n            v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n            if (v >= 9e15) {\n              crypto.randomBytes(7).copy(a, i);\n            } else {\n              // 0 <= (v % 1e14) <= 99999999999999\n              c.push(v % 1e14);\n              i += 7;\n            }\n          }\n\n          i = k / 7;\n        } else {\n          CRYPTO = false;\n          throw Error(bignumberError + 'crypto unavailable');\n        }\n      } // Use Math.random.\n\n\n      if (!CRYPTO) {\n        for (; i < k;) {\n          v = random53bitInt();\n          if (v < 9e15) c[i++] = v % 1e14;\n        }\n      }\n\n      k = c[--i];\n      dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.\n\n      if (k && dp) {\n        v = POWS_TEN[LOG_BASE - dp];\n        c[i] = mathfloor(k / v) * v;\n      } // Remove trailing elements which are zero.\n\n\n      for (; c[i] === 0; c.pop(), i--); // Zero?\n\n\n      if (i < 0) {\n        c = [e = 0];\n      } else {\n        // Remove leading elements which are zero and adjust exponent accordingly.\n        for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE); // Count the digits of the first element of c to determine leading zeros, and...\n\n\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++); // adjust the exponent accordingly.\n\n\n        if (i < LOG_BASE) e -= LOG_BASE - i;\n      }\n\n      rand.e = e;\n      rand.c = c;\n      return rand;\n    };\n  }(); // PRIVATE FUNCTIONS\n  // Called by BigNumber and BigNumber.prototype.toString.\n\n\n  convertBase = function () {\n    var decimal = '0123456789';\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\n\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\n      var j,\n          arr = [0],\n          arrL,\n          i = 0,\n          len = str.length;\n\n      for (; i < len;) {\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n        arr[0] += alphabet.indexOf(str.charAt(i++));\n\n        for (j = 0; j < arr.length; j++) {\n          if (arr[j] > baseOut - 1) {\n            if (arr[j + 1] == null) arr[j + 1] = 0;\n            arr[j + 1] += arr[j] / baseOut | 0;\n            arr[j] %= baseOut;\n          }\n        }\n      }\n\n      return arr.reverse();\n    } // Convert a numeric string of baseIn to a numeric string of baseOut.\n    // If the caller is toString, we are converting from base 10 to baseOut.\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\n\n\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\n      var alphabet,\n          d,\n          e,\n          k,\n          r,\n          x,\n          xc,\n          y,\n          i = str.indexOf('.'),\n          dp = DECIMAL_PLACES,\n          rm = ROUNDING_MODE; // Non-integer.\n\n      if (i >= 0) {\n        k = POW_PRECISION; // Unlimited precision.\n\n        POW_PRECISION = 0;\n        str = str.replace('.', '');\n        y = new BigNumber(baseIn);\n        x = y.pow(str.length - i);\n        POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the\n        // result by its base raised to a power.\n\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);\n        y.e = y.c.length;\n      } // Convert the number as integer.\n\n\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET)); // xc now represents str as an integer and converted to baseOut. e is the exponent.\n\n      e = k = xc.length; // Remove trailing zeros.\n\n      for (; xc[--k] == 0; xc.pop()); // Zero?\n\n\n      if (!xc[0]) return alphabet.charAt(0); // Does str represent an integer? If so, no need for the division.\n\n      if (i < 0) {\n        --e;\n      } else {\n        x.c = xc;\n        x.e = e; // The sign is needed for correct rounding.\n\n        x.s = sign;\n        x = div(x, y, dp, rm, baseOut);\n        xc = x.c;\n        r = x.r;\n        e = x.e;\n      } // xc now represents str converted to baseOut.\n      // THe index of the rounding digit.\n\n\n      d = e + dp + 1; // The rounding digit: the digit to the right of the digit that may be rounded up.\n\n      i = xc[d]; // Look at the rounding digits and mode to determine whether to round up.\n\n      k = baseOut / 2;\n      r = r || d < 0 || xc[d + 1] != null;\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7)); // If the index of the rounding digit is not greater than zero, or xc represents\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\n      // such as 0.00001.\n\n      if (d < 1 || !xc[0]) {\n        // 1^-dp or 0\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n      } else {\n        // Truncate xc to the required number of decimal places.\n        xc.length = d; // Round up?\n\n        if (r) {\n          // Rounding up may mean the previous digit has to be rounded up and so on.\n          for (--baseOut; ++xc[--d] > baseOut;) {\n            xc[d] = 0;\n\n            if (!d) {\n              ++e;\n              xc = [1].concat(xc);\n            }\n          }\n        } // Determine trailing zeros.\n\n\n        for (k = xc.length; !xc[--k];); // E.g. [4, 11, 15] becomes 4bf.\n\n\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])); // Add leading zeros, decimal point and trailing zeros as required.\n\n\n        str = toFixedPoint(str, e, alphabet.charAt(0));\n      } // The caller will add the sign.\n\n\n      return str;\n    };\n  }(); // Perform division in the specified base. Called by div and convertBase.\n\n\n  div = function () {\n    // Assume non-zero x and k.\n    function multiply(x, k, base) {\n      var m,\n          temp,\n          xlo,\n          xhi,\n          carry = 0,\n          i = x.length,\n          klo = k % SQRT_BASE,\n          khi = k / SQRT_BASE | 0;\n\n      for (x = x.slice(); i--;) {\n        xlo = x[i] % SQRT_BASE;\n        xhi = x[i] / SQRT_BASE | 0;\n        m = khi * xlo + xhi * klo;\n        temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n        x[i] = temp % base;\n      }\n\n      if (carry) x = [carry].concat(x);\n      return x;\n    }\n\n    function compare(a, b, aL, bL) {\n      var i, cmp;\n\n      if (aL != bL) {\n        cmp = aL > bL ? 1 : -1;\n      } else {\n        for (i = cmp = 0; i < aL; i++) {\n          if (a[i] != b[i]) {\n            cmp = a[i] > b[i] ? 1 : -1;\n            break;\n          }\n        }\n      }\n\n      return cmp;\n    }\n\n    function subtract(a, b, aL, base) {\n      var i = 0; // Subtract b from a.\n\n      for (; aL--;) {\n        a[aL] -= i;\n        i = a[aL] < b[aL] ? 1 : 0;\n        a[aL] = i * base + a[aL] - b[aL];\n      } // Remove leading zeros.\n\n\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\n    } // x: dividend, y: divisor.\n\n\n    return function (x, y, dp, rm, base) {\n      var cmp,\n          e,\n          i,\n          more,\n          n,\n          prod,\n          prodL,\n          q,\n          qc,\n          rem,\n          remL,\n          rem0,\n          xi,\n          xL,\n          yc0,\n          yL,\n          yz,\n          s = x.s == y.s ? 1 : -1,\n          xc = x.c,\n          yc = y.c; // Either NaN, Infinity or 0?\n\n      if (!xc || !xc[0] || !yc || !yc[0]) {\n        return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.\n        !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n        xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n      }\n\n      q = new BigNumber(s);\n      qc = q.c = [];\n      e = x.e - y.e;\n      s = dp + e + 1;\n\n      if (!base) {\n        base = BASE;\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n        s = s / LOG_BASE | 0;\n      } // Result exponent may be one less then the current value of e.\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n\n\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n      if (yc[i] > (xc[i] || 0)) e--;\n\n      if (s < 0) {\n        qc.push(1);\n        more = true;\n      } else {\n        xL = xc.length;\n        yL = yc.length;\n        i = 0;\n        s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n        n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n\n        if (n > 1) {\n          yc = multiply(yc, n, base);\n          xc = multiply(xc, n, base);\n          yL = yc.length;\n          xL = xc.length;\n        }\n\n        xi = yL;\n        rem = xc.slice(0, yL);\n        remL = rem.length; // Add zeros to make remainder as long as divisor.\n\n        for (; remL < yL; rem[remL++] = 0);\n\n        yz = yc.slice();\n        yz = [0].concat(yz);\n        yc0 = yc[0];\n        if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n        do {\n          n = 0; // Compare divisor and remainder.\n\n          cmp = compare(yc, rem, yL, remL); // If divisor < remainder.\n\n          if (cmp < 0) {\n            // Calculate trial digit, n.\n            rem0 = rem[0];\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.\n\n            n = mathfloor(rem0 / yc0); //  Algorithm:\n            //  product = divisor multiplied by trial digit (n).\n            //  Compare product and remainder.\n            //  If product is greater than remainder:\n            //    Subtract divisor from product, decrement trial digit.\n            //  Subtract product from remainder.\n            //  If product was less than remainder at the last compare:\n            //    Compare new remainder and divisor.\n            //    If remainder is greater than divisor:\n            //      Subtract divisor from remainder, increment trial digit.\n\n            if (n > 1) {\n              // n may be > base only when base is 3.\n              if (n >= base) n = base - 1; // product = divisor * trial digit.\n\n              prod = multiply(yc, n, base);\n              prodL = prod.length;\n              remL = rem.length; // Compare product and remainder.\n              // If product > remainder then trial digit n too high.\n              // n is 1 too high about 5% of the time, and is not known to have\n              // ever been more than 1 too high.\n\n              while (compare(prod, rem, prodL, remL) == 1) {\n                n--; // Subtract divisor from product.\n\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                prodL = prod.length;\n                cmp = 1;\n              }\n            } else {\n              // n is 0 or 1, cmp is -1.\n              // If n is 0, there is no need to compare yc and rem again below,\n              // so change cmp to 1 to avoid it.\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\n              if (n == 0) {\n                // divisor < remainder, so n must be at least 1.\n                cmp = n = 1;\n              } // product = divisor\n\n\n              prod = yc.slice();\n              prodL = prod.length;\n            }\n\n            if (prodL < remL) prod = [0].concat(prod); // Subtract product from remainder.\n\n            subtract(rem, prod, remL, base);\n            remL = rem.length; // If product was < remainder.\n\n            if (cmp == -1) {\n              // Compare divisor and new remainder.\n              // If divisor < new remainder, subtract divisor from remainder.\n              // Trial digit n too low.\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\n              while (compare(yc, rem, yL, remL) < 1) {\n                n++; // Subtract divisor from remainder.\n\n                subtract(rem, yL < remL ? yz : yc, remL, base);\n                remL = rem.length;\n              }\n            }\n          } else if (cmp === 0) {\n            n++;\n            rem = [0];\n          } // else cmp === 1 and n will be 0\n          // Add the next digit, n, to the result array.\n\n\n          qc[i++] = n; // Update the remainder.\n\n          if (rem[0]) {\n            rem[remL++] = xc[xi] || 0;\n          } else {\n            rem = [xc[xi]];\n            remL = 1;\n          }\n        } while ((xi++ < xL || rem[0] != null) && s--);\n\n        more = rem[0] != null; // Leading zero?\n\n        if (!qc[0]) qc.splice(0, 1);\n      }\n\n      if (base == BASE) {\n        // To calculate q.e, first get the number of digits of qc[0].\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.\n      } else {\n        q.e = e;\n        q.r = +more;\n      }\n\n      return q;\n    };\n  }();\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\n\n\n  function format(n, i, rm, id) {\n    var c0, e, ne, len, str;\n    if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n    if (!n.c) return n.toString();\n    c0 = n.c[0];\n    ne = n.e;\n\n    if (i == null) {\n      str = coeffToString(n.c);\n      str = id == 1 || id == 2 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne, '0');\n    } else {\n      n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.\n\n      e = n.e;\n      str = coeffToString(n.c);\n      len = str.length; // toPrecision returns exponential notation if the number of significant digits\n      // specified is less than the number of digits necessary to represent the integer\n      // part of the value in fixed-point notation.\n      // Exponential notation.\n\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n        // Append zeros?\n        for (; len < i; str += '0', len++);\n\n        str = toExponential(str, e); // Fixed-point notation.\n      } else {\n        i -= ne;\n        str = toFixedPoint(str, e, '0'); // Append zeros?\n\n        if (e + 1 > len) {\n          if (--i > 0) for (str += '.'; i--; str += '0');\n        } else {\n          i += e - len;\n\n          if (i > 0) {\n            if (e + 1 == len) str += '.';\n\n            for (; i--; str += '0');\n          }\n        }\n      }\n    }\n\n    return n.s < 0 && c0 ? '-' + str : str;\n  } // Handle BigNumber.max and BigNumber.min.\n\n\n  function maxOrMin(args, method) {\n    var m,\n        n,\n        i = 0;\n    if (isArray(args[0])) args = args[0];\n    m = new BigNumber(args[0]);\n\n    for (; ++i < args.length;) {\n      n = new BigNumber(args[i]); // If any number is NaN, return NaN.\n\n      if (!n.s) {\n        m = n;\n        break;\n      } else if (method.call(m, n)) {\n        m = n;\n      }\n    }\n\n    return m;\n  }\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\n\n\n  function normalise(n, c, e) {\n    var i = 1,\n        j = c.length; // Remove trailing zeros.\n\n    for (; !c[--j]; c.pop()); // Calculate the base 10 exponent. First get the number of digits of c[0].\n\n\n    for (j = c[0]; j >= 10; j /= 10, i++); // Overflow?\n\n\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n      // Infinity.\n      n.c = n.e = null; // Underflow?\n    } else if (e < MIN_EXP) {\n      // Zero.\n      n.c = [n.e = 0];\n    } else {\n      n.e = e;\n      n.c = c;\n    }\n\n    return n;\n  } // Handle values that fail the validity test in BigNumber.\n\n\n  parseNumeric = function () {\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n        dotAfter = /^([^.]+)\\.$/,\n        dotBefore = /^\\.([^.]+)$/,\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n    return function (x, str, isNum, b) {\n      var base,\n          s = isNum ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.\n\n      if (isInfinityOrNaN.test(s)) {\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n        x.c = x.e = null;\n      } else {\n        if (!isNum) {\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n          s = s.replace(basePrefix, function (m, p1, p2) {\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n            return !b || b == base ? p1 : m;\n          });\n\n          if (b) {\n            base = b; // E.g. '1.' to '1', '.1' to '0.1'\n\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n          }\n\n          if (str != s) return new BigNumber(s, base);\n        } // '[BigNumber Error] Not a number: {n}'\n        // '[BigNumber Error] Not a base {b} number: {n}'\n\n\n        if (BigNumber.DEBUG) {\n          throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n        } // NaN\n\n\n        x.c = x.e = x.s = null;\n      }\n    };\n  }();\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\n\n\n  function round(x, sd, rm, r) {\n    var d,\n        i,\n        j,\n        k,\n        n,\n        ni,\n        rd,\n        xc = x.c,\n        pows10 = POWS_TEN; // if x is not Infinity or NaN...\n\n    if (xc) {\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\n      // ni is the index of n within x.c.\n      // d is the number of digits of n.\n      // i is the index of rd within n including leading zeros.\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\n      out: {\n        // Get the number of digits of the first element of xc.\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n\n        i = sd - d; // If the rounding digit is in the first element of xc...\n\n        if (i < 0) {\n          i += LOG_BASE;\n          j = sd;\n          n = xc[ni = 0]; // Get the rounding digit at index j of n.\n\n          rd = n / pows10[d - j - 1] % 10 | 0;\n        } else {\n          ni = mathceil((i + 1) / LOG_BASE);\n\n          if (ni >= xc.length) {\n            if (r) {\n              // Needed by sqrt.\n              for (; xc.length <= ni; xc.push(0));\n\n              n = rd = 0;\n              d = 1;\n              i %= LOG_BASE;\n              j = i - LOG_BASE + 1;\n            } else {\n              break out;\n            }\n          } else {\n            n = k = xc[ni]; // Get the number of digits of n.\n\n            for (d = 1; k >= 10; k /= 10, d++); // Get the index of rd within n.\n\n\n            i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.\n            // The number of leading zeros of n is given by LOG_BASE - d.\n\n            j = i - LOG_BASE + d; // Get the rounding digit at index j of n.\n\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n          }\n        }\n\n        r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n        xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n        r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.\n        (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n        if (sd < 1 || !xc[0]) {\n          xc.length = 0;\n\n          if (r) {\n            // Convert sd to decimal places.\n            sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n            x.e = -sd || 0;\n          } else {\n            // Zero.\n            xc[0] = x.e = 0;\n          }\n\n          return x;\n        } // Remove excess digits.\n\n\n        if (i == 0) {\n          xc.length = ni;\n          k = 1;\n          ni--;\n        } else {\n          xc.length = ni + 1;\n          k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n          // j > 0 means i > number of leading zeros of n.\n\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n        } // Round up?\n\n\n        if (r) {\n          for (;;) {\n            // If the digit to be rounded up is in the first element of xc...\n            if (ni == 0) {\n              // i will be the length of xc[0] before k is added.\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n\n              j = xc[0] += k;\n\n              for (k = 1; j >= 10; j /= 10, k++); // if i != k the length has increased.\n\n\n              if (i != k) {\n                x.e++;\n                if (xc[0] == BASE) xc[0] = 1;\n              }\n\n              break;\n            } else {\n              xc[ni] += k;\n              if (xc[ni] != BASE) break;\n              xc[ni--] = 0;\n              k = 1;\n            }\n          }\n        } // Remove trailing zeros.\n\n\n        for (i = xc.length; xc[--i] === 0; xc.pop());\n      } // Overflow? Infinity.\n\n\n      if (x.e > MAX_EXP) {\n        x.c = x.e = null; // Underflow? Zero.\n      } else if (x.e < MIN_EXP) {\n        x.c = [x.e = 0];\n      }\n    }\n\n    return x;\n  } // PROTOTYPE/INSTANCE METHODS\n\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\n\n\n  P.absoluteValue = P.abs = function () {\n    var x = new BigNumber(this);\n    if (x.s < 0) x.s = 1;\n    return x;\n  };\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\n\n\n  P.comparedTo = function (y, b) {\n    return compare(this, new BigNumber(y, b));\n  };\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\n\n\n  P.decimalPlaces = P.dp = function (dp, rm) {\n    var c,\n        n,\n        v,\n        x = this;\n\n    if (dp != null) {\n      intCheck(dp, 0, MAX);\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      return round(new BigNumber(x), dp + x.e + 1, rm);\n    }\n\n    if (!(c = x.c)) return null;\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.\n\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n    if (n < 0) n = 0;\n    return n;\n  };\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\n\n\n  P.dividedBy = P.div = function (y, b) {\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n  };\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\n\n\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\n    return div(this, new BigNumber(y, b), 0, 1);\n  };\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\n\n\n  P.exponentiatedBy = P.pow = function (n, m) {\n    var half,\n        isModExp,\n        k,\n        more,\n        nIsBig,\n        nIsNeg,\n        nIsOdd,\n        y,\n        x = this;\n    n = new BigNumber(n); // Allow NaN and ±Infinity, but not other non-integers.\n\n    if (n.c && !n.isInteger()) {\n      throw Error(bignumberError + 'Exponent not an integer: ' + n);\n    }\n\n    if (m != null) m = new BigNumber(m); // Exponent of MAX_SAFE_INTEGER is 15.\n\n    nIsBig = n.e > 14; // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n      // The sign of the result of pow when x is negative depends on the evenness of n.\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\n      y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\n      return m ? y.mod(m) : y;\n    }\n\n    nIsNeg = n.s < 0;\n\n    if (m) {\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n      if (isModExp) x = x.mod(m); // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 // [1, 240000000]\n    ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 // [80000000000000]  [99999750000000]\n    : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n      // If x is negative and n is odd, k = -0, else k = 0.\n      k = x.s < 0 && isOdd(n) ? -0 : 0; // If x >= 1, k = ±Infinity.\n\n      if (x.e > -1) k = 1 / k; // If n is negative return ±0, else return ±Infinity.\n\n      return new BigNumber(nIsNeg ? 1 / k : k);\n    } else if (POW_PRECISION) {\n      // Truncating each coefficient array to a length of k after each multiplication\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\n      // i.e. there will be a minimum of 28 guard digits retained.\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\n    }\n\n    if (nIsBig) {\n      half = new BigNumber(0.5);\n      nIsOdd = isOdd(n);\n    } else {\n      nIsOdd = n % 2;\n    }\n\n    if (nIsNeg) n.s = 1;\n    y = new BigNumber(ONE); // Performs 54 loop iterations for n of 9007199254740991.\n\n    for (;;) {\n      if (nIsOdd) {\n        y = y.times(x);\n        if (!y.c) break;\n\n        if (k) {\n          if (y.c.length > k) y.c.length = k;\n        } else if (isModExp) {\n          y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n        }\n      }\n\n      if (nIsBig) {\n        n = n.times(half);\n        round(n, n.e + 1, 1);\n        if (!n.c[0]) break;\n        nIsBig = n.e > 14;\n        nIsOdd = isOdd(n);\n      } else {\n        n = mathfloor(n / 2);\n        if (!n) break;\n        nIsOdd = n % 2;\n      }\n\n      x = x.times(x);\n\n      if (k) {\n        if (x.c && x.c.length > k) x.c.length = k;\n      } else if (isModExp) {\n        x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n      }\n    }\n\n    if (isModExp) return y;\n    if (nIsNeg) y = ONE.div(y);\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n  };\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\n\n\n  P.integerValue = function (rm) {\n    var n = new BigNumber(this);\n    if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n    return round(n, n.e + 1, rm);\n  };\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\n\n\n  P.isEqualTo = P.eq = function (y, b) {\n    return compare(this, new BigNumber(y, b)) === 0;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\n\n\n  P.isFinite = function () {\n    return !!this.c;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\n\n\n  P.isGreaterThan = P.gt = function (y, b) {\n    return compare(this, new BigNumber(y, b)) > 0;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\n\n\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\n\n\n  P.isInteger = function () {\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\n\n\n  P.isLessThan = P.lt = function (y, b) {\n    return compare(this, new BigNumber(y, b)) < 0;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\n\n\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\n\n\n  P.isNaN = function () {\n    return !this.s;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\n\n\n  P.isNegative = function () {\n    return this.s < 0;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\n\n\n  P.isPositive = function () {\n    return this.s > 0;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\n\n\n  P.isZero = function () {\n    return !!this.c && this.c[0] == 0;\n  };\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\n\n\n  P.minus = function (y, b) {\n    var i,\n        j,\n        t,\n        xLTy,\n        x = this,\n        a = x.s;\n    y = new BigNumber(y, b);\n    b = y.s; // Either NaN?\n\n    if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n    if (a != b) {\n      y.s = -b;\n      return x.plus(y);\n    }\n\n    var xe = x.e / LOG_BASE,\n        ye = y.e / LOG_BASE,\n        xc = x.c,\n        yc = y.c;\n\n    if (!xe || !ye) {\n      // Either Infinity?\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?\n\n      if (!xc[0] || !yc[0]) {\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n        ROUNDING_MODE == 3 ? -0 : 0);\n      }\n    }\n\n    xe = bitFloor(xe);\n    ye = bitFloor(ye);\n    xc = xc.slice(); // Determine which is the bigger number.\n\n    if (a = xe - ye) {\n      if (xLTy = a < 0) {\n        a = -a;\n        t = xc;\n      } else {\n        ye = xe;\n        t = yc;\n      }\n\n      t.reverse(); // Prepend zeros to equalise exponents.\n\n      for (b = a; b--; t.push(0));\n\n      t.reverse();\n    } else {\n      // Exponents equal. Check digit by digit.\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n      for (a = b = 0; b < j; b++) {\n        if (xc[b] != yc[b]) {\n          xLTy = xc[b] < yc[b];\n          break;\n        }\n      }\n    } // x < y? Point xc to the array of the bigger number.\n\n\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n    b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n\n    if (b > 0) for (; b--; xc[i++] = 0);\n    b = BASE - 1; // Subtract yc from xc.\n\n    for (; j > a;) {\n      if (xc[--j] < yc[j]) {\n        for (i = j; i && !xc[--i]; xc[i] = b);\n\n        --xc[i];\n        xc[j] += BASE;\n      }\n\n      xc[j] -= yc[j];\n    } // Remove leading zeros and adjust exponent accordingly.\n\n\n    for (; xc[0] == 0; xc.splice(0, 1), --ye); // Zero?\n\n\n    if (!xc[0]) {\n      // Following IEEE 754 (2008) 6.3,\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\n      y.c = [y.e = 0];\n      return y;\n    } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n    // for finite x and y.\n\n\n    return normalise(y, xc, ye);\n  };\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\n\n\n  P.modulo = P.mod = function (y, b) {\n    var q,\n        s,\n        x = this;\n    y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n\n    if (!x.c || !y.s || y.c && !y.c[0]) {\n      return new BigNumber(NaN); // Return x if y is Infinity or x is zero.\n    } else if (!y.c || x.c && !x.c[0]) {\n      return new BigNumber(x);\n    }\n\n    if (MODULO_MODE == 9) {\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\n      // r = x - qy    where  0 <= r < abs(y)\n      s = y.s;\n      y.s = 1;\n      q = div(x, y, 0, 3);\n      y.s = s;\n      q.s *= s;\n    } else {\n      q = div(x, y, 0, MODULO_MODE);\n    }\n\n    y = x.minus(q.times(y)); // To match JavaScript %, ensure sign of zero is sign of dividend.\n\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n    return y;\n  };\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\n\n\n  P.multipliedBy = P.times = function (y, b) {\n    var c,\n        e,\n        i,\n        j,\n        k,\n        m,\n        xcL,\n        xlo,\n        xhi,\n        ycL,\n        ylo,\n        yhi,\n        zc,\n        base,\n        sqrtBase,\n        x = this,\n        xc = x.c,\n        yc = (y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?\n\n    if (!xc || !yc || !xc[0] || !yc[0]) {\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n        y.c = y.e = y.s = null;\n      } else {\n        y.s *= x.s; // Return ±Infinity if either is ±Infinity.\n\n        if (!xc || !yc) {\n          y.c = y.e = null; // Return ±0 if either is ±0.\n        } else {\n          y.c = [0];\n          y.e = 0;\n        }\n      }\n\n      return y;\n    }\n\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n    y.s *= x.s;\n    xcL = xc.length;\n    ycL = yc.length; // Ensure xc points to longer array and xcL to its length.\n\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.\n\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n    base = BASE;\n    sqrtBase = SQRT_BASE;\n\n    for (i = ycL; --i >= 0;) {\n      c = 0;\n      ylo = yc[i] % sqrtBase;\n      yhi = yc[i] / sqrtBase | 0;\n\n      for (k = xcL, j = i + k; j > i;) {\n        xlo = xc[--k] % sqrtBase;\n        xhi = xc[k] / sqrtBase | 0;\n        m = yhi * xlo + xhi * ylo;\n        xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n        zc[j--] = xlo % base;\n      }\n\n      zc[j] = c;\n    }\n\n    if (c) {\n      ++e;\n    } else {\n      zc.splice(0, 1);\n    }\n\n    return normalise(y, zc, e);\n  };\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\n\n\n  P.negated = function () {\n    var x = new BigNumber(this);\n    x.s = -x.s || null;\n    return x;\n  };\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\n\n\n  P.plus = function (y, b) {\n    var t,\n        x = this,\n        a = x.s;\n    y = new BigNumber(y, b);\n    b = y.s; // Either NaN?\n\n    if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n    if (a != b) {\n      y.s = -b;\n      return x.minus(y);\n    }\n\n    var xe = x.e / LOG_BASE,\n        ye = y.e / LOG_BASE,\n        xc = x.c,\n        yc = y.c;\n\n    if (!xe || !ye) {\n      // Return ±Infinity if either ±Infinity.\n      if (!xc || !yc) return new BigNumber(a / 0); // Either zero?\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n    }\n\n    xe = bitFloor(xe);\n    ye = bitFloor(ye);\n    xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n\n    if (a = xe - ye) {\n      if (a > 0) {\n        ye = xe;\n        t = yc;\n      } else {\n        a = -a;\n        t = xc;\n      }\n\n      t.reverse();\n\n      for (; a--; t.push(0));\n\n      t.reverse();\n    }\n\n    a = xc.length;\n    b = yc.length; // Point xc to the longer array, and b to the shorter length.\n\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n\n    for (a = 0; b;) {\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n    }\n\n    if (a) {\n      xc = [a].concat(xc);\n      ++ye;\n    } // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    // ye = MAX_EXP + 1 possible\n\n\n    return normalise(y, xc, ye);\n  };\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\n\n\n  P.precision = P.sd = function (sd, rm) {\n    var c,\n        n,\n        v,\n        x = this;\n\n    if (sd != null && sd !== !!sd) {\n      intCheck(sd, 1, MAX);\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      return round(new BigNumber(x), sd, rm);\n    }\n\n    if (!(c = x.c)) return null;\n    v = c.length - 1;\n    n = v * LOG_BASE + 1;\n\n    if (v = c[v]) {\n      // Subtract the number of trailing zeros of the last element.\n      for (; v % 10 == 0; v /= 10, n--); // Add the number of digits of the first element.\n\n\n      for (v = c[0]; v >= 10; v /= 10, n++);\n    }\n\n    if (sd && x.e + 1 > n) n = x.e + 1;\n    return n;\n  };\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\n\n\n  P.shiftedBy = function (k) {\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n    return this.times('1e' + k);\n  };\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\n\n\n  P.squareRoot = P.sqrt = function () {\n    var m,\n        n,\n        r,\n        rep,\n        t,\n        x = this,\n        c = x.c,\n        s = x.s,\n        e = x.e,\n        dp = DECIMAL_PLACES + 4,\n        half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?\n\n    if (s !== 1 || !c || !c[0]) {\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n    } // Initial estimate.\n\n\n    s = Math.sqrt(+x); // Math.sqrt underflow/overflow?\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n\n    if (s == 0 || s == 1 / 0) {\n      n = coeffToString(c);\n      if ((n.length + e) % 2 == 0) n += '0';\n      s = Math.sqrt(n);\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n      if (s == 1 / 0) {\n        n = '1e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n\n      r = new BigNumber(n);\n    } else {\n      r = new BigNumber(s + '');\n    } // Check for zero.\n    // r could be zero if MIN_EXP is changed after the this value was created.\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n    // coeffToString to throw.\n\n\n    if (r.c[0]) {\n      e = r.e;\n      s = e + dp;\n      if (s < 3) s = 0; // Newton-Raphson iteration.\n\n      for (;;) {\n        t = r;\n        r = half.times(t.plus(div(x, t, dp, 1)));\n\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n          // The exponent of r may here be one less than the final result exponent,\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n          // are indexed correctly.\n          if (r.e < e) --s;\n          n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n          // iteration.\n\n          if (n == '9999' || !rep && n == '4999') {\n            // On the first iteration only, check to see if rounding up gives the\n            // exact result as the nines may infinitely repeat.\n            if (!rep) {\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n              if (t.times(t).eq(x)) {\n                r = t;\n                break;\n              }\n            }\n\n            dp += 4;\n            s += 4;\n            rep = 1;\n          } else {\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n            // result. If not, then there are further digits and m will be truthy.\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n              // Truncate to the first rounding digit.\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\n              m = !r.times(r).eq(x);\n            }\n\n            break;\n          }\n        }\n      }\n    }\n\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n  };\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\n\n\n  P.toExponential = function (dp, rm) {\n    if (dp != null) {\n      intCheck(dp, 0, MAX);\n      dp++;\n    }\n\n    return format(this, dp, rm, 1);\n  };\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\n\n\n  P.toFixed = function (dp, rm) {\n    if (dp != null) {\n      intCheck(dp, 0, MAX);\n      dp = dp + this.e + 1;\n    }\n\n    return format(this, dp, rm);\n  };\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the FORMAT object (see BigNumber.set).\r\n   *\r\n   * FORMAT = {\r\n   *      decimalSeparator : '.',\r\n   *      groupSeparator : ',',\r\n   *      groupSize : 3,\r\n   *      secondaryGroupSize : 0,\r\n   *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n   *      fractionGroupSize : 0\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\n\n\n  P.toFormat = function (dp, rm) {\n    var str = this.toFixed(dp, rm);\n\n    if (this.c) {\n      var i,\n          arr = str.split('.'),\n          g1 = +FORMAT.groupSize,\n          g2 = +FORMAT.secondaryGroupSize,\n          groupSeparator = FORMAT.groupSeparator,\n          intPart = arr[0],\n          fractionPart = arr[1],\n          isNeg = this.s < 0,\n          intDigits = isNeg ? intPart.slice(1) : intPart,\n          len = intDigits.length;\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n      if (g1 > 0 && len > 0) {\n        i = len % g1 || g1;\n        intPart = intDigits.substr(0, i);\n\n        for (; i < len; i += g1) {\n          intPart += groupSeparator + intDigits.substr(i, g1);\n        }\n\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n        if (isNeg) intPart = '-' + intPart;\n      }\n\n      str = fractionPart ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + FORMAT.fractionGroupSeparator) : fractionPart) : intPart;\n    }\n\n    return str;\n  };\n  /*\r\n   * Return a string array representing the value of this BigNumber as a simple fraction with\r\n   * an integer numerator and an integer denominator. The denominator will be a positive\r\n   * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n   * denominator is not specified, the denominator will be the lowest value necessary to\r\n   * represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\n\n\n  P.toFraction = function (md) {\n    var arr,\n        d,\n        d0,\n        d1,\n        d2,\n        e,\n        exp,\n        n,\n        n0,\n        n1,\n        q,\n        s,\n        x = this,\n        xc = x.c;\n\n    if (md != null) {\n      n = new BigNumber(md); // Throw if md is less than one or is not an integer, unless it is Infinity.\n\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n        throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\n      }\n    }\n\n    if (!xc) return x.toString();\n    d = new BigNumber(ONE);\n    n1 = d0 = new BigNumber(ONE);\n    d1 = n0 = new BigNumber(ONE);\n    s = coeffToString(xc); // Determine initial denominator.\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n\n    e = d.e = s.length - x.e - 1;\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n    md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;\n    exp = MAX_EXP;\n    MAX_EXP = 1 / 0;\n    n = new BigNumber(s); // n0 = d1 = 0\n\n    n0.c[0] = 0;\n\n    for (;;) {\n      q = div(n, d, 0, 1);\n      d2 = d0.plus(q.times(d1));\n      if (d2.comparedTo(md) == 1) break;\n      d0 = d1;\n      d1 = d2;\n      n1 = n0.plus(q.times(d2 = n1));\n      n0 = d2;\n      d = n.minus(q.times(d2 = d));\n      n = d2;\n    }\n\n    d2 = div(md.minus(d0), d1, 0, 1);\n    n0 = n0.plus(d2.times(n1));\n    d0 = d0.plus(d2.times(d1));\n    n0.s = n1.s = x.s;\n    e *= 2; // Determine which fraction is closer to x, n0/d0 or n1/d1\n\n    arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1.toString(), d1.toString()] : [n0.toString(), d0.toString()];\n    MAX_EXP = exp;\n    return arr;\n  };\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\n\n\n  P.toNumber = function () {\n    return +this;\n  };\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\n\n\n  P.toPrecision = function (sd, rm) {\n    if (sd != null) intCheck(sd, 1, MAX);\n    return format(this, sd, rm, 2);\n  };\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\n\n\n  P.toString = function (b) {\n    var str,\n        n = this,\n        s = n.s,\n        e = n.e; // Infinity or NaN?\n\n    if (e === null) {\n      if (s) {\n        str = 'Infinity';\n        if (s < 0) str = '-' + str;\n      } else {\n        str = 'NaN';\n      }\n    } else {\n      str = coeffToString(n.c);\n\n      if (b == null) {\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n      } else {\n        intCheck(b, 2, ALPHABET.length, 'Base');\n        str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\n      }\n\n      if (s < 0 && n.c[0]) str = '-' + str;\n    }\n\n    return str;\n  };\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\n\n\n  P.valueOf = P.toJSON = function () {\n    var str,\n        n = this,\n        e = n.e;\n    if (e === null) return n.toString();\n    str = coeffToString(n.c);\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n    return n.s < 0 ? '-' + str : str;\n  };\n\n  P._isBigNumber = true;\n  if (configObject != null) BigNumber.set(configObject);\n  return BigNumber;\n} // PRIVATE HELPER FUNCTIONS\n\n\nfunction bitFloor(n) {\n  var i = n | 0;\n  return n > 0 || n === i ? i : i - 1;\n} // Return a coefficient array as a string of base 10 digits.\n\n\nfunction coeffToString(a) {\n  var s,\n      z,\n      i = 1,\n      j = a.length,\n      r = a[0] + '';\n\n  for (; i < j;) {\n    s = a[i++] + '';\n    z = LOG_BASE - s.length;\n\n    for (; z--; s = '0' + s);\n\n    r += s;\n  } // Determine trailing zeros.\n\n\n  for (j = r.length; r.charCodeAt(--j) === 48;);\n\n  return r.slice(0, j + 1 || 1);\n} // Compare the value of BigNumbers x and y.\n\n\nfunction compare(x, y) {\n  var a,\n      b,\n      xc = x.c,\n      yc = y.c,\n      i = x.s,\n      j = y.s,\n      k = x.e,\n      l = y.e; // Either NaN?\n\n  if (!i || !j) return null;\n  a = xc && !xc[0];\n  b = yc && !yc[0]; // Either zero?\n\n  if (a || b) return a ? b ? 0 : -j : i; // Signs differ?\n\n  if (i != j) return i;\n  a = i < 0;\n  b = k == l; // Either Infinity?\n\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.\n\n  if (!b) return k > l ^ a ? 1 : -1;\n  j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1; // Compare lengths.\n\n\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\n}\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\n\n\nfunction intCheck(n, min, max, name) {\n  if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\n    throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + n);\n  }\n}\n\nfunction isArray(obj) {\n  return Object.prototype.toString.call(obj) == '[object Array]';\n} // Assumes finite n.\n\n\nfunction isOdd(n) {\n  var k = n.c.length - 1;\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n}\n\nfunction toExponential(str, e) {\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n}\n\nfunction toFixedPoint(str, e, z) {\n  var len, zs; // Negative exponent?\n\n  if (e < 0) {\n    // Prepend zeros.\n    for (zs = z + '.'; ++e; zs += z);\n\n    str = zs + str; // Positive exponent\n  } else {\n    len = str.length; // Append zeros.\n\n    if (++e > len) {\n      for (zs = z, e -= len; --e; zs += z);\n\n      str += zs;\n    } else if (e < len) {\n      str = str.slice(0, e) + '.' + str.slice(e);\n    }\n  }\n\n  return str;\n} // EXPORTS\n\n\nexport var BigNumber = clone();\nexport default BigNumber;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/truffle-contract/node_modules/bignumber.js/bignumber.mjs"],"names":["isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","clone","configObject","div","convertBase","parseNumeric","P","BigNumber","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","ALPHABET","n","b","alphabet","c","caseChanged","e","i","isNum","len","str","x","s","slice","test","charCodeAt","indexOf","replace","search","substring","length","intCheck","round","DEBUG","Error","charAt","toUpperCase","toLowerCase","push","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","v","hasOwnProperty","isArray","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","_isBigNumber","maximum","max","maxOrMin","arguments","lt","minimum","min","gt","random","pow2_53","random53bitInt","dp","a","k","rand","Uint32Array","copy","pop","splice","decimal","toBaseOut","baseIn","baseOut","j","arr","arrL","reverse","sign","callerIsToString","d","r","xc","y","rm","pow","toFixedPoint","coeffToString","concat","multiply","base","m","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","format","id","c0","ne","toExponential","args","method","call","normalise","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","sd","ni","rd","pows10","out","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","isOdd","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","plus","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","z","l","name","Object","zs"],"mappings":"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","sourcesContent":["/*\r\n *      bignumber.js v7.2.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      decimalSeparator: '.',\r\n      groupSeparator: ',',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n      fractionGroupSize: 0\r\n    },\r\n\r\n    // The alphabet used for base conversion.\r\n    // It must be at least 2 characters long, with no '.' or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * n {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(n, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor usage without new.\r\n    if (!(x instanceof BigNumber)) {\r\n\r\n      // Don't throw on constructor call without new (#81).\r\n      // '[BigNumber Error] Constructor call without new: {n}'\r\n      //throw Error(bignumberError + ' Constructor call without new: ' + n);\r\n      return new BigNumber(n, b);\r\n    }\r\n\r\n    if (b == null) {\r\n\r\n      // Duplicate.\r\n      if (n instanceof BigNumber) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = (n = n.c) ? n.slice() : n;\r\n        return;\r\n      }\r\n\r\n      isNum = typeof n == 'number';\r\n\r\n      if (isNum && n * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / n < 0 ? (n = -n, -1) : 1;\r\n\r\n        // Faster path for integers.\r\n        if (n === ~~n) {\r\n          for (e = 0, i = n; i >= 10; i /= 10, e++);\r\n          x.e = e;\r\n          x.c = [n];\r\n          return;\r\n        }\r\n\r\n        str = n + '';\r\n      } else {\r\n        if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n      str = n + '';\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10) {\r\n        x = new BigNumber(n instanceof BigNumber ? n : str);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      isNum = typeof n == 'number';\r\n\r\n      if (isNum) {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + n);\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, n + '', isNum, b);\r\n        }\r\n      }\r\n\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    str = str.slice(i, ++len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * n));\r\n      }\r\n\r\n      e = e - i - 1;\r\n\r\n       // Overflow?\r\n      if (e > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          str = str.slice(i);\r\n          i = LOG_BASE - str.length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                     not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *      decimalSeparator       {string}\r\n   *      groupSeparator         {string}\r\n   *      groupSize              {number}\r\n   *      secondaryGroupSize     {number}\r\n   *      fractionGroupSeparator {string}\r\n   *      fractionGroupSize      {number}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (isArray(v)) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (isArray(v)) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if only one character, or contains '.' or a repeated character.\r\n          if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * v {any}\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    return v instanceof BigNumber || v && v._isBigNumber === true || false;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, P.lt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, P.gt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))\r\n            : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && ne <= TO_EXP_NEG\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  function maxOrMin(args, method) {\r\n    var m, n,\r\n      i = 0;\r\n\r\n    if (isArray(args[0])) args = args[0];\r\n    m = new BigNumber(args[0]);\r\n\r\n    for (; ++i < args.length;) {\r\n      n = new BigNumber(args[i]);\r\n\r\n      // If any number is NaN, return NaN.\r\n      if (!n.s) {\r\n        m = n;\r\n        break;\r\n      } else if (method.call(m, n)) {\r\n        m = n;\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        x.c = x.e = null;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.c = x.e = x.s = null;\r\n      }\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = n / pows10[d - j - 1] % 10 | 0;\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + n);\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      nIsOdd = n % 2;\r\n    }\r\n\r\n    if (nIsNeg) n.s = 1;\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (nIsBig) {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n        if (!n.c[0]) break;\r\n        nIsBig = n.e > 14;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        n = mathfloor(n / 2);\r\n        if (!n) break;\r\n        nIsOdd = n % 2;\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '1e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c  ).slice(0, s) === (n =\r\n           coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the FORMAT object (see BigNumber.set).\r\n   *\r\n   * FORMAT = {\r\n   *      decimalSeparator : '.',\r\n   *      groupSeparator : ',',\r\n   *      groupSize : 3,\r\n   *      secondaryGroupSize : 0,\r\n   *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n   *      fractionGroupSize : 0\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFormat = function (dp, rm) {\r\n    var str = this.toFixed(dp, rm);\r\n\r\n    if (this.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +FORMAT.groupSize,\r\n        g2 = +FORMAT.secondaryGroupSize,\r\n        groupSeparator = FORMAT.groupSeparator,\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = this.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n\r\n        for (; i < len; i += g1) {\r\n          intPart += groupSeparator + intDigits.substr(i, g1);\r\n        }\r\n\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + FORMAT.fractionGroupSeparator)\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string array representing the value of this BigNumber as a simple fraction with\r\n   * an integer numerator and an integer denominator. The denominator will be a positive\r\n   * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n   * denominator is not specified, the denominator will be the lowest value necessary to\r\n   * represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\r\n      }\r\n    }\r\n\r\n    if (!xc) return x.toString();\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e *= 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n       div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1\r\n        ? [n1.toString(), d1.toString()]\r\n        : [n0.toString(), d0.toString()];\r\n\r\n    MAX_EXP = exp;\r\n    return arr;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      str = coeffToString(n.c);\r\n\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(str, e)\r\n         : toFixedPoint(str, e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var str,\r\n      n = this,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + n);\r\n  }\r\n}\r\n\r\n\r\nfunction isArray(obj) {\r\n  return Object.prototype.toString.call(obj) == '[object Array]';\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORTS\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n"]},"metadata":{},"sourceType":"module"}