{"ast":null,"code":"var pkgVersion = require(\"./package.json\").version;\n\nvar Ajv = require(\"ajv\");\n\nvar util = require(\"util\");\n\nvar contractObjectSchema = require(\"./spec/contract-object.spec.json\");\n\nvar networkObjectSchema = require(\"./spec/network-object.spec.json\");\n\nvar abiSchema = require(\"./spec/abi.spec.json\");\n/**\n * Property definitions for Contract Objects\n *\n * Describes canonical output properties as sourced from some \"dirty\" input\n * object. Describes normalization process to account for deprecated and/or\n * nonstandard keys and values.\n *\n * Maps (key -> property) where:\n *  - `key` is the top-level output key matching up with those in the schema\n *  - `property` is an object with optional values:\n *      - `sources`: list of sources (see below); default `key`\n *      - `transform`: function(value) -> transformed value; default x -> x\n *\n * Each source represents a means to select a value from dirty object.\n * Allows:\n *  - dot-separated (`.`) string, corresponding to path to value in dirty\n *    object\n *  - function(dirtyObj) -> (cleanValue | undefined)\n *\n * The optional `transform` parameter standardizes value regardless of source,\n * for purposes of ensuring data type and/or string schemas.\n */\n// helper that ensures abi's do not contain function signatures\n\n\nconst sanitizedValue = dirtyValueArray => {\n  let sanitizedValueArray = [];\n  dirtyValueArray.forEach(item => {\n    let sanitizedItem = Object.assign({}, item);\n    delete sanitizedItem.signature;\n    sanitizedValueArray.push(sanitizedItem);\n  });\n  return sanitizedValueArray;\n}; // filter `signature` property from an event\n\n\nconst sanitizeEvent = dirtyEvent => Object.entries(dirtyEvent).reduce((acc, [property, value]) => property === \"signature\" ? acc : Object.assign(acc, {\n  [property]: value\n}), {}); // sanitize aggregrate events given a `network-object.spec.json#events` object\n\n\nconst sanitizeAllEvents = dirtyEvents => Object.entries(dirtyEvents).reduce((acc, [property, event]) => Object.assign(acc, {\n  [property]: sanitizeEvent(event)\n}), {});\n\nvar properties = {\n  contractName: {\n    sources: [\"contractName\", \"contract_name\"]\n  },\n  abi: {\n    sources: [\"abi\", \"interface\"],\n    transform: function (value) {\n      if (typeof value === \"string\") {\n        try {\n          value = JSON.parse(value);\n        } catch (_) {\n          value = undefined;\n        }\n      }\n\n      if (Array.isArray(value)) {\n        return sanitizedValue(value);\n      }\n\n      return value;\n    }\n  },\n  metadata: {\n    sources: [\"metadata\"]\n  },\n  bytecode: {\n    sources: [\"bytecode\", \"binary\", \"unlinked_binary\", \"evm.bytecode.object\"],\n    transform: function (value) {\n      if (value && value.indexOf(\"0x\") !== 0) {\n        value = \"0x\" + value;\n      }\n\n      return value;\n    }\n  },\n  deployedBytecode: {\n    sources: [\"deployedBytecode\", \"runtimeBytecode\", \"evm.deployedBytecode.object\"],\n    transform: function (value) {\n      if (value && value.indexOf(\"0x\") !== 0) {\n        value = \"0x\" + value;\n      }\n\n      return value;\n    }\n  },\n  immutableReferences: {},\n  generatedSources: {},\n  deployedGeneratedSources: {},\n  sourceMap: {\n    transform: function (value) {\n      if (typeof value === \"string\") {\n        try {\n          return JSON.parse(value);\n        } catch (_) {\n          return value;\n        }\n      } else {\n        return value;\n      }\n    },\n    sources: [\"sourceMap\", \"srcmap\", \"evm.bytecode.sourceMap\"]\n  },\n  deployedSourceMap: {\n    transform: function (value) {\n      if (typeof value === \"string\") {\n        try {\n          return JSON.parse(value);\n        } catch (_) {\n          return value;\n        }\n      } else {\n        return value;\n      }\n    },\n    sources: [\"deployedSourceMap\", \"srcmapRuntime\", \"evm.deployedBytecode.sourceMap\"]\n  },\n  source: {},\n  sourcePath: {},\n  ast: {},\n  legacyAST: {\n    transform: function (value, obj) {\n      if (value) {\n        return value;\n      } else {\n        return obj.ast;\n      }\n    }\n  },\n  compiler: {},\n  networks: {\n    /**\n     * Normalize a networks object. Currently this makes sure `events` are\n     * always sanitized and `links` is extracted when copying from\n     * a TruffleContract context object.\n     *\n     * @param {object} value - the target object\n     * @param {object | TruffleContract} obj - the context, or source object.\n     * @return {object} The normalized Network object\n     */\n    transform: function (value = {}, obj) {\n      // Sanitize value's events for known networks\n      Object.keys(value).forEach(networkId => {\n        if (value[networkId].events) {\n          value[networkId].events = sanitizeAllEvents(value[networkId].events);\n        }\n      }); // Set and sanitize the current networks property from the\n      // TruffleContract. Note: obj is a TruffleContract if it has\n      // `network_id` attribute\n\n      const networkId = obj.network_id;\n\n      if (networkId && value.hasOwnProperty(networkId)) {\n        value[networkId].links = obj.links;\n        value[networkId].events = sanitizeAllEvents(obj.events);\n      }\n\n      return value;\n    }\n  },\n  schemaVersion: {\n    sources: [\"schemaVersion\", \"schema_version\"]\n  },\n  updatedAt: {\n    sources: [\"updatedAt\", \"updated_at\"],\n    transform: function (value) {\n      if (typeof value === \"number\") {\n        value = new Date(value).toISOString();\n      }\n\n      return value;\n    }\n  },\n  networkType: {},\n  devdoc: {},\n  userdoc: {},\n  db: {}\n};\n/**\n * Construct a getter for a given key, possibly applying some post-retrieve\n * transformation on the resulting value.\n *\n * @return {Function} Accepting dirty object and returning value || undefined\n */\n\nfunction getter(key, transform) {\n  if (transform === undefined) {\n    transform = function (x) {\n      return x;\n    };\n  }\n\n  return function (obj) {\n    try {\n      return transform(obj[key]);\n    } catch (_) {\n      return undefined;\n    }\n  };\n}\n/**\n * Chains together a series of function(obj) -> value, passing resulting\n * returned value to next function in chain.\n *\n * Accepts any number of functions passed as arguments\n * @return {Function} Accepting initial object, returning end-of-chain value\n *\n * Assumes all intermediary values to be objects, with well-formed sequence\n * of operations.\n */\n\n\nfunction chain() {\n  var getters = Array.prototype.slice.call(arguments);\n  return function (obj) {\n    return getters.reduce(function (cur, get) {\n      return get(cur);\n    }, obj);\n  };\n} // Schema module\n//\n\n\nvar TruffleContractSchema = {\n  // Return a promise to validate a contract object\n  // - Resolves as validated `contractObj`\n  // - Rejects with list of errors from schema validator\n  validate: function (contractObj) {\n    var ajv = new Ajv({\n      verbose: true\n    });\n    ajv.addSchema(abiSchema);\n    ajv.addSchema(networkObjectSchema);\n    ajv.addSchema(contractObjectSchema);\n\n    if (ajv.validate(\"contract-object.spec.json\", contractObj)) {\n      return contractObj;\n    } else {\n      const message = `Schema validation failed. Errors:\\n\\n${ajv.errors.map(({\n        keyword,\n        dataPath,\n        schemaPath,\n        params,\n        message,\n        data,\n        parentSchema\n      }) => util.format(\"%s (%s):\\n%s\\n\", message, keyword, util.inspect({\n        dataPath,\n        schemaPath,\n        params,\n        data,\n        parentSchema\n      }, {\n        depth: 5\n      }))).join(\"\\n\")}`;\n      const error = new Error(message);\n      error.errors = ajv.errors;\n      throw error;\n    }\n  },\n  // accepts as argument anything that can be turned into a contract object\n  // returns a contract object\n  normalize: function (objDirty, options) {\n    options = options || {};\n    var normalized = {}; // iterate over each property\n\n    Object.keys(properties).forEach(function (key) {\n      var property = properties[key];\n      var value; // normalized value || undefined\n      // either used the defined sources or assume the key will only ever be\n      // listed as its canonical name (itself)\n\n      var sources = property.sources || [key]; // iterate over sources until value is defined or end of list met\n\n      for (var i = 0; value === undefined && i < sources.length; i++) {\n        var source = sources[i]; // string refers to path to value in objDirty, split and chain\n        // getters\n\n        if (typeof source === \"string\") {\n          var traversals = source.split(\".\").map(function (k) {\n            return getter(k);\n          });\n          source = chain.apply(null, traversals);\n        } // source should be a function that takes the objDirty and returns\n        // value or undefined\n\n\n        value = source(objDirty);\n      } // run source-agnostic transform on value\n      // (e.g. make sure bytecode begins 0x)\n\n\n      if (property.transform) {\n        value = property.transform(value, objDirty);\n      } // add resulting (possibly undefined) to normalized obj\n\n\n      normalized[key] = value;\n    }); // Copy x- options\n\n    Object.keys(objDirty).forEach(function (key) {\n      if (key.indexOf(\"x-\") === 0) {\n        normalized[key] = getter(key)(objDirty);\n      }\n    }); // update schema version\n\n    normalized.schemaVersion = pkgVersion;\n\n    if (options.validate) {\n      this.validate(normalized);\n    }\n\n    return normalized;\n  }\n};\nmodule.exports = TruffleContractSchema;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/@truffle/contract-schema/index.js"],"names":["pkgVersion","require","version","Ajv","util","contractObjectSchema","networkObjectSchema","abiSchema","sanitizedValue","dirtyValueArray","sanitizedValueArray","forEach","item","sanitizedItem","Object","assign","signature","push","sanitizeEvent","dirtyEvent","entries","reduce","acc","property","value","sanitizeAllEvents","dirtyEvents","event","properties","contractName","sources","abi","transform","JSON","parse","_","undefined","Array","isArray","metadata","bytecode","indexOf","deployedBytecode","immutableReferences","generatedSources","deployedGeneratedSources","sourceMap","deployedSourceMap","source","sourcePath","ast","legacyAST","obj","compiler","networks","keys","networkId","events","network_id","hasOwnProperty","links","schemaVersion","updatedAt","Date","toISOString","networkType","devdoc","userdoc","db","getter","key","x","chain","getters","prototype","slice","call","arguments","cur","get","TruffleContractSchema","validate","contractObj","ajv","verbose","addSchema","message","errors","map","keyword","dataPath","schemaPath","params","data","parentSchema","format","inspect","depth","join","error","Error","normalize","objDirty","options","normalized","i","length","traversals","split","k","apply","module","exports"],"mappings":"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","sourcesContent":["var pkgVersion = require(\"./package.json\").version;\nvar Ajv = require(\"ajv\");\nvar util = require(\"util\");\n\nvar contractObjectSchema = require(\"./spec/contract-object.spec.json\");\nvar networkObjectSchema = require(\"./spec/network-object.spec.json\");\nvar abiSchema = require(\"./spec/abi.spec.json\");\n\n/**\n * Property definitions for Contract Objects\n *\n * Describes canonical output properties as sourced from some \"dirty\" input\n * object. Describes normalization process to account for deprecated and/or\n * nonstandard keys and values.\n *\n * Maps (key -> property) where:\n *  - `key` is the top-level output key matching up with those in the schema\n *  - `property` is an object with optional values:\n *      - `sources`: list of sources (see below); default `key`\n *      - `transform`: function(value) -> transformed value; default x -> x\n *\n * Each source represents a means to select a value from dirty object.\n * Allows:\n *  - dot-separated (`.`) string, corresponding to path to value in dirty\n *    object\n *  - function(dirtyObj) -> (cleanValue | undefined)\n *\n * The optional `transform` parameter standardizes value regardless of source,\n * for purposes of ensuring data type and/or string schemas.\n */\n\n// helper that ensures abi's do not contain function signatures\nconst sanitizedValue = dirtyValueArray => {\n  let sanitizedValueArray = [];\n  dirtyValueArray.forEach(item => {\n    let sanitizedItem = Object.assign({}, item);\n    delete sanitizedItem.signature;\n    sanitizedValueArray.push(sanitizedItem);\n  });\n  return sanitizedValueArray;\n};\n\n// filter `signature` property from an event\nconst sanitizeEvent = dirtyEvent =>\n  Object.entries(dirtyEvent).reduce(\n    (acc, [property, value]) =>\n      property === \"signature\"\n        ? acc\n        : Object.assign(acc, { [property]: value }),\n    {}\n  );\n\n// sanitize aggregrate events given a `network-object.spec.json#events` object\nconst sanitizeAllEvents = dirtyEvents =>\n  Object.entries(dirtyEvents).reduce(\n    (acc, [property, event]) =>\n      Object.assign(acc, { [property]: sanitizeEvent(event) }),\n    {}\n  );\n\nvar properties = {\n  contractName: {\n    sources: [\"contractName\", \"contract_name\"]\n  },\n  abi: {\n    sources: [\"abi\", \"interface\"],\n    transform: function (value) {\n      if (typeof value === \"string\") {\n        try {\n          value = JSON.parse(value);\n        } catch (_) {\n          value = undefined;\n        }\n      }\n      if (Array.isArray(value)) {\n        return sanitizedValue(value);\n      }\n      return value;\n    }\n  },\n  metadata: {\n    sources: [\"metadata\"]\n  },\n  bytecode: {\n    sources: [\"bytecode\", \"binary\", \"unlinked_binary\", \"evm.bytecode.object\"],\n    transform: function (value) {\n      if (value && value.indexOf(\"0x\") !== 0) {\n        value = \"0x\" + value;\n      }\n      return value;\n    }\n  },\n  deployedBytecode: {\n    sources: [\n      \"deployedBytecode\",\n      \"runtimeBytecode\",\n      \"evm.deployedBytecode.object\"\n    ],\n    transform: function (value) {\n      if (value && value.indexOf(\"0x\") !== 0) {\n        value = \"0x\" + value;\n      }\n      return value;\n    }\n  },\n  immutableReferences: {},\n  generatedSources: {},\n  deployedGeneratedSources: {},\n  sourceMap: {\n    transform: function (value) {\n      if (typeof value === \"string\") {\n        try {\n          return JSON.parse(value);\n        } catch (_) {\n          return value;\n        }\n      } else {\n        return value;\n      }\n    },\n    sources: [\"sourceMap\", \"srcmap\", \"evm.bytecode.sourceMap\"]\n  },\n  deployedSourceMap: {\n    transform: function (value) {\n      if (typeof value === \"string\") {\n        try {\n          return JSON.parse(value);\n        } catch (_) {\n          return value;\n        }\n      } else {\n        return value;\n      }\n    },\n    sources: [\n      \"deployedSourceMap\",\n      \"srcmapRuntime\",\n      \"evm.deployedBytecode.sourceMap\"\n    ]\n  },\n  source: {},\n  sourcePath: {},\n  ast: {},\n  legacyAST: {\n    transform: function (value, obj) {\n      if (value) {\n        return value;\n      } else {\n        return obj.ast;\n      }\n    }\n  },\n  compiler: {},\n  networks: {\n    /**\n     * Normalize a networks object. Currently this makes sure `events` are\n     * always sanitized and `links` is extracted when copying from\n     * a TruffleContract context object.\n     *\n     * @param {object} value - the target object\n     * @param {object | TruffleContract} obj - the context, or source object.\n     * @return {object} The normalized Network object\n     */\n    transform: function (value = {}, obj) {\n      // Sanitize value's events for known networks\n      Object.keys(value).forEach(networkId => {\n        if (value[networkId].events) {\n          value[networkId].events = sanitizeAllEvents(value[networkId].events);\n        }\n      });\n\n      // Set and sanitize the current networks property from the\n      // TruffleContract. Note: obj is a TruffleContract if it has\n      // `network_id` attribute\n      const networkId = obj.network_id;\n      if (networkId && value.hasOwnProperty(networkId)) {\n        value[networkId].links = obj.links;\n        value[networkId].events = sanitizeAllEvents(obj.events);\n      }\n\n      return value;\n    }\n  },\n  schemaVersion: {\n    sources: [\"schemaVersion\", \"schema_version\"]\n  },\n  updatedAt: {\n    sources: [\"updatedAt\", \"updated_at\"],\n    transform: function (value) {\n      if (typeof value === \"number\") {\n        value = new Date(value).toISOString();\n      }\n      return value;\n    }\n  },\n  networkType: {},\n  devdoc: {},\n  userdoc: {},\n  db: {}\n};\n\n/**\n * Construct a getter for a given key, possibly applying some post-retrieve\n * transformation on the resulting value.\n *\n * @return {Function} Accepting dirty object and returning value || undefined\n */\nfunction getter(key, transform) {\n  if (transform === undefined) {\n    transform = function (x) {\n      return x;\n    };\n  }\n\n  return function (obj) {\n    try {\n      return transform(obj[key]);\n    } catch (_) {\n      return undefined;\n    }\n  };\n}\n\n/**\n * Chains together a series of function(obj) -> value, passing resulting\n * returned value to next function in chain.\n *\n * Accepts any number of functions passed as arguments\n * @return {Function} Accepting initial object, returning end-of-chain value\n *\n * Assumes all intermediary values to be objects, with well-formed sequence\n * of operations.\n */\nfunction chain() {\n  var getters = Array.prototype.slice.call(arguments);\n  return function (obj) {\n    return getters.reduce(function (cur, get) {\n      return get(cur);\n    }, obj);\n  };\n}\n\n// Schema module\n//\n\nvar TruffleContractSchema = {\n  // Return a promise to validate a contract object\n  // - Resolves as validated `contractObj`\n  // - Rejects with list of errors from schema validator\n  validate: function (contractObj) {\n    var ajv = new Ajv({ verbose: true });\n    ajv.addSchema(abiSchema);\n    ajv.addSchema(networkObjectSchema);\n    ajv.addSchema(contractObjectSchema);\n    if (ajv.validate(\"contract-object.spec.json\", contractObj)) {\n      return contractObj;\n    } else {\n      const message = `Schema validation failed. Errors:\\n\\n${ajv.errors\n        .map(\n          ({\n            keyword,\n            dataPath,\n            schemaPath,\n            params,\n            message,\n            data,\n            parentSchema\n          }) =>\n            util.format(\n              \"%s (%s):\\n%s\\n\",\n              message,\n              keyword,\n              util.inspect(\n                {\n                  dataPath,\n                  schemaPath,\n                  params,\n                  data,\n                  parentSchema\n                },\n                { depth: 5 }\n              )\n            )\n        )\n        .join(\"\\n\")}`;\n      const error = new Error(message);\n      error.errors = ajv.errors;\n      throw error;\n    }\n  },\n\n  // accepts as argument anything that can be turned into a contract object\n  // returns a contract object\n  normalize: function (objDirty, options) {\n    options = options || {};\n    var normalized = {};\n\n    // iterate over each property\n    Object.keys(properties).forEach(function (key) {\n      var property = properties[key];\n      var value; // normalized value || undefined\n\n      // either used the defined sources or assume the key will only ever be\n      // listed as its canonical name (itself)\n      var sources = property.sources || [key];\n\n      // iterate over sources until value is defined or end of list met\n      for (var i = 0; value === undefined && i < sources.length; i++) {\n        var source = sources[i];\n        // string refers to path to value in objDirty, split and chain\n        // getters\n        if (typeof source === \"string\") {\n          var traversals = source.split(\".\").map(function (k) {\n            return getter(k);\n          });\n          source = chain.apply(null, traversals);\n        }\n\n        // source should be a function that takes the objDirty and returns\n        // value or undefined\n        value = source(objDirty);\n      }\n\n      // run source-agnostic transform on value\n      // (e.g. make sure bytecode begins 0x)\n      if (property.transform) {\n        value = property.transform(value, objDirty);\n      }\n\n      // add resulting (possibly undefined) to normalized obj\n      normalized[key] = value;\n    });\n\n    // Copy x- options\n    Object.keys(objDirty).forEach(function (key) {\n      if (key.indexOf(\"x-\") === 0) {\n        normalized[key] = getter(key)(objDirty);\n      }\n    });\n\n    // update schema version\n    normalized.schemaVersion = pkgVersion;\n\n    if (options.validate) {\n      this.validate(normalized);\n    }\n\n    return normalized;\n  }\n};\n\nmodule.exports = TruffleContractSchema;\n"]},"metadata":{},"sourceType":"script"}