{"ast":null,"code":"import \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/select/style\";\nimport _Select from \"antd/es/select\";\nvar _jsxFileName = \"/home/kzj/project/finalize/final/code/react_code/src/components/Auction/HighestBidderInfo/index.jsx\";\nimport React, { Component } from \"react\";\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\"; //接入web3\n\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport openNotification from \"../../Notification\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = _Select;\n\nclass HighestBidderInfo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      web3: null,\n      truffleContract: null,\n      highestBidderInfo: \"\"\n    };\n\n    this.componentDidMount = async () => {\n      console.log(\"生成Bid模块\");\n\n      if (await this.getBlockChainInfo()) {\n        console.log(\"获得合约信息成功\");\n        this.getInfoFromBlockchain();\n      } else {\n        console.log(\"获得合约信息失败\");\n      }\n    };\n\n    this.getBlockChainInfo = async () => {\n      try {\n        const web3 = await getWeb3();\n        const EcommerceStore = await getEcommerceStore(web3);\n        this.setState({\n          web3: web3,\n          truffleContract: EcommerceStore\n        });\n        console.log(\"Bid 的 web3 : \");\n        console.dir(web3);\n        console.log(\"Bid 的 EcommerceStore : \");\n        console.dir(this.state.truffleContract);\n        return true;\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`[ERROR]接入智能合约失败.`);\n        console.error(error);\n        return false;\n      }\n    };\n\n    this.getInfoFromBlockchain = () => {\n      let blockChainID = this.props.dataArray[0].ID;\n      console.log(\"竞拍商品ID : \" + blockChainID);\n      let that = this;\n      this.state.truffleContract.deployed().then(async i => {\n        console.log(\"进入 this.state.truffleContract.deployed() 的回调函数\"); //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n        //即时获取当前地址，用该地址发交易\n\n        let currentAccount = await that.state.web3.eth.getAccounts();\n\n        _message.info(\"交易发起地址为: \" + currentAccount, 2);\n\n        console.log(\"交易发起地址为: \" + currentAccount);\n\n        try {\n          //调用合约的 highestBidderInfo 方法\n          await i.highestBidderInfo(parseInt(blockChainID)).then(info => {\n            console.log(\"成功调用合约的highestBidderInfo方法，返回 : \");\n            console.dir(info);\n\n            if (info[2].toLocaleString() == '0') {\n              $(\"#product-status\").html(\"Auction has ended. No bids were revealed\");\n            } else {\n              $(\"#product-status\").html(\"Auction has ended. Product sold to \" + info[0] + \" for \" + displayPrice(info[2]) + \"The money is in the escrow. Two of the three participants (Buyer, Seller and Arbiter) have to \" + \"either release the funds to seller or refund the money to the buyer\");\n            } //关闭侧边栏\n\n\n            openNotification(\"竞价提交成功\", \"您的报价: \" + values.BidAmount + values.PriceUnit + \", 您的押金: \" + values.SendAmount + values.PriceUnit + \", 距离揭示报价 \" + this.props.dataArray[0].processTime, 'bottomLeft');\n          });\n        } catch (err) {\n          _message.error(\"向链上提交竞价信息失败\", 2);\n\n          console.log(\"调用合约的highestBidderInfo方法失败 \" + err);\n          return;\n        }\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.props.visible ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u6700\\u9AD8\\u7ADE\\u4EF7\\u4EBA\\u4FE1\\u606F\\u6A21\\u5757\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.highestBidderInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default HighestBidderInfo;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/src/components/Auction/HighestBidderInfo/index.jsx"],"names":["React","Component","UserOutlined","LaptopOutlined","FileSearchOutlined","HomeOutlined","EyeTwoTone","EyeInvisibleOutlined","RocketOutlined","cookie","getWeb3","getEcommerceStore","openNotification","Option","HighestBidderInfo","state","web3","truffleContract","highestBidderInfo","componentDidMount","console","log","getBlockChainInfo","getInfoFromBlockchain","EcommerceStore","setState","dir","error","alert","blockChainID","props","dataArray","ID","that","deployed","then","i","currentAccount","eth","getAccounts","info","parseInt","toLocaleString","$","html","displayPrice","values","BidAmount","PriceUnit","SendAmount","processTime","err","render","visible"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport { Menu, Layout, message, Drawer, Space, Button, Divider, Form, InputNumber, Input, Select } from 'antd';\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\";\n//接入web3\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport openNotification from \"../../Notification\";\n\nconst { Option } = Select;\n\n\nclass HighestBidderInfo extends Component {\n\n    state = {\n        web3 : null,\n        truffleContract : null,\n        highestBidderInfo : \"\"\n    }\n\n    componentDidMount = async () => {\n        console.log(\"生成Bid模块\");\n        if(await this.getBlockChainInfo()){\n            console.log(\"获得合约信息成功\");\n            this.getInfoFromBlockchain();\n        }else{\n            console.log(\"获得合约信息失败\");\n        }  \n    }\n\n   getBlockChainInfo = async() => {\n        try{\n            const web3 = await getWeb3();\n            const EcommerceStore = await getEcommerceStore(web3);\n            this.setState({\n                web3: web3,\n                truffleContract:EcommerceStore\n            });\n            console.log(\"Bid 的 web3 : \");\n            console.dir(web3);\n            console.log(\"Bid 的 EcommerceStore : \");\n            console.dir(this.state.truffleContract);\n            return true;\n        }catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n              `[ERROR]接入智能合约失败.`,\n            );\n            console.error(error);\n            return false;\n          }\n        \n    }\n\n    getInfoFromBlockchain = () => {\n        let blockChainID = this.props.dataArray[0].ID;\n        console.log(\"竞拍商品ID : \" + blockChainID);\n\n        let that = this;\n        this.state.truffleContract.deployed().then(async (i) => {\n            console.log(\"进入 this.state.truffleContract.deployed() 的回调函数\");\n            //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n            //即时获取当前地址，用该地址发交易\n            let currentAccount = await that.state.web3.eth.getAccounts();\n            message.info(\"交易发起地址为: \"+currentAccount, 2);\n            console.log(\"交易发起地址为: \"+currentAccount);\n\n            try{\n                //调用合约的 highestBidderInfo 方法\n                await i.highestBidderInfo(parseInt(blockChainID)).then(info => {\n                    console.log(\"成功调用合约的highestBidderInfo方法，返回 : \");\n                    console.dir(info);\n                    if (info[2].toLocaleString() == '0') {\n                        $(\"#product-status\").html(\"Auction has ended. No bids were revealed\");\n                    } else {\n                        $(\"#product-status\").html(\"Auction has ended. Product sold to \" + info[0] + \" for \" + displayPrice(info[2]) +\n                            \"The money is in the escrow. Two of the three participants (Buyer, Seller and Arbiter) have to \" +\n                            \"either release the funds to seller or refund the money to the buyer\");\n                    }\n                    //关闭侧边栏\n                    openNotification(\"竞价提交成功\",\n                                    \"您的报价: \" + values.BidAmount + values.PriceUnit + \", 您的押金: \" + values.SendAmount + values.PriceUnit + \", 距离揭示报价 \" + this.props.dataArray[0].processTime ,\n                                    'bottomLeft');\n                });\n            }catch(err) {\n                message.error(\"向链上提交竞价信息失败\",2);\n                console.log(\"调用合约的highestBidderInfo方法失败 \" + err);\n                return;\n            }  \n        });\n    }\n   \n\n \n    \n    render () {\n        return (\n\n\n            <div>\n                {\n                this.props.visible?(\n                    <div>\n                        <p>最高竞价人信息模块</p>\n          <p>{this.state.highestBidderInfo}</p>\n                        </div>\n                    ):null\n                }\n            </div>\n        );\n    }\n}\n\nexport default HighestBidderInfo;\n"]},"metadata":{},"sourceType":"module"}