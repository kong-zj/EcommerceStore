{"ast":null,"code":"var Reason = require('./reason');\n\nvar handlers = require('./handlers');\n\nvar override = {\n  timeoutMessage: 'not mined within',\n  // Substring of timeout err fired by web3\n  defaultMaxBlocks: 50,\n  // Max # of blocks web3 will wait for a tx\n  pollingInterval: 1000,\n\n  /**\n   * Attempts to extract receipt object from Web3 error message\n   * @param  {Object} message       web3 error\n   * @return {Object|undefined} receipt\n   */\n  extractReceipt(message) {\n    const hasReceipt = message && message.includes('{');\n    message.includes('}');\n\n    if (hasReceipt) {\n      const receiptString = '{' + message.split('{')[1].trim();\n\n      try {\n        return JSON.parse(receiptString);\n      } catch (err) {// ignore\n      }\n    }\n  },\n\n  /**\n   * Fired after web3 ceases to support subscriptions if user has specified\n   * a higher block wait time than web3's 50 blocks limit. Opens a subscription to listen\n   * for new blocks and begins evaluating whether block height has reached the user\n   * defined timeout threshhold. Resolves either a contract instance or a transaction receipt.\n   *\n   * @param  {Object} context execution state\n   * @param  {Object} err     error\n   */\n  start: async function (context, web3Error) {\n    var constructor = this;\n    var blockNumber = null;\n    var currentBlock = override.defaultMaxBlocks;\n    var maxBlocks = constructor.timeoutBlocks;\n    var timedOut = web3Error.message && web3Error.message.includes(override.timeoutMessage);\n    var shouldWait = maxBlocks > currentBlock; // Reject after attempting to get reason string if we shouldn't be waiting.\n\n    if (!timedOut || !shouldWait) {\n      // We might have been routed here in web3 >= beta.34 by their own status check\n      // error. We want to extract the receipt, emit a receipt event\n      // and reject it ourselves.\n      var receipt = override.extractReceipt(web3Error.message);\n\n      if (receipt) {\n        await handlers.receipt(context, receipt);\n        return;\n      } // This will run if there's a reason and no status field\n      // e.g: revert with reason ganache-cli --vmErrorsOnRPCResponse=true\n\n\n      var reason = await Reason.get(context.params, constructor.web3);\n\n      if (reason) {\n        web3Error.reason = reason;\n        web3Error.message += ` -- Reason given: ${reason}.`;\n      }\n\n      return context.promiEvent.reject(web3Error);\n    } // This will run every block from now until contract.timeoutBlocks\n\n\n    var listener = function (pollID) {\n      var self = this;\n      currentBlock++;\n\n      if (currentBlock > constructor.timeoutBlocks) {\n        clearInterval(pollID);\n        return;\n      }\n\n      constructor.web3.eth.getTransactionReceipt(context.transactionHash).then(result => {\n        if (!result) return;\n        result.contractAddress ? constructor.at(result.contractAddress).then(context.promiEvent.resolve).catch(context.promiEvent.reject) : constructor.promiEvent.resolve(result);\n      }).catch(err => {\n        clearInterval(pollID);\n        context.promiEvent.reject(err);\n      });\n    }; // Start polling\n\n\n    let currentPollingBlock = await constructor.web3.eth.getBlockNumber();\n    const pollID = setInterval(async () => {\n      const newBlock = await constructor.web3.eth.getBlockNumber();\n\n      if (newBlock > currentPollingBlock) {\n        currentPollingBlock = newBlock;\n        listener(pollID);\n      }\n    }, override.pollingInterval);\n  }\n};\nmodule.exports = override;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/truffle-contract/lib/override.js"],"names":["Reason","require","handlers","override","timeoutMessage","defaultMaxBlocks","pollingInterval","extractReceipt","message","hasReceipt","includes","receiptString","split","trim","JSON","parse","err","start","context","web3Error","constructor","blockNumber","currentBlock","maxBlocks","timeoutBlocks","timedOut","shouldWait","receipt","reason","get","params","web3","promiEvent","reject","listener","pollID","self","clearInterval","eth","getTransactionReceipt","transactionHash","then","result","contractAddress","at","resolve","catch","currentPollingBlock","getBlockNumber","setInterval","newBlock","module","exports"],"mappings":"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","sourcesContent":["var Reason = require('./reason');\nvar handlers = require('./handlers');\n\nvar override = {\n\n  timeoutMessage: 'not mined within', // Substring of timeout err fired by web3\n  defaultMaxBlocks: 50,               // Max # of blocks web3 will wait for a tx\n  pollingInterval: 1000,\n\n  /**\n   * Attempts to extract receipt object from Web3 error message\n   * @param  {Object} message       web3 error\n   * @return {Object|undefined} receipt\n   */\n  extractReceipt(message){\n    const hasReceipt = message &&\n                       message.includes('{');\n                       message.includes('}');\n\n    if (hasReceipt){\n      const receiptString =  '{' + message.split('{')[1].trim();\n      try {\n        return JSON.parse(receiptString);\n      } catch (err){\n        // ignore\n      }\n    }\n  },\n\n  /**\n   * Fired after web3 ceases to support subscriptions if user has specified\n   * a higher block wait time than web3's 50 blocks limit. Opens a subscription to listen\n   * for new blocks and begins evaluating whether block height has reached the user\n   * defined timeout threshhold. Resolves either a contract instance or a transaction receipt.\n   *\n   * @param  {Object} context execution state\n   * @param  {Object} err     error\n   */\n  start: async function(context, web3Error){\n    var constructor = this;\n    var blockNumber = null;\n    var currentBlock = override.defaultMaxBlocks;\n    var maxBlocks = constructor.timeoutBlocks;\n\n    var timedOut = web3Error.message && web3Error.message.includes(override.timeoutMessage);\n    var shouldWait = maxBlocks > currentBlock;\n\n    // Reject after attempting to get reason string if we shouldn't be waiting.\n    if (!timedOut || !shouldWait){\n\n      // We might have been routed here in web3 >= beta.34 by their own status check\n      // error. We want to extract the receipt, emit a receipt event\n      // and reject it ourselves.\n      var receipt = override.extractReceipt(web3Error.message);\n      if (receipt){\n        await handlers.receipt(context, receipt);\n        return;\n      }\n\n      // This will run if there's a reason and no status field\n      // e.g: revert with reason ganache-cli --vmErrorsOnRPCResponse=true\n      var reason = await Reason.get(context.params, constructor.web3);\n      if (reason) {\n        web3Error.reason = reason;\n        web3Error.message += ` -- Reason given: ${reason}.`;\n      }\n\n      return context.promiEvent.reject(web3Error);\n    }\n\n    // This will run every block from now until contract.timeoutBlocks\n    var listener = function(pollID){\n      var self = this;\n      currentBlock++;\n\n      if (currentBlock > constructor.timeoutBlocks){\n        clearInterval(pollID);\n        return;\n      }\n\n      constructor.web3.eth.getTransactionReceipt(context.transactionHash)\n        .then(result => {\n          if (!result) return;\n\n          (result.contractAddress)\n            ? constructor\n                .at(result.contractAddress)\n                .then(context.promiEvent.resolve)\n                .catch(context.promiEvent.reject)\n\n            : constructor.promiEvent.resolve(result);\n\n        })\n        .catch(err => {\n          clearInterval(pollID);\n          context.promiEvent.reject(err);\n        });\n    };\n\n    // Start polling\n    let currentPollingBlock = await constructor.web3.eth.getBlockNumber();\n\n    const pollID = setInterval(async() => {\n      const newBlock = await constructor.web3.eth.getBlockNumber();\n\n      if(newBlock > currentPollingBlock){\n        currentPollingBlock = newBlock;\n        listener(pollID);\n      }\n    }, override.pollingInterval);\n  },\n};\n\nmodule.exports = override;\n"]},"metadata":{},"sourceType":"script"}