{"ast":null,"code":"import { DEFAULT_COMMON_STYLE } from '../graphic/Displayable';\nimport PathProxy from '../core/PathProxy';\nimport { createOrUpdateImage, isImageReady } from '../graphic/helper/image';\nimport { getCanvasGradient, isClipPathChanged } from './helper';\nimport Path from '../graphic/Path';\nimport ZRImage from '../graphic/Image';\nimport TSpan from '../graphic/TSpan';\nimport { DEFAULT_FONT } from '../contain/text';\nimport { map } from '../core/util';\nimport { normalizeLineDash } from '../graphic/helper/dashStyle';\nimport Element from '../Element';\nimport IncrementalDisplayable from '../graphic/IncrementalDisplayable';\nvar pathProxyForDraw = new PathProxy(true);\n\nfunction styleHasStroke(style) {\n  var stroke = style.stroke;\n  return !(stroke == null || stroke === 'none' || !(style.lineWidth > 0));\n}\n\nfunction styleHasFill(style) {\n  var fill = style.fill;\n  return fill != null && fill !== 'none';\n}\n\nfunction doFillPath(ctx, style) {\n  if (style.fillOpacity != null && style.fillOpacity !== 1) {\n    var originalGlobalAlpha = ctx.globalAlpha;\n    ctx.globalAlpha = style.fillOpacity * style.opacity;\n    ctx.fill();\n    ctx.globalAlpha = originalGlobalAlpha;\n  } else {\n    ctx.fill();\n  }\n}\n\nfunction doStrokePath(ctx, style) {\n  if (style.strokeOpacity != null && style.strokeOpacity !== 1) {\n    var originalGlobalAlpha = ctx.globalAlpha;\n    ctx.globalAlpha = style.strokeOpacity * style.opacity;\n    ctx.stroke();\n    ctx.globalAlpha = originalGlobalAlpha;\n  } else {\n    ctx.stroke();\n  }\n}\n\nexport function createCanvasPattern(ctx, pattern, el) {\n  var image = createOrUpdateImage(pattern.image, pattern.__image, el);\n\n  if (isImageReady(image)) {\n    var canvasPattern = ctx.createPattern(image, pattern.repeat || 'repeat');\n\n    if (typeof DOMMatrix === 'function') {\n      var matrix = new DOMMatrix();\n      matrix.rotateSelf(0, 0, (pattern.rotation || 0) / Math.PI * 180);\n      matrix.scaleSelf(pattern.scaleX || 1, pattern.scaleY || 1);\n      matrix.translateSelf(pattern.x || 0, pattern.y || 0);\n      canvasPattern.setTransform(matrix);\n    }\n\n    return canvasPattern;\n  }\n}\n\nfunction brushPath(ctx, el, style, inBatch) {\n  var hasStroke = styleHasStroke(style);\n  var hasFill = styleHasFill(style);\n  var strokePercent = style.strokePercent;\n  var strokePart = strokePercent < 1;\n  var firstDraw = !el.path;\n\n  if ((!el.silent || strokePart) && firstDraw) {\n    el.createPathProxy();\n  }\n\n  var path = el.path || pathProxyForDraw;\n\n  if (!inBatch) {\n    var fill = style.fill;\n    var stroke = style.stroke;\n    var hasFillGradient = hasFill && !!fill.colorStops;\n    var hasStrokeGradient = hasStroke && !!stroke.colorStops;\n    var hasFillPattern = hasFill && !!fill.image;\n    var hasStrokePattern = hasStroke && !!stroke.image;\n    var fillGradient = void 0;\n    var strokeGradient = void 0;\n    var fillPattern = void 0;\n    var strokePattern = void 0;\n    var rect = void 0;\n\n    if (hasFillGradient || hasStrokeGradient) {\n      rect = el.getBoundingRect();\n    }\n\n    if (hasFillGradient) {\n      fillGradient = el.__dirty ? getCanvasGradient(ctx, fill, rect) : el.__canvasFillGradient;\n      el.__canvasFillGradient = fillGradient;\n    }\n\n    if (hasStrokeGradient) {\n      strokeGradient = el.__dirty ? getCanvasGradient(ctx, stroke, rect) : el.__canvasStrokeGradient;\n      el.__canvasStrokeGradient = strokeGradient;\n    }\n\n    if (hasFillPattern) {\n      fillPattern = el.__dirty || !el.__canvasFillPattern ? createCanvasPattern(ctx, fill, el) : el.__canvasFillPattern;\n      el.__canvasFillPattern = fillPattern;\n    }\n\n    if (hasStrokePattern) {\n      strokePattern = el.__dirty || !el.__canvasStrokePattern ? createCanvasPattern(ctx, stroke, el) : el.__canvasStrokePattern;\n      el.__canvasStrokePattern = fillPattern;\n    }\n\n    if (hasFillGradient) {\n      ctx.fillStyle = fillGradient;\n    } else if (hasFillPattern) {\n      if (fillPattern) {\n        ctx.fillStyle = fillPattern;\n      } else {\n        hasFill = false;\n      }\n    }\n\n    if (hasStrokeGradient) {\n      ctx.strokeStyle = strokeGradient;\n    } else if (hasStrokePattern) {\n      if (strokePattern) {\n        ctx.strokeStyle = strokePattern;\n      } else {\n        hasStroke = false;\n      }\n    }\n  }\n\n  var lineDash = style.lineDash && style.lineWidth > 0 && normalizeLineDash(style.lineDash, style.lineWidth);\n  var lineDashOffset = style.lineDashOffset;\n  var ctxLineDash = !!ctx.setLineDash;\n  var scale = el.getGlobalScale();\n  path.setScale(scale[0], scale[1], el.segmentIgnoreThreshold);\n\n  if (lineDash) {\n    var lineScale_1 = style.strokeNoScale && el.getLineScale ? el.getLineScale() : 1;\n\n    if (lineScale_1 && lineScale_1 !== 1) {\n      lineDash = map(lineDash, function (rawVal) {\n        return rawVal / lineScale_1;\n      });\n      lineDashOffset /= lineScale_1;\n    }\n  }\n\n  var needsRebuild = true;\n\n  if (firstDraw || el.__dirty & Path.SHAPE_CHANGED_BIT || lineDash && !ctxLineDash && hasStroke) {\n    path.setDPR(ctx.dpr);\n\n    if (strokePart) {\n      path.setContext(null);\n    } else {\n      path.setContext(ctx);\n      needsRebuild = false;\n    }\n\n    path.reset();\n\n    if (lineDash && !ctxLineDash) {\n      path.setLineDash(lineDash);\n      path.setLineDashOffset(lineDashOffset);\n    }\n\n    el.buildPath(path, el.shape, inBatch);\n    path.toStatic();\n    el.pathUpdated();\n  }\n\n  if (needsRebuild) {\n    path.rebuildPath(ctx, strokePart ? strokePercent : 1);\n  }\n\n  if (lineDash && ctxLineDash) {\n    ctx.setLineDash(lineDash);\n    ctx.lineDashOffset = lineDashOffset;\n  }\n\n  if (!inBatch) {\n    if (style.strokeFirst) {\n      if (hasStroke) {\n        doStrokePath(ctx, style);\n      }\n\n      if (hasFill) {\n        doFillPath(ctx, style);\n      }\n    } else {\n      if (hasFill) {\n        doFillPath(ctx, style);\n      }\n\n      if (hasStroke) {\n        doStrokePath(ctx, style);\n      }\n    }\n  }\n\n  if (lineDash && ctxLineDash) {\n    ctx.setLineDash([]);\n  }\n}\n\nfunction brushImage(ctx, el, style) {\n  var image = el.__image = createOrUpdateImage(style.image, el.__image, el, el.onload);\n\n  if (!image || !isImageReady(image)) {\n    return;\n  }\n\n  var x = style.x || 0;\n  var y = style.y || 0;\n  var width = el.getWidth();\n  var height = el.getHeight();\n  var aspect = image.width / image.height;\n\n  if (width == null && height != null) {\n    width = height * aspect;\n  } else if (height == null && width != null) {\n    height = width / aspect;\n  } else if (width == null && height == null) {\n    width = image.width;\n    height = image.height;\n  }\n\n  if (style.sWidth && style.sHeight) {\n    var sx = style.sx || 0;\n    var sy = style.sy || 0;\n    ctx.drawImage(image, sx, sy, style.sWidth, style.sHeight, x, y, width, height);\n  } else if (style.sx && style.sy) {\n    var sx = style.sx;\n    var sy = style.sy;\n    var sWidth = width - sx;\n    var sHeight = height - sy;\n    ctx.drawImage(image, sx, sy, sWidth, sHeight, x, y, width, height);\n  } else {\n    ctx.drawImage(image, x, y, width, height);\n  }\n}\n\nfunction brushText(ctx, el, style) {\n  var text = style.text;\n  text != null && (text += '');\n\n  if (text) {\n    ctx.font = style.font || DEFAULT_FONT;\n    ctx.textAlign = style.textAlign;\n    ctx.textBaseline = style.textBaseline;\n    var hasLineDash = void 0;\n\n    if (ctx.setLineDash) {\n      var lineDash = style.lineDash && style.lineWidth > 0 && normalizeLineDash(style.lineDash, style.lineWidth);\n      var lineDashOffset = style.lineDashOffset;\n\n      if (lineDash) {\n        var lineScale_2 = style.strokeNoScale && el.getLineScale ? el.getLineScale() : 1;\n\n        if (lineScale_2 && lineScale_2 !== 1) {\n          lineDash = map(lineDash, function (rawVal) {\n            return rawVal / lineScale_2;\n          });\n          lineDashOffset /= lineScale_2;\n        }\n\n        ctx.setLineDash(lineDash);\n        ctx.lineDashOffset = lineDashOffset;\n        hasLineDash = true;\n      }\n    }\n\n    if (style.strokeFirst) {\n      if (styleHasStroke(style)) {\n        ctx.strokeText(text, style.x, style.y);\n      }\n\n      if (styleHasFill(style)) {\n        ctx.fillText(text, style.x, style.y);\n      }\n    } else {\n      if (styleHasFill(style)) {\n        ctx.fillText(text, style.x, style.y);\n      }\n\n      if (styleHasStroke(style)) {\n        ctx.strokeText(text, style.x, style.y);\n      }\n    }\n\n    if (hasLineDash) {\n      ctx.setLineDash([]);\n    }\n  }\n}\n\nvar SHADOW_NUMBER_PROPS = ['shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];\nvar STROKE_PROPS = [['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]];\n\nfunction bindCommonProps(ctx, style, prevStyle, forceSetAll, scope) {\n  var styleChanged = false;\n\n  if (!forceSetAll) {\n    prevStyle = prevStyle || {};\n\n    if (style === prevStyle) {\n      return false;\n    }\n  }\n\n  if (forceSetAll || style.opacity !== prevStyle.opacity) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n\n    ctx.globalAlpha = style.opacity == null ? DEFAULT_COMMON_STYLE.opacity : style.opacity;\n  }\n\n  if (forceSetAll || style.blend !== prevStyle.blend) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n\n    ctx.globalCompositeOperation = style.blend || DEFAULT_COMMON_STYLE.blend;\n  }\n\n  for (var i = 0; i < SHADOW_NUMBER_PROPS.length; i++) {\n    var propName = SHADOW_NUMBER_PROPS[i];\n\n    if (forceSetAll || style[propName] !== prevStyle[propName]) {\n      if (!styleChanged) {\n        flushPathDrawn(ctx, scope);\n        styleChanged = true;\n      }\n\n      ctx[propName] = ctx.dpr * (style[propName] || 0);\n    }\n  }\n\n  if (forceSetAll || style.shadowColor !== prevStyle.shadowColor) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n\n    ctx.shadowColor = style.shadowColor || DEFAULT_COMMON_STYLE.shadowColor;\n  }\n\n  return styleChanged;\n}\n\nfunction bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetAll, scope) {\n  var style = getStyle(el, scope.inHover);\n  var prevStyle = forceSetAll ? null : prevEl && getStyle(prevEl, scope.inHover) || {};\n\n  if (style === prevStyle) {\n    return false;\n  }\n\n  var styleChanged = bindCommonProps(ctx, style, prevStyle, forceSetAll, scope);\n\n  if (forceSetAll || style.fill !== prevStyle.fill) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n\n    ctx.fillStyle = style.fill;\n  }\n\n  if (forceSetAll || style.stroke !== prevStyle.stroke) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n\n    ctx.strokeStyle = style.stroke;\n  }\n\n  if (forceSetAll || style.opacity !== prevStyle.opacity) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n\n    ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;\n  }\n\n  if (el.hasStroke()) {\n    var lineWidth = style.lineWidth;\n    var newLineWidth = lineWidth / (style.strokeNoScale && el && el.getLineScale ? el.getLineScale() : 1);\n\n    if (ctx.lineWidth !== newLineWidth) {\n      if (!styleChanged) {\n        flushPathDrawn(ctx, scope);\n        styleChanged = true;\n      }\n\n      ctx.lineWidth = newLineWidth;\n    }\n  }\n\n  for (var i = 0; i < STROKE_PROPS.length; i++) {\n    var prop = STROKE_PROPS[i];\n    var propName = prop[0];\n\n    if (forceSetAll || style[propName] !== prevStyle[propName]) {\n      if (!styleChanged) {\n        flushPathDrawn(ctx, scope);\n        styleChanged = true;\n      }\n\n      ctx[propName] = style[propName] || prop[1];\n    }\n  }\n\n  return styleChanged;\n}\n\nfunction bindImageStyle(ctx, el, prevEl, forceSetAll, scope) {\n  return bindCommonProps(ctx, getStyle(el, scope.inHover), prevEl && getStyle(prevEl, scope.inHover), forceSetAll, scope);\n}\n\nfunction setContextTransform(ctx, el) {\n  var m = el.transform;\n  var dpr = ctx.dpr || 1;\n\n  if (m) {\n    ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);\n  } else {\n    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n  }\n}\n\nfunction updateClipStatus(clipPaths, ctx, scope) {\n  var allClipped = false;\n\n  for (var i = 0; i < clipPaths.length; i++) {\n    var clipPath = clipPaths[i];\n    allClipped = allClipped || clipPath.isZeroArea();\n    setContextTransform(ctx, clipPath);\n    ctx.beginPath();\n    clipPath.buildPath(ctx, clipPath.shape);\n    ctx.clip();\n  }\n\n  scope.allClipped = allClipped;\n}\n\nfunction isTransformChanged(m0, m1) {\n  if (m0 && m1) {\n    return m0[0] !== m1[0] || m0[1] !== m1[1] || m0[2] !== m1[2] || m0[3] !== m1[3] || m0[4] !== m1[4] || m0[5] !== m1[5];\n  } else if (!m0 && !m1) {\n    return false;\n  }\n\n  return true;\n}\n\nvar DRAW_TYPE_PATH = 1;\nvar DRAW_TYPE_IMAGE = 2;\nvar DRAW_TYPE_TEXT = 3;\nvar DRAW_TYPE_INCREMENTAL = 4;\n\nfunction canPathBatch(style) {\n  var hasFill = styleHasFill(style);\n  var hasStroke = styleHasStroke(style);\n  return !(style.lineDash || !(+hasFill ^ +hasStroke) || hasFill && typeof style.fill !== 'string' || hasStroke && typeof style.stroke !== 'string' || style.strokePercent < 1 || style.strokeOpacity < 1 || style.fillOpacity < 1);\n}\n\nfunction flushPathDrawn(ctx, scope) {\n  scope.batchFill && ctx.fill();\n  scope.batchStroke && ctx.stroke();\n  scope.batchFill = '';\n  scope.batchStroke = '';\n}\n\nfunction getStyle(el, inHover) {\n  return inHover ? el.__hoverStyle || el.style : el.style;\n}\n\nexport function brushSingle(ctx, el) {\n  brush(ctx, el, {\n    inHover: false,\n    viewWidth: 0,\n    viewHeight: 0\n  }, true);\n}\nexport function brush(ctx, el, scope, isLast) {\n  var m = el.transform;\n\n  if (!el.shouldBePainted(scope.viewWidth, scope.viewHeight, false, false)) {\n    el.__dirty &= ~Element.REDARAW_BIT;\n    el.__isRendered = false;\n    return;\n  }\n\n  var clipPaths = el.__clipPaths;\n  var prevElClipPaths = scope.prevElClipPaths;\n  var forceSetTransform = false;\n  var forceSetStyle = false;\n\n  if (!prevElClipPaths || isClipPathChanged(clipPaths, prevElClipPaths)) {\n    if (prevElClipPaths && prevElClipPaths.length) {\n      flushPathDrawn(ctx, scope);\n      ctx.restore();\n      forceSetStyle = forceSetTransform = true;\n      scope.prevElClipPaths = null;\n      scope.allClipped = false;\n      scope.prevEl = null;\n    }\n\n    if (clipPaths && clipPaths.length) {\n      flushPathDrawn(ctx, scope);\n      ctx.save();\n      updateClipStatus(clipPaths, ctx, scope);\n      forceSetTransform = true;\n    }\n\n    scope.prevElClipPaths = clipPaths;\n  }\n\n  if (scope.allClipped) {\n    el.__isRendered = false;\n    return;\n  }\n\n  el.beforeBrush && el.beforeBrush();\n  el.innerBeforeBrush();\n  var prevEl = scope.prevEl;\n\n  if (!prevEl) {\n    forceSetStyle = forceSetTransform = true;\n  }\n\n  var canBatchPath = el instanceof Path && el.autoBatch && canPathBatch(el.style);\n\n  if (forceSetTransform || isTransformChanged(m, prevEl.transform)) {\n    flushPathDrawn(ctx, scope);\n    setContextTransform(ctx, el);\n  } else if (!canBatchPath) {\n    flushPathDrawn(ctx, scope);\n  }\n\n  var style = getStyle(el, scope.inHover);\n\n  if (el instanceof Path) {\n    if (scope.lastDrawType !== DRAW_TYPE_PATH) {\n      forceSetStyle = true;\n      scope.lastDrawType = DRAW_TYPE_PATH;\n    }\n\n    bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);\n\n    if (!canBatchPath || !scope.batchFill && !scope.batchStroke) {\n      ctx.beginPath();\n    }\n\n    brushPath(ctx, el, style, canBatchPath);\n\n    if (canBatchPath) {\n      scope.batchFill = style.fill || '';\n      scope.batchStroke = style.stroke || '';\n    }\n  } else {\n    if (el instanceof TSpan) {\n      if (scope.lastDrawType !== DRAW_TYPE_TEXT) {\n        forceSetStyle = true;\n        scope.lastDrawType = DRAW_TYPE_TEXT;\n      }\n\n      bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);\n      brushText(ctx, el, style);\n    } else if (el instanceof ZRImage) {\n      if (scope.lastDrawType !== DRAW_TYPE_IMAGE) {\n        forceSetStyle = true;\n        scope.lastDrawType = DRAW_TYPE_IMAGE;\n      }\n\n      bindImageStyle(ctx, el, prevEl, forceSetStyle, scope);\n      brushImage(ctx, el, style);\n    } else if (el instanceof IncrementalDisplayable) {\n      if (scope.lastDrawType !== DRAW_TYPE_INCREMENTAL) {\n        forceSetStyle = true;\n        scope.lastDrawType = DRAW_TYPE_INCREMENTAL;\n      }\n\n      brushIncremental(ctx, el, scope);\n    }\n  }\n\n  if (canBatchPath && isLast) {\n    flushPathDrawn(ctx, scope);\n  }\n\n  el.innerAfterBrush();\n  el.afterBrush && el.afterBrush();\n  scope.prevEl = el;\n  el.__dirty = 0;\n  el.__isRendered = true;\n}\n\nfunction brushIncremental(ctx, el, scope) {\n  var displayables = el.getDisplayables();\n  var temporalDisplayables = el.getTemporalDisplayables();\n  ctx.save();\n  var innerScope = {\n    prevElClipPaths: null,\n    prevEl: null,\n    allClipped: false,\n    viewWidth: scope.viewWidth,\n    viewHeight: scope.viewHeight,\n    inHover: scope.inHover\n  };\n  var i;\n  var len;\n\n  for (i = el.getCursor(), len = displayables.length; i < len; i++) {\n    var displayable = displayables[i];\n    displayable.beforeBrush && displayable.beforeBrush();\n    displayable.innerBeforeBrush();\n    brush(ctx, displayable, innerScope, i === len - 1);\n    displayable.innerAfterBrush();\n    displayable.afterBrush && displayable.afterBrush();\n    innerScope.prevEl = displayable;\n  }\n\n  for (var i_1 = 0, len_1 = temporalDisplayables.length; i_1 < len_1; i_1++) {\n    var displayable = temporalDisplayables[i_1];\n    displayable.beforeBrush && displayable.beforeBrush();\n    displayable.innerBeforeBrush();\n    brush(ctx, displayable, innerScope, i_1 === len_1 - 1);\n    displayable.innerAfterBrush();\n    displayable.afterBrush && displayable.afterBrush();\n    innerScope.prevEl = displayable;\n  }\n\n  el.clearTemporalDisplayables();\n  el.notClear = true;\n  ctx.restore();\n}","map":{"version":3,"sources":["/home/kzj/project/finalize/B-S-/源码/react_code/node_modules/zrender/lib/canvas/graphic.js"],"names":["DEFAULT_COMMON_STYLE","PathProxy","createOrUpdateImage","isImageReady","getCanvasGradient","isClipPathChanged","Path","ZRImage","TSpan","DEFAULT_FONT","map","normalizeLineDash","Element","IncrementalDisplayable","pathProxyForDraw","styleHasStroke","style","stroke","lineWidth","styleHasFill","fill","doFillPath","ctx","fillOpacity","originalGlobalAlpha","globalAlpha","opacity","doStrokePath","strokeOpacity","createCanvasPattern","pattern","el","image","__image","canvasPattern","createPattern","repeat","DOMMatrix","matrix","rotateSelf","rotation","Math","PI","scaleSelf","scaleX","scaleY","translateSelf","x","y","setTransform","brushPath","inBatch","hasStroke","hasFill","strokePercent","strokePart","firstDraw","path","silent","createPathProxy","hasFillGradient","colorStops","hasStrokeGradient","hasFillPattern","hasStrokePattern","fillGradient","strokeGradient","fillPattern","strokePattern","rect","getBoundingRect","__dirty","__canvasFillGradient","__canvasStrokeGradient","__canvasFillPattern","__canvasStrokePattern","fillStyle","strokeStyle","lineDash","lineDashOffset","ctxLineDash","setLineDash","scale","getGlobalScale","setScale","segmentIgnoreThreshold","lineScale_1","strokeNoScale","getLineScale","rawVal","needsRebuild","SHAPE_CHANGED_BIT","setDPR","dpr","setContext","reset","setLineDashOffset","buildPath","shape","toStatic","pathUpdated","rebuildPath","strokeFirst","brushImage","onload","width","getWidth","height","getHeight","aspect","sWidth","sHeight","sx","sy","drawImage","brushText","text","font","textAlign","textBaseline","hasLineDash","lineScale_2","strokeText","fillText","SHADOW_NUMBER_PROPS","STROKE_PROPS","bindCommonProps","prevStyle","forceSetAll","scope","styleChanged","flushPathDrawn","blend","globalCompositeOperation","i","length","propName","shadowColor","bindPathAndTextCommonStyle","prevEl","getStyle","inHover","newLineWidth","prop","bindImageStyle","setContextTransform","m","transform","updateClipStatus","clipPaths","allClipped","clipPath","isZeroArea","beginPath","clip","isTransformChanged","m0","m1","DRAW_TYPE_PATH","DRAW_TYPE_IMAGE","DRAW_TYPE_TEXT","DRAW_TYPE_INCREMENTAL","canPathBatch","batchFill","batchStroke","__hoverStyle","brushSingle","brush","viewWidth","viewHeight","isLast","shouldBePainted","REDARAW_BIT","__isRendered","__clipPaths","prevElClipPaths","forceSetTransform","forceSetStyle","restore","save","beforeBrush","innerBeforeBrush","canBatchPath","autoBatch","lastDrawType","brushIncremental","innerAfterBrush","afterBrush","displayables","getDisplayables","temporalDisplayables","getTemporalDisplayables","innerScope","len","getCursor","displayable","i_1","len_1","clearTemporalDisplayables","notClear"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,wBAArC;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,SAASC,mBAAT,EAA8BC,YAA9B,QAAkD,yBAAlD;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,UAArD;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,sBAAP,MAAmC,mCAAnC;AACA,IAAIC,gBAAgB,GAAG,IAAIb,SAAJ,CAAc,IAAd,CAAvB;;AACA,SAASc,cAAT,CAAwBC,KAAxB,EAA+B;AAC3B,MAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;AACA,SAAO,EAAEA,MAAM,IAAI,IAAV,IAAkBA,MAAM,KAAK,MAA7B,IAAuC,EAAED,KAAK,CAACE,SAAN,GAAkB,CAApB,CAAzC,CAAP;AACH;;AACD,SAASC,YAAT,CAAsBH,KAAtB,EAA6B;AACzB,MAAII,IAAI,GAAGJ,KAAK,CAACI,IAAjB;AACA,SAAOA,IAAI,IAAI,IAAR,IAAgBA,IAAI,KAAK,MAAhC;AACH;;AACD,SAASC,UAAT,CAAoBC,GAApB,EAAyBN,KAAzB,EAAgC;AAC5B,MAAIA,KAAK,CAACO,WAAN,IAAqB,IAArB,IAA6BP,KAAK,CAACO,WAAN,KAAsB,CAAvD,EAA0D;AACtD,QAAIC,mBAAmB,GAAGF,GAAG,CAACG,WAA9B;AACAH,IAAAA,GAAG,CAACG,WAAJ,GAAkBT,KAAK,CAACO,WAAN,GAAoBP,KAAK,CAACU,OAA5C;AACAJ,IAAAA,GAAG,CAACF,IAAJ;AACAE,IAAAA,GAAG,CAACG,WAAJ,GAAkBD,mBAAlB;AACH,GALD,MAMK;AACDF,IAAAA,GAAG,CAACF,IAAJ;AACH;AACJ;;AACD,SAASO,YAAT,CAAsBL,GAAtB,EAA2BN,KAA3B,EAAkC;AAC9B,MAAIA,KAAK,CAACY,aAAN,IAAuB,IAAvB,IAA+BZ,KAAK,CAACY,aAAN,KAAwB,CAA3D,EAA8D;AAC1D,QAAIJ,mBAAmB,GAAGF,GAAG,CAACG,WAA9B;AACAH,IAAAA,GAAG,CAACG,WAAJ,GAAkBT,KAAK,CAACY,aAAN,GAAsBZ,KAAK,CAACU,OAA9C;AACAJ,IAAAA,GAAG,CAACL,MAAJ;AACAK,IAAAA,GAAG,CAACG,WAAJ,GAAkBD,mBAAlB;AACH,GALD,MAMK;AACDF,IAAAA,GAAG,CAACL,MAAJ;AACH;AACJ;;AACD,OAAO,SAASY,mBAAT,CAA6BP,GAA7B,EAAkCQ,OAAlC,EAA2CC,EAA3C,EAA+C;AAClD,MAAIC,KAAK,GAAG9B,mBAAmB,CAAC4B,OAAO,CAACE,KAAT,EAAgBF,OAAO,CAACG,OAAxB,EAAiCF,EAAjC,CAA/B;;AACA,MAAI5B,YAAY,CAAC6B,KAAD,CAAhB,EAAyB;AACrB,QAAIE,aAAa,GAAGZ,GAAG,CAACa,aAAJ,CAAkBH,KAAlB,EAAyBF,OAAO,CAACM,MAAR,IAAkB,QAA3C,CAApB;;AACA,QAAI,OAAOC,SAAP,KAAqB,UAAzB,EAAqC;AACjC,UAAIC,MAAM,GAAG,IAAID,SAAJ,EAAb;AACAC,MAAAA,MAAM,CAACC,UAAP,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAACT,OAAO,CAACU,QAAR,IAAoB,CAArB,IAA0BC,IAAI,CAACC,EAA/B,GAAoC,GAA5D;AACAJ,MAAAA,MAAM,CAACK,SAAP,CAAkBb,OAAO,CAACc,MAAR,IAAkB,CAApC,EAAyCd,OAAO,CAACe,MAAR,IAAkB,CAA3D;AACAP,MAAAA,MAAM,CAACQ,aAAP,CAAsBhB,OAAO,CAACiB,CAAR,IAAa,CAAnC,EAAwCjB,OAAO,CAACkB,CAAR,IAAa,CAArD;AACAd,MAAAA,aAAa,CAACe,YAAd,CAA2BX,MAA3B;AACH;;AACD,WAAOJ,aAAP;AACH;AACJ;;AACD,SAASgB,SAAT,CAAmB5B,GAAnB,EAAwBS,EAAxB,EAA4Bf,KAA5B,EAAmCmC,OAAnC,EAA4C;AACxC,MAAIC,SAAS,GAAGrC,cAAc,CAACC,KAAD,CAA9B;AACA,MAAIqC,OAAO,GAAGlC,YAAY,CAACH,KAAD,CAA1B;AACA,MAAIsC,aAAa,GAAGtC,KAAK,CAACsC,aAA1B;AACA,MAAIC,UAAU,GAAGD,aAAa,GAAG,CAAjC;AACA,MAAIE,SAAS,GAAG,CAACzB,EAAE,CAAC0B,IAApB;;AACA,MAAI,CAAC,CAAC1B,EAAE,CAAC2B,MAAJ,IAAcH,UAAf,KAA8BC,SAAlC,EAA6C;AACzCzB,IAAAA,EAAE,CAAC4B,eAAH;AACH;;AACD,MAAIF,IAAI,GAAG1B,EAAE,CAAC0B,IAAH,IAAW3C,gBAAtB;;AACA,MAAI,CAACqC,OAAL,EAAc;AACV,QAAI/B,IAAI,GAAGJ,KAAK,CAACI,IAAjB;AACA,QAAIH,MAAM,GAAGD,KAAK,CAACC,MAAnB;AACA,QAAI2C,eAAe,GAAGP,OAAO,IAAI,CAAC,CAACjC,IAAI,CAACyC,UAAxC;AACA,QAAIC,iBAAiB,GAAGV,SAAS,IAAI,CAAC,CAACnC,MAAM,CAAC4C,UAA9C;AACA,QAAIE,cAAc,GAAGV,OAAO,IAAI,CAAC,CAACjC,IAAI,CAACY,KAAvC;AACA,QAAIgC,gBAAgB,GAAGZ,SAAS,IAAI,CAAC,CAACnC,MAAM,CAACe,KAA7C;AACA,QAAIiC,YAAY,GAAG,KAAK,CAAxB;AACA,QAAIC,cAAc,GAAG,KAAK,CAA1B;AACA,QAAIC,WAAW,GAAG,KAAK,CAAvB;AACA,QAAIC,aAAa,GAAG,KAAK,CAAzB;AACA,QAAIC,IAAI,GAAG,KAAK,CAAhB;;AACA,QAAIT,eAAe,IAAIE,iBAAvB,EAA0C;AACtCO,MAAAA,IAAI,GAAGtC,EAAE,CAACuC,eAAH,EAAP;AACH;;AACD,QAAIV,eAAJ,EAAqB;AACjBK,MAAAA,YAAY,GAAGlC,EAAE,CAACwC,OAAH,GACTnE,iBAAiB,CAACkB,GAAD,EAAMF,IAAN,EAAYiD,IAAZ,CADR,GAETtC,EAAE,CAACyC,oBAFT;AAGAzC,MAAAA,EAAE,CAACyC,oBAAH,GAA0BP,YAA1B;AACH;;AACD,QAAIH,iBAAJ,EAAuB;AACnBI,MAAAA,cAAc,GAAGnC,EAAE,CAACwC,OAAH,GACXnE,iBAAiB,CAACkB,GAAD,EAAML,MAAN,EAAcoD,IAAd,CADN,GAEXtC,EAAE,CAAC0C,sBAFT;AAGA1C,MAAAA,EAAE,CAAC0C,sBAAH,GAA4BP,cAA5B;AACH;;AACD,QAAIH,cAAJ,EAAoB;AAChBI,MAAAA,WAAW,GAAIpC,EAAE,CAACwC,OAAH,IAAc,CAACxC,EAAE,CAAC2C,mBAAnB,GACR7C,mBAAmB,CAACP,GAAD,EAAMF,IAAN,EAAYW,EAAZ,CADX,GAERA,EAAE,CAAC2C,mBAFT;AAGA3C,MAAAA,EAAE,CAAC2C,mBAAH,GAAyBP,WAAzB;AACH;;AACD,QAAIH,gBAAJ,EAAsB;AAClBI,MAAAA,aAAa,GAAIrC,EAAE,CAACwC,OAAH,IAAc,CAACxC,EAAE,CAAC4C,qBAAnB,GACV9C,mBAAmB,CAACP,GAAD,EAAML,MAAN,EAAcc,EAAd,CADT,GAEVA,EAAE,CAAC4C,qBAFT;AAGA5C,MAAAA,EAAE,CAAC4C,qBAAH,GAA2BR,WAA3B;AACH;;AACD,QAAIP,eAAJ,EAAqB;AACjBtC,MAAAA,GAAG,CAACsD,SAAJ,GAAgBX,YAAhB;AACH,KAFD,MAGK,IAAIF,cAAJ,EAAoB;AACrB,UAAII,WAAJ,EAAiB;AACb7C,QAAAA,GAAG,CAACsD,SAAJ,GAAgBT,WAAhB;AACH,OAFD,MAGK;AACDd,QAAAA,OAAO,GAAG,KAAV;AACH;AACJ;;AACD,QAAIS,iBAAJ,EAAuB;AACnBxC,MAAAA,GAAG,CAACuD,WAAJ,GAAkBX,cAAlB;AACH,KAFD,MAGK,IAAIF,gBAAJ,EAAsB;AACvB,UAAII,aAAJ,EAAmB;AACf9C,QAAAA,GAAG,CAACuD,WAAJ,GAAkBT,aAAlB;AACH,OAFD,MAGK;AACDhB,QAAAA,SAAS,GAAG,KAAZ;AACH;AACJ;AACJ;;AACD,MAAI0B,QAAQ,GAAG9D,KAAK,CAAC8D,QAAN,IAAkB9D,KAAK,CAACE,SAAN,GAAkB,CAApC,IAAyCP,iBAAiB,CAACK,KAAK,CAAC8D,QAAP,EAAiB9D,KAAK,CAACE,SAAvB,CAAzE;AACA,MAAI6D,cAAc,GAAG/D,KAAK,CAAC+D,cAA3B;AACA,MAAIC,WAAW,GAAG,CAAC,CAAC1D,GAAG,CAAC2D,WAAxB;AACA,MAAIC,KAAK,GAAGnD,EAAE,CAACoD,cAAH,EAAZ;AACA1B,EAAAA,IAAI,CAAC2B,QAAL,CAAcF,KAAK,CAAC,CAAD,CAAnB,EAAwBA,KAAK,CAAC,CAAD,CAA7B,EAAkCnD,EAAE,CAACsD,sBAArC;;AACA,MAAIP,QAAJ,EAAc;AACV,QAAIQ,WAAW,GAAItE,KAAK,CAACuE,aAAN,IAAuBxD,EAAE,CAACyD,YAA3B,GAA2CzD,EAAE,CAACyD,YAAH,EAA3C,GAA+D,CAAjF;;AACA,QAAIF,WAAW,IAAIA,WAAW,KAAK,CAAnC,EAAsC;AAClCR,MAAAA,QAAQ,GAAGpE,GAAG,CAACoE,QAAD,EAAW,UAAUW,MAAV,EAAkB;AACvC,eAAOA,MAAM,GAAGH,WAAhB;AACH,OAFa,CAAd;AAGAP,MAAAA,cAAc,IAAIO,WAAlB;AACH;AACJ;;AACD,MAAII,YAAY,GAAG,IAAnB;;AACA,MAAIlC,SAAS,IAAKzB,EAAE,CAACwC,OAAH,GAAajE,IAAI,CAACqF,iBAAhC,IACIb,QAAQ,IAAI,CAACE,WAAb,IAA4B5B,SADpC,EACgD;AAC5CK,IAAAA,IAAI,CAACmC,MAAL,CAAYtE,GAAG,CAACuE,GAAhB;;AACA,QAAItC,UAAJ,EAAgB;AACZE,MAAAA,IAAI,CAACqC,UAAL,CAAgB,IAAhB;AACH,KAFD,MAGK;AACDrC,MAAAA,IAAI,CAACqC,UAAL,CAAgBxE,GAAhB;AACAoE,MAAAA,YAAY,GAAG,KAAf;AACH;;AACDjC,IAAAA,IAAI,CAACsC,KAAL;;AACA,QAAIjB,QAAQ,IAAI,CAACE,WAAjB,EAA8B;AAC1BvB,MAAAA,IAAI,CAACwB,WAAL,CAAiBH,QAAjB;AACArB,MAAAA,IAAI,CAACuC,iBAAL,CAAuBjB,cAAvB;AACH;;AACDhD,IAAAA,EAAE,CAACkE,SAAH,CAAaxC,IAAb,EAAmB1B,EAAE,CAACmE,KAAtB,EAA6B/C,OAA7B;AACAM,IAAAA,IAAI,CAAC0C,QAAL;AACApE,IAAAA,EAAE,CAACqE,WAAH;AACH;;AACD,MAAIV,YAAJ,EAAkB;AACdjC,IAAAA,IAAI,CAAC4C,WAAL,CAAiB/E,GAAjB,EAAsBiC,UAAU,GAAGD,aAAH,GAAmB,CAAnD;AACH;;AACD,MAAIwB,QAAQ,IAAIE,WAAhB,EAA6B;AACzB1D,IAAAA,GAAG,CAAC2D,WAAJ,CAAgBH,QAAhB;AACAxD,IAAAA,GAAG,CAACyD,cAAJ,GAAqBA,cAArB;AACH;;AACD,MAAI,CAAC5B,OAAL,EAAc;AACV,QAAInC,KAAK,CAACsF,WAAV,EAAuB;AACnB,UAAIlD,SAAJ,EAAe;AACXzB,QAAAA,YAAY,CAACL,GAAD,EAAMN,KAAN,CAAZ;AACH;;AACD,UAAIqC,OAAJ,EAAa;AACThC,QAAAA,UAAU,CAACC,GAAD,EAAMN,KAAN,CAAV;AACH;AACJ,KAPD,MAQK;AACD,UAAIqC,OAAJ,EAAa;AACThC,QAAAA,UAAU,CAACC,GAAD,EAAMN,KAAN,CAAV;AACH;;AACD,UAAIoC,SAAJ,EAAe;AACXzB,QAAAA,YAAY,CAACL,GAAD,EAAMN,KAAN,CAAZ;AACH;AACJ;AACJ;;AACD,MAAI8D,QAAQ,IAAIE,WAAhB,EAA6B;AACzB1D,IAAAA,GAAG,CAAC2D,WAAJ,CAAgB,EAAhB;AACH;AACJ;;AACD,SAASsB,UAAT,CAAoBjF,GAApB,EAAyBS,EAAzB,EAA6Bf,KAA7B,EAAoC;AAChC,MAAIgB,KAAK,GAAGD,EAAE,CAACE,OAAH,GAAa/B,mBAAmB,CAACc,KAAK,CAACgB,KAAP,EAAcD,EAAE,CAACE,OAAjB,EAA0BF,EAA1B,EAA8BA,EAAE,CAACyE,MAAjC,CAA5C;;AACA,MAAI,CAACxE,KAAD,IAAU,CAAC7B,YAAY,CAAC6B,KAAD,CAA3B,EAAoC;AAChC;AACH;;AACD,MAAIe,CAAC,GAAG/B,KAAK,CAAC+B,CAAN,IAAW,CAAnB;AACA,MAAIC,CAAC,GAAGhC,KAAK,CAACgC,CAAN,IAAW,CAAnB;AACA,MAAIyD,KAAK,GAAG1E,EAAE,CAAC2E,QAAH,EAAZ;AACA,MAAIC,MAAM,GAAG5E,EAAE,CAAC6E,SAAH,EAAb;AACA,MAAIC,MAAM,GAAG7E,KAAK,CAACyE,KAAN,GAAczE,KAAK,CAAC2E,MAAjC;;AACA,MAAIF,KAAK,IAAI,IAAT,IAAiBE,MAAM,IAAI,IAA/B,EAAqC;AACjCF,IAAAA,KAAK,GAAGE,MAAM,GAAGE,MAAjB;AACH,GAFD,MAGK,IAAIF,MAAM,IAAI,IAAV,IAAkBF,KAAK,IAAI,IAA/B,EAAqC;AACtCE,IAAAA,MAAM,GAAGF,KAAK,GAAGI,MAAjB;AACH,GAFI,MAGA,IAAIJ,KAAK,IAAI,IAAT,IAAiBE,MAAM,IAAI,IAA/B,EAAqC;AACtCF,IAAAA,KAAK,GAAGzE,KAAK,CAACyE,KAAd;AACAE,IAAAA,MAAM,GAAG3E,KAAK,CAAC2E,MAAf;AACH;;AACD,MAAI3F,KAAK,CAAC8F,MAAN,IAAgB9F,KAAK,CAAC+F,OAA1B,EAAmC;AAC/B,QAAIC,EAAE,GAAGhG,KAAK,CAACgG,EAAN,IAAY,CAArB;AACA,QAAIC,EAAE,GAAGjG,KAAK,CAACiG,EAAN,IAAY,CAArB;AACA3F,IAAAA,GAAG,CAAC4F,SAAJ,CAAclF,KAAd,EAAqBgF,EAArB,EAAyBC,EAAzB,EAA6BjG,KAAK,CAAC8F,MAAnC,EAA2C9F,KAAK,CAAC+F,OAAjD,EAA0DhE,CAA1D,EAA6DC,CAA7D,EAAgEyD,KAAhE,EAAuEE,MAAvE;AACH,GAJD,MAKK,IAAI3F,KAAK,CAACgG,EAAN,IAAYhG,KAAK,CAACiG,EAAtB,EAA0B;AAC3B,QAAID,EAAE,GAAGhG,KAAK,CAACgG,EAAf;AACA,QAAIC,EAAE,GAAGjG,KAAK,CAACiG,EAAf;AACA,QAAIH,MAAM,GAAGL,KAAK,GAAGO,EAArB;AACA,QAAID,OAAO,GAAGJ,MAAM,GAAGM,EAAvB;AACA3F,IAAAA,GAAG,CAAC4F,SAAJ,CAAclF,KAAd,EAAqBgF,EAArB,EAAyBC,EAAzB,EAA6BH,MAA7B,EAAqCC,OAArC,EAA8ChE,CAA9C,EAAiDC,CAAjD,EAAoDyD,KAApD,EAA2DE,MAA3D;AACH,GANI,MAOA;AACDrF,IAAAA,GAAG,CAAC4F,SAAJ,CAAclF,KAAd,EAAqBe,CAArB,EAAwBC,CAAxB,EAA2ByD,KAA3B,EAAkCE,MAAlC;AACH;AACJ;;AACD,SAASQ,SAAT,CAAmB7F,GAAnB,EAAwBS,EAAxB,EAA4Bf,KAA5B,EAAmC;AAC/B,MAAIoG,IAAI,GAAGpG,KAAK,CAACoG,IAAjB;AACAA,EAAAA,IAAI,IAAI,IAAR,KAAiBA,IAAI,IAAI,EAAzB;;AACA,MAAIA,IAAJ,EAAU;AACN9F,IAAAA,GAAG,CAAC+F,IAAJ,GAAWrG,KAAK,CAACqG,IAAN,IAAc5G,YAAzB;AACAa,IAAAA,GAAG,CAACgG,SAAJ,GAAgBtG,KAAK,CAACsG,SAAtB;AACAhG,IAAAA,GAAG,CAACiG,YAAJ,GAAmBvG,KAAK,CAACuG,YAAzB;AACA,QAAIC,WAAW,GAAG,KAAK,CAAvB;;AACA,QAAIlG,GAAG,CAAC2D,WAAR,EAAqB;AACjB,UAAIH,QAAQ,GAAG9D,KAAK,CAAC8D,QAAN,IAAkB9D,KAAK,CAACE,SAAN,GAAkB,CAApC,IAAyCP,iBAAiB,CAACK,KAAK,CAAC8D,QAAP,EAAiB9D,KAAK,CAACE,SAAvB,CAAzE;AACA,UAAI6D,cAAc,GAAG/D,KAAK,CAAC+D,cAA3B;;AACA,UAAID,QAAJ,EAAc;AACV,YAAI2C,WAAW,GAAIzG,KAAK,CAACuE,aAAN,IAAuBxD,EAAE,CAACyD,YAA3B,GAA2CzD,EAAE,CAACyD,YAAH,EAA3C,GAA+D,CAAjF;;AACA,YAAIiC,WAAW,IAAIA,WAAW,KAAK,CAAnC,EAAsC;AAClC3C,UAAAA,QAAQ,GAAGpE,GAAG,CAACoE,QAAD,EAAW,UAAUW,MAAV,EAAkB;AACvC,mBAAOA,MAAM,GAAGgC,WAAhB;AACH,WAFa,CAAd;AAGA1C,UAAAA,cAAc,IAAI0C,WAAlB;AACH;;AACDnG,QAAAA,GAAG,CAAC2D,WAAJ,CAAgBH,QAAhB;AACAxD,QAAAA,GAAG,CAACyD,cAAJ,GAAqBA,cAArB;AACAyC,QAAAA,WAAW,GAAG,IAAd;AACH;AACJ;;AACD,QAAIxG,KAAK,CAACsF,WAAV,EAAuB;AACnB,UAAIvF,cAAc,CAACC,KAAD,CAAlB,EAA2B;AACvBM,QAAAA,GAAG,CAACoG,UAAJ,CAAeN,IAAf,EAAqBpG,KAAK,CAAC+B,CAA3B,EAA8B/B,KAAK,CAACgC,CAApC;AACH;;AACD,UAAI7B,YAAY,CAACH,KAAD,CAAhB,EAAyB;AACrBM,QAAAA,GAAG,CAACqG,QAAJ,CAAaP,IAAb,EAAmBpG,KAAK,CAAC+B,CAAzB,EAA4B/B,KAAK,CAACgC,CAAlC;AACH;AACJ,KAPD,MAQK;AACD,UAAI7B,YAAY,CAACH,KAAD,CAAhB,EAAyB;AACrBM,QAAAA,GAAG,CAACqG,QAAJ,CAAaP,IAAb,EAAmBpG,KAAK,CAAC+B,CAAzB,EAA4B/B,KAAK,CAACgC,CAAlC;AACH;;AACD,UAAIjC,cAAc,CAACC,KAAD,CAAlB,EAA2B;AACvBM,QAAAA,GAAG,CAACoG,UAAJ,CAAeN,IAAf,EAAqBpG,KAAK,CAAC+B,CAA3B,EAA8B/B,KAAK,CAACgC,CAApC;AACH;AACJ;;AACD,QAAIwE,WAAJ,EAAiB;AACblG,MAAAA,GAAG,CAAC2D,WAAJ,CAAgB,EAAhB;AACH;AACJ;AACJ;;AACD,IAAI2C,mBAAmB,GAAG,CAAC,YAAD,EAAe,eAAf,EAAgC,eAAhC,CAA1B;AACA,IAAIC,YAAY,GAAG,CACf,CAAC,SAAD,EAAY,MAAZ,CADe,EACM,CAAC,UAAD,EAAa,OAAb,CADN,EAC6B,CAAC,YAAD,EAAe,EAAf,CAD7B,CAAnB;;AAGA,SAASC,eAAT,CAAyBxG,GAAzB,EAA8BN,KAA9B,EAAqC+G,SAArC,EAAgDC,WAAhD,EAA6DC,KAA7D,EAAoE;AAChE,MAAIC,YAAY,GAAG,KAAnB;;AACA,MAAI,CAACF,WAAL,EAAkB;AACdD,IAAAA,SAAS,GAAGA,SAAS,IAAI,EAAzB;;AACA,QAAI/G,KAAK,KAAK+G,SAAd,EAAyB;AACrB,aAAO,KAAP;AACH;AACJ;;AACD,MAAIC,WAAW,IAAIhH,KAAK,CAACU,OAAN,KAAkBqG,SAAS,CAACrG,OAA/C,EAAwD;AACpD,QAAI,CAACwG,YAAL,EAAmB;AACfC,MAAAA,cAAc,CAAC7G,GAAD,EAAM2G,KAAN,CAAd;AACAC,MAAAA,YAAY,GAAG,IAAf;AACH;;AACD5G,IAAAA,GAAG,CAACG,WAAJ,GAAkBT,KAAK,CAACU,OAAN,IAAiB,IAAjB,GAAwB1B,oBAAoB,CAAC0B,OAA7C,GAAuDV,KAAK,CAACU,OAA/E;AACH;;AACD,MAAIsG,WAAW,IAAIhH,KAAK,CAACoH,KAAN,KAAgBL,SAAS,CAACK,KAA7C,EAAoD;AAChD,QAAI,CAACF,YAAL,EAAmB;AACfC,MAAAA,cAAc,CAAC7G,GAAD,EAAM2G,KAAN,CAAd;AACAC,MAAAA,YAAY,GAAG,IAAf;AACH;;AACD5G,IAAAA,GAAG,CAAC+G,wBAAJ,GAA+BrH,KAAK,CAACoH,KAAN,IAAepI,oBAAoB,CAACoI,KAAnE;AACH;;AACD,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,mBAAmB,CAACW,MAAxC,EAAgDD,CAAC,EAAjD,EAAqD;AACjD,QAAIE,QAAQ,GAAGZ,mBAAmB,CAACU,CAAD,CAAlC;;AACA,QAAIN,WAAW,IAAIhH,KAAK,CAACwH,QAAD,CAAL,KAAoBT,SAAS,CAACS,QAAD,CAAhD,EAA4D;AACxD,UAAI,CAACN,YAAL,EAAmB;AACfC,QAAAA,cAAc,CAAC7G,GAAD,EAAM2G,KAAN,CAAd;AACAC,QAAAA,YAAY,GAAG,IAAf;AACH;;AACD5G,MAAAA,GAAG,CAACkH,QAAD,CAAH,GAAgBlH,GAAG,CAACuE,GAAJ,IAAW7E,KAAK,CAACwH,QAAD,CAAL,IAAmB,CAA9B,CAAhB;AACH;AACJ;;AACD,MAAIR,WAAW,IAAIhH,KAAK,CAACyH,WAAN,KAAsBV,SAAS,CAACU,WAAnD,EAAgE;AAC5D,QAAI,CAACP,YAAL,EAAmB;AACfC,MAAAA,cAAc,CAAC7G,GAAD,EAAM2G,KAAN,CAAd;AACAC,MAAAA,YAAY,GAAG,IAAf;AACH;;AACD5G,IAAAA,GAAG,CAACmH,WAAJ,GAAkBzH,KAAK,CAACyH,WAAN,IAAqBzI,oBAAoB,CAACyI,WAA5D;AACH;;AACD,SAAOP,YAAP;AACH;;AACD,SAASQ,0BAAT,CAAoCpH,GAApC,EAAyCS,EAAzC,EAA6C4G,MAA7C,EAAqDX,WAArD,EAAkEC,KAAlE,EAAyE;AACrE,MAAIjH,KAAK,GAAG4H,QAAQ,CAAC7G,EAAD,EAAKkG,KAAK,CAACY,OAAX,CAApB;AACA,MAAId,SAAS,GAAGC,WAAW,GACrB,IADqB,GAEpBW,MAAM,IAAIC,QAAQ,CAACD,MAAD,EAASV,KAAK,CAACY,OAAf,CAAlB,IAA6C,EAFpD;;AAGA,MAAI7H,KAAK,KAAK+G,SAAd,EAAyB;AACrB,WAAO,KAAP;AACH;;AACD,MAAIG,YAAY,GAAGJ,eAAe,CAACxG,GAAD,EAAMN,KAAN,EAAa+G,SAAb,EAAwBC,WAAxB,EAAqCC,KAArC,CAAlC;;AACA,MAAID,WAAW,IAAIhH,KAAK,CAACI,IAAN,KAAe2G,SAAS,CAAC3G,IAA5C,EAAkD;AAC9C,QAAI,CAAC8G,YAAL,EAAmB;AACfC,MAAAA,cAAc,CAAC7G,GAAD,EAAM2G,KAAN,CAAd;AACAC,MAAAA,YAAY,GAAG,IAAf;AACH;;AACD5G,IAAAA,GAAG,CAACsD,SAAJ,GAAgB5D,KAAK,CAACI,IAAtB;AACH;;AACD,MAAI4G,WAAW,IAAIhH,KAAK,CAACC,MAAN,KAAiB8G,SAAS,CAAC9G,MAA9C,EAAsD;AAClD,QAAI,CAACiH,YAAL,EAAmB;AACfC,MAAAA,cAAc,CAAC7G,GAAD,EAAM2G,KAAN,CAAd;AACAC,MAAAA,YAAY,GAAG,IAAf;AACH;;AACD5G,IAAAA,GAAG,CAACuD,WAAJ,GAAkB7D,KAAK,CAACC,MAAxB;AACH;;AACD,MAAI+G,WAAW,IAAIhH,KAAK,CAACU,OAAN,KAAkBqG,SAAS,CAACrG,OAA/C,EAAwD;AACpD,QAAI,CAACwG,YAAL,EAAmB;AACfC,MAAAA,cAAc,CAAC7G,GAAD,EAAM2G,KAAN,CAAd;AACAC,MAAAA,YAAY,GAAG,IAAf;AACH;;AACD5G,IAAAA,GAAG,CAACG,WAAJ,GAAkBT,KAAK,CAACU,OAAN,IAAiB,IAAjB,GAAwB,CAAxB,GAA4BV,KAAK,CAACU,OAApD;AACH;;AACD,MAAIK,EAAE,CAACqB,SAAH,EAAJ,EAAoB;AAChB,QAAIlC,SAAS,GAAGF,KAAK,CAACE,SAAtB;AACA,QAAI4H,YAAY,GAAG5H,SAAS,IAAKF,KAAK,CAACuE,aAAN,IAAuBxD,EAAvB,IAA6BA,EAAE,CAACyD,YAAjC,GAAiDzD,EAAE,CAACyD,YAAH,EAAjD,GAAqE,CAAzE,CAA5B;;AACA,QAAIlE,GAAG,CAACJ,SAAJ,KAAkB4H,YAAtB,EAAoC;AAChC,UAAI,CAACZ,YAAL,EAAmB;AACfC,QAAAA,cAAc,CAAC7G,GAAD,EAAM2G,KAAN,CAAd;AACAC,QAAAA,YAAY,GAAG,IAAf;AACH;;AACD5G,MAAAA,GAAG,CAACJ,SAAJ,GAAgB4H,YAAhB;AACH;AACJ;;AACD,OAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,YAAY,CAACU,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,QAAIS,IAAI,GAAGlB,YAAY,CAACS,CAAD,CAAvB;AACA,QAAIE,QAAQ,GAAGO,IAAI,CAAC,CAAD,CAAnB;;AACA,QAAIf,WAAW,IAAIhH,KAAK,CAACwH,QAAD,CAAL,KAAoBT,SAAS,CAACS,QAAD,CAAhD,EAA4D;AACxD,UAAI,CAACN,YAAL,EAAmB;AACfC,QAAAA,cAAc,CAAC7G,GAAD,EAAM2G,KAAN,CAAd;AACAC,QAAAA,YAAY,GAAG,IAAf;AACH;;AACD5G,MAAAA,GAAG,CAACkH,QAAD,CAAH,GAAgBxH,KAAK,CAACwH,QAAD,CAAL,IAAmBO,IAAI,CAAC,CAAD,CAAvC;AACH;AACJ;;AACD,SAAOb,YAAP;AACH;;AACD,SAASc,cAAT,CAAwB1H,GAAxB,EAA6BS,EAA7B,EAAiC4G,MAAjC,EAAyCX,WAAzC,EAAsDC,KAAtD,EAA6D;AACzD,SAAOH,eAAe,CAACxG,GAAD,EAAMsH,QAAQ,CAAC7G,EAAD,EAAKkG,KAAK,CAACY,OAAX,CAAd,EAAmCF,MAAM,IAAIC,QAAQ,CAACD,MAAD,EAASV,KAAK,CAACY,OAAf,CAArD,EAA8Eb,WAA9E,EAA2FC,KAA3F,CAAtB;AACH;;AACD,SAASgB,mBAAT,CAA6B3H,GAA7B,EAAkCS,EAAlC,EAAsC;AAClC,MAAImH,CAAC,GAAGnH,EAAE,CAACoH,SAAX;AACA,MAAItD,GAAG,GAAGvE,GAAG,CAACuE,GAAJ,IAAW,CAArB;;AACA,MAAIqD,CAAJ,EAAO;AACH5H,IAAAA,GAAG,CAAC2B,YAAJ,CAAiB4C,GAAG,GAAGqD,CAAC,CAAC,CAAD,CAAxB,EAA6BrD,GAAG,GAAGqD,CAAC,CAAC,CAAD,CAApC,EAAyCrD,GAAG,GAAGqD,CAAC,CAAC,CAAD,CAAhD,EAAqDrD,GAAG,GAAGqD,CAAC,CAAC,CAAD,CAA5D,EAAiErD,GAAG,GAAGqD,CAAC,CAAC,CAAD,CAAxE,EAA6ErD,GAAG,GAAGqD,CAAC,CAAC,CAAD,CAApF;AACH,GAFD,MAGK;AACD5H,IAAAA,GAAG,CAAC2B,YAAJ,CAAiB4C,GAAjB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4BA,GAA5B,EAAiC,CAAjC,EAAoC,CAApC;AACH;AACJ;;AACD,SAASuD,gBAAT,CAA0BC,SAA1B,EAAqC/H,GAArC,EAA0C2G,KAA1C,EAAiD;AAC7C,MAAIqB,UAAU,GAAG,KAAjB;;AACA,OAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGe,SAAS,CAACd,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,QAAIiB,QAAQ,GAAGF,SAAS,CAACf,CAAD,CAAxB;AACAgB,IAAAA,UAAU,GAAGA,UAAU,IAAIC,QAAQ,CAACC,UAAT,EAA3B;AACAP,IAAAA,mBAAmB,CAAC3H,GAAD,EAAMiI,QAAN,CAAnB;AACAjI,IAAAA,GAAG,CAACmI,SAAJ;AACAF,IAAAA,QAAQ,CAACtD,SAAT,CAAmB3E,GAAnB,EAAwBiI,QAAQ,CAACrD,KAAjC;AACA5E,IAAAA,GAAG,CAACoI,IAAJ;AACH;;AACDzB,EAAAA,KAAK,CAACqB,UAAN,GAAmBA,UAAnB;AACH;;AACD,SAASK,kBAAT,CAA4BC,EAA5B,EAAgCC,EAAhC,EAAoC;AAChC,MAAID,EAAE,IAAIC,EAAV,EAAc;AACV,WAAOD,EAAE,CAAC,CAAD,CAAF,KAAUC,EAAE,CAAC,CAAD,CAAZ,IACAD,EAAE,CAAC,CAAD,CAAF,KAAUC,EAAE,CAAC,CAAD,CADZ,IAEAD,EAAE,CAAC,CAAD,CAAF,KAAUC,EAAE,CAAC,CAAD,CAFZ,IAGAD,EAAE,CAAC,CAAD,CAAF,KAAUC,EAAE,CAAC,CAAD,CAHZ,IAIAD,EAAE,CAAC,CAAD,CAAF,KAAUC,EAAE,CAAC,CAAD,CAJZ,IAKAD,EAAE,CAAC,CAAD,CAAF,KAAUC,EAAE,CAAC,CAAD,CALnB;AAMH,GAPD,MAQK,IAAI,CAACD,EAAD,IAAO,CAACC,EAAZ,EAAgB;AACjB,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH;;AACD,IAAIC,cAAc,GAAG,CAArB;AACA,IAAIC,eAAe,GAAG,CAAtB;AACA,IAAIC,cAAc,GAAG,CAArB;AACA,IAAIC,qBAAqB,GAAG,CAA5B;;AACA,SAASC,YAAT,CAAsBlJ,KAAtB,EAA6B;AACzB,MAAIqC,OAAO,GAAGlC,YAAY,CAACH,KAAD,CAA1B;AACA,MAAIoC,SAAS,GAAGrC,cAAc,CAACC,KAAD,CAA9B;AACA,SAAO,EAAEA,KAAK,CAAC8D,QAAN,IACF,EAAE,CAACzB,OAAD,GAAW,CAACD,SAAd,CADE,IAEDC,OAAO,IAAI,OAAOrC,KAAK,CAACI,IAAb,KAAsB,QAFhC,IAGDgC,SAAS,IAAI,OAAOpC,KAAK,CAACC,MAAb,KAAwB,QAHpC,IAIFD,KAAK,CAACsC,aAAN,GAAsB,CAJpB,IAKFtC,KAAK,CAACY,aAAN,GAAsB,CALpB,IAMFZ,KAAK,CAACO,WAAN,GAAoB,CANpB,CAAP;AAOH;;AACD,SAAS4G,cAAT,CAAwB7G,GAAxB,EAA6B2G,KAA7B,EAAoC;AAChCA,EAAAA,KAAK,CAACkC,SAAN,IAAmB7I,GAAG,CAACF,IAAJ,EAAnB;AACA6G,EAAAA,KAAK,CAACmC,WAAN,IAAqB9I,GAAG,CAACL,MAAJ,EAArB;AACAgH,EAAAA,KAAK,CAACkC,SAAN,GAAkB,EAAlB;AACAlC,EAAAA,KAAK,CAACmC,WAAN,GAAoB,EAApB;AACH;;AACD,SAASxB,QAAT,CAAkB7G,EAAlB,EAAsB8G,OAAtB,EAA+B;AAC3B,SAAOA,OAAO,GAAI9G,EAAE,CAACsI,YAAH,IAAmBtI,EAAE,CAACf,KAA1B,GAAmCe,EAAE,CAACf,KAApD;AACH;;AACD,OAAO,SAASsJ,WAAT,CAAqBhJ,GAArB,EAA0BS,EAA1B,EAA8B;AACjCwI,EAAAA,KAAK,CAACjJ,GAAD,EAAMS,EAAN,EAAU;AAAE8G,IAAAA,OAAO,EAAE,KAAX;AAAkB2B,IAAAA,SAAS,EAAE,CAA7B;AAAgCC,IAAAA,UAAU,EAAE;AAA5C,GAAV,EAA2D,IAA3D,CAAL;AACH;AACD,OAAO,SAASF,KAAT,CAAejJ,GAAf,EAAoBS,EAApB,EAAwBkG,KAAxB,EAA+ByC,MAA/B,EAAuC;AAC1C,MAAIxB,CAAC,GAAGnH,EAAE,CAACoH,SAAX;;AACA,MAAI,CAACpH,EAAE,CAAC4I,eAAH,CAAmB1C,KAAK,CAACuC,SAAzB,EAAoCvC,KAAK,CAACwC,UAA1C,EAAsD,KAAtD,EAA6D,KAA7D,CAAL,EAA0E;AACtE1I,IAAAA,EAAE,CAACwC,OAAH,IAAc,CAAC3D,OAAO,CAACgK,WAAvB;AACA7I,IAAAA,EAAE,CAAC8I,YAAH,GAAkB,KAAlB;AACA;AACH;;AACD,MAAIxB,SAAS,GAAGtH,EAAE,CAAC+I,WAAnB;AACA,MAAIC,eAAe,GAAG9C,KAAK,CAAC8C,eAA5B;AACA,MAAIC,iBAAiB,GAAG,KAAxB;AACA,MAAIC,aAAa,GAAG,KAApB;;AACA,MAAI,CAACF,eAAD,IAAoB1K,iBAAiB,CAACgJ,SAAD,EAAY0B,eAAZ,CAAzC,EAAuE;AACnE,QAAIA,eAAe,IAAIA,eAAe,CAACxC,MAAvC,EAA+C;AAC3CJ,MAAAA,cAAc,CAAC7G,GAAD,EAAM2G,KAAN,CAAd;AACA3G,MAAAA,GAAG,CAAC4J,OAAJ;AACAD,MAAAA,aAAa,GAAGD,iBAAiB,GAAG,IAApC;AACA/C,MAAAA,KAAK,CAAC8C,eAAN,GAAwB,IAAxB;AACA9C,MAAAA,KAAK,CAACqB,UAAN,GAAmB,KAAnB;AACArB,MAAAA,KAAK,CAACU,MAAN,GAAe,IAAf;AACH;;AACD,QAAIU,SAAS,IAAIA,SAAS,CAACd,MAA3B,EAAmC;AAC/BJ,MAAAA,cAAc,CAAC7G,GAAD,EAAM2G,KAAN,CAAd;AACA3G,MAAAA,GAAG,CAAC6J,IAAJ;AACA/B,MAAAA,gBAAgB,CAACC,SAAD,EAAY/H,GAAZ,EAAiB2G,KAAjB,CAAhB;AACA+C,MAAAA,iBAAiB,GAAG,IAApB;AACH;;AACD/C,IAAAA,KAAK,CAAC8C,eAAN,GAAwB1B,SAAxB;AACH;;AACD,MAAIpB,KAAK,CAACqB,UAAV,EAAsB;AAClBvH,IAAAA,EAAE,CAAC8I,YAAH,GAAkB,KAAlB;AACA;AACH;;AACD9I,EAAAA,EAAE,CAACqJ,WAAH,IAAkBrJ,EAAE,CAACqJ,WAAH,EAAlB;AACArJ,EAAAA,EAAE,CAACsJ,gBAAH;AACA,MAAI1C,MAAM,GAAGV,KAAK,CAACU,MAAnB;;AACA,MAAI,CAACA,MAAL,EAAa;AACTsC,IAAAA,aAAa,GAAGD,iBAAiB,GAAG,IAApC;AACH;;AACD,MAAIM,YAAY,GAAGvJ,EAAE,YAAYzB,IAAd,IACZyB,EAAE,CAACwJ,SADS,IAEZrB,YAAY,CAACnI,EAAE,CAACf,KAAJ,CAFnB;;AAGA,MAAIgK,iBAAiB,IAAIrB,kBAAkB,CAACT,CAAD,EAAIP,MAAM,CAACQ,SAAX,CAA3C,EAAkE;AAC9DhB,IAAAA,cAAc,CAAC7G,GAAD,EAAM2G,KAAN,CAAd;AACAgB,IAAAA,mBAAmB,CAAC3H,GAAD,EAAMS,EAAN,CAAnB;AACH,GAHD,MAIK,IAAI,CAACuJ,YAAL,EAAmB;AACpBnD,IAAAA,cAAc,CAAC7G,GAAD,EAAM2G,KAAN,CAAd;AACH;;AACD,MAAIjH,KAAK,GAAG4H,QAAQ,CAAC7G,EAAD,EAAKkG,KAAK,CAACY,OAAX,CAApB;;AACA,MAAI9G,EAAE,YAAYzB,IAAlB,EAAwB;AACpB,QAAI2H,KAAK,CAACuD,YAAN,KAAuB1B,cAA3B,EAA2C;AACvCmB,MAAAA,aAAa,GAAG,IAAhB;AACAhD,MAAAA,KAAK,CAACuD,YAAN,GAAqB1B,cAArB;AACH;;AACDpB,IAAAA,0BAA0B,CAACpH,GAAD,EAAMS,EAAN,EAAU4G,MAAV,EAAkBsC,aAAlB,EAAiChD,KAAjC,CAA1B;;AACA,QAAI,CAACqD,YAAD,IAAkB,CAACrD,KAAK,CAACkC,SAAP,IAAoB,CAAClC,KAAK,CAACmC,WAAjD,EAA+D;AAC3D9I,MAAAA,GAAG,CAACmI,SAAJ;AACH;;AACDvG,IAAAA,SAAS,CAAC5B,GAAD,EAAMS,EAAN,EAAUf,KAAV,EAAiBsK,YAAjB,CAAT;;AACA,QAAIA,YAAJ,EAAkB;AACdrD,MAAAA,KAAK,CAACkC,SAAN,GAAkBnJ,KAAK,CAACI,IAAN,IAAc,EAAhC;AACA6G,MAAAA,KAAK,CAACmC,WAAN,GAAoBpJ,KAAK,CAACC,MAAN,IAAgB,EAApC;AACH;AACJ,GAdD,MAeK;AACD,QAAIc,EAAE,YAAYvB,KAAlB,EAAyB;AACrB,UAAIyH,KAAK,CAACuD,YAAN,KAAuBxB,cAA3B,EAA2C;AACvCiB,QAAAA,aAAa,GAAG,IAAhB;AACAhD,QAAAA,KAAK,CAACuD,YAAN,GAAqBxB,cAArB;AACH;;AACDtB,MAAAA,0BAA0B,CAACpH,GAAD,EAAMS,EAAN,EAAU4G,MAAV,EAAkBsC,aAAlB,EAAiChD,KAAjC,CAA1B;AACAd,MAAAA,SAAS,CAAC7F,GAAD,EAAMS,EAAN,EAAUf,KAAV,CAAT;AACH,KAPD,MAQK,IAAIe,EAAE,YAAYxB,OAAlB,EAA2B;AAC5B,UAAI0H,KAAK,CAACuD,YAAN,KAAuBzB,eAA3B,EAA4C;AACxCkB,QAAAA,aAAa,GAAG,IAAhB;AACAhD,QAAAA,KAAK,CAACuD,YAAN,GAAqBzB,eAArB;AACH;;AACDf,MAAAA,cAAc,CAAC1H,GAAD,EAAMS,EAAN,EAAU4G,MAAV,EAAkBsC,aAAlB,EAAiChD,KAAjC,CAAd;AACA1B,MAAAA,UAAU,CAACjF,GAAD,EAAMS,EAAN,EAAUf,KAAV,CAAV;AACH,KAPI,MAQA,IAAIe,EAAE,YAAYlB,sBAAlB,EAA0C;AAC3C,UAAIoH,KAAK,CAACuD,YAAN,KAAuBvB,qBAA3B,EAAkD;AAC9CgB,QAAAA,aAAa,GAAG,IAAhB;AACAhD,QAAAA,KAAK,CAACuD,YAAN,GAAqBvB,qBAArB;AACH;;AACDwB,MAAAA,gBAAgB,CAACnK,GAAD,EAAMS,EAAN,EAAUkG,KAAV,CAAhB;AACH;AACJ;;AACD,MAAIqD,YAAY,IAAIZ,MAApB,EAA4B;AACxBvC,IAAAA,cAAc,CAAC7G,GAAD,EAAM2G,KAAN,CAAd;AACH;;AACDlG,EAAAA,EAAE,CAAC2J,eAAH;AACA3J,EAAAA,EAAE,CAAC4J,UAAH,IAAiB5J,EAAE,CAAC4J,UAAH,EAAjB;AACA1D,EAAAA,KAAK,CAACU,MAAN,GAAe5G,EAAf;AACAA,EAAAA,EAAE,CAACwC,OAAH,GAAa,CAAb;AACAxC,EAAAA,EAAE,CAAC8I,YAAH,GAAkB,IAAlB;AACH;;AACD,SAASY,gBAAT,CAA0BnK,GAA1B,EAA+BS,EAA/B,EAAmCkG,KAAnC,EAA0C;AACtC,MAAI2D,YAAY,GAAG7J,EAAE,CAAC8J,eAAH,EAAnB;AACA,MAAIC,oBAAoB,GAAG/J,EAAE,CAACgK,uBAAH,EAA3B;AACAzK,EAAAA,GAAG,CAAC6J,IAAJ;AACA,MAAIa,UAAU,GAAG;AACbjB,IAAAA,eAAe,EAAE,IADJ;AAEbpC,IAAAA,MAAM,EAAE,IAFK;AAGbW,IAAAA,UAAU,EAAE,KAHC;AAIbkB,IAAAA,SAAS,EAAEvC,KAAK,CAACuC,SAJJ;AAKbC,IAAAA,UAAU,EAAExC,KAAK,CAACwC,UALL;AAMb5B,IAAAA,OAAO,EAAEZ,KAAK,CAACY;AANF,GAAjB;AAQA,MAAIP,CAAJ;AACA,MAAI2D,GAAJ;;AACA,OAAK3D,CAAC,GAAGvG,EAAE,CAACmK,SAAH,EAAJ,EAAoBD,GAAG,GAAGL,YAAY,CAACrD,MAA5C,EAAoDD,CAAC,GAAG2D,GAAxD,EAA6D3D,CAAC,EAA9D,EAAkE;AAC9D,QAAI6D,WAAW,GAAGP,YAAY,CAACtD,CAAD,CAA9B;AACA6D,IAAAA,WAAW,CAACf,WAAZ,IAA2Be,WAAW,CAACf,WAAZ,EAA3B;AACAe,IAAAA,WAAW,CAACd,gBAAZ;AACAd,IAAAA,KAAK,CAACjJ,GAAD,EAAM6K,WAAN,EAAmBH,UAAnB,EAA+B1D,CAAC,KAAK2D,GAAG,GAAG,CAA3C,CAAL;AACAE,IAAAA,WAAW,CAACT,eAAZ;AACAS,IAAAA,WAAW,CAACR,UAAZ,IAA0BQ,WAAW,CAACR,UAAZ,EAA1B;AACAK,IAAAA,UAAU,CAACrD,MAAX,GAAoBwD,WAApB;AACH;;AACD,OAAK,IAAIC,GAAG,GAAG,CAAV,EAAaC,KAAK,GAAGP,oBAAoB,CAACvD,MAA/C,EAAuD6D,GAAG,GAAGC,KAA7D,EAAoED,GAAG,EAAvE,EAA2E;AACvE,QAAID,WAAW,GAAGL,oBAAoB,CAACM,GAAD,CAAtC;AACAD,IAAAA,WAAW,CAACf,WAAZ,IAA2Be,WAAW,CAACf,WAAZ,EAA3B;AACAe,IAAAA,WAAW,CAACd,gBAAZ;AACAd,IAAAA,KAAK,CAACjJ,GAAD,EAAM6K,WAAN,EAAmBH,UAAnB,EAA+BI,GAAG,KAAKC,KAAK,GAAG,CAA/C,CAAL;AACAF,IAAAA,WAAW,CAACT,eAAZ;AACAS,IAAAA,WAAW,CAACR,UAAZ,IAA0BQ,WAAW,CAACR,UAAZ,EAA1B;AACAK,IAAAA,UAAU,CAACrD,MAAX,GAAoBwD,WAApB;AACH;;AACDpK,EAAAA,EAAE,CAACuK,yBAAH;AACAvK,EAAAA,EAAE,CAACwK,QAAH,GAAc,IAAd;AACAjL,EAAAA,GAAG,CAAC4J,OAAJ;AACH","sourcesContent":["import { DEFAULT_COMMON_STYLE } from '../graphic/Displayable';\nimport PathProxy from '../core/PathProxy';\nimport { createOrUpdateImage, isImageReady } from '../graphic/helper/image';\nimport { getCanvasGradient, isClipPathChanged } from './helper';\nimport Path from '../graphic/Path';\nimport ZRImage from '../graphic/Image';\nimport TSpan from '../graphic/TSpan';\nimport { DEFAULT_FONT } from '../contain/text';\nimport { map } from '../core/util';\nimport { normalizeLineDash } from '../graphic/helper/dashStyle';\nimport Element from '../Element';\nimport IncrementalDisplayable from '../graphic/IncrementalDisplayable';\nvar pathProxyForDraw = new PathProxy(true);\nfunction styleHasStroke(style) {\n    var stroke = style.stroke;\n    return !(stroke == null || stroke === 'none' || !(style.lineWidth > 0));\n}\nfunction styleHasFill(style) {\n    var fill = style.fill;\n    return fill != null && fill !== 'none';\n}\nfunction doFillPath(ctx, style) {\n    if (style.fillOpacity != null && style.fillOpacity !== 1) {\n        var originalGlobalAlpha = ctx.globalAlpha;\n        ctx.globalAlpha = style.fillOpacity * style.opacity;\n        ctx.fill();\n        ctx.globalAlpha = originalGlobalAlpha;\n    }\n    else {\n        ctx.fill();\n    }\n}\nfunction doStrokePath(ctx, style) {\n    if (style.strokeOpacity != null && style.strokeOpacity !== 1) {\n        var originalGlobalAlpha = ctx.globalAlpha;\n        ctx.globalAlpha = style.strokeOpacity * style.opacity;\n        ctx.stroke();\n        ctx.globalAlpha = originalGlobalAlpha;\n    }\n    else {\n        ctx.stroke();\n    }\n}\nexport function createCanvasPattern(ctx, pattern, el) {\n    var image = createOrUpdateImage(pattern.image, pattern.__image, el);\n    if (isImageReady(image)) {\n        var canvasPattern = ctx.createPattern(image, pattern.repeat || 'repeat');\n        if (typeof DOMMatrix === 'function') {\n            var matrix = new DOMMatrix();\n            matrix.rotateSelf(0, 0, (pattern.rotation || 0) / Math.PI * 180);\n            matrix.scaleSelf((pattern.scaleX || 1), (pattern.scaleY || 1));\n            matrix.translateSelf((pattern.x || 0), (pattern.y || 0));\n            canvasPattern.setTransform(matrix);\n        }\n        return canvasPattern;\n    }\n}\nfunction brushPath(ctx, el, style, inBatch) {\n    var hasStroke = styleHasStroke(style);\n    var hasFill = styleHasFill(style);\n    var strokePercent = style.strokePercent;\n    var strokePart = strokePercent < 1;\n    var firstDraw = !el.path;\n    if ((!el.silent || strokePart) && firstDraw) {\n        el.createPathProxy();\n    }\n    var path = el.path || pathProxyForDraw;\n    if (!inBatch) {\n        var fill = style.fill;\n        var stroke = style.stroke;\n        var hasFillGradient = hasFill && !!fill.colorStops;\n        var hasStrokeGradient = hasStroke && !!stroke.colorStops;\n        var hasFillPattern = hasFill && !!fill.image;\n        var hasStrokePattern = hasStroke && !!stroke.image;\n        var fillGradient = void 0;\n        var strokeGradient = void 0;\n        var fillPattern = void 0;\n        var strokePattern = void 0;\n        var rect = void 0;\n        if (hasFillGradient || hasStrokeGradient) {\n            rect = el.getBoundingRect();\n        }\n        if (hasFillGradient) {\n            fillGradient = el.__dirty\n                ? getCanvasGradient(ctx, fill, rect)\n                : el.__canvasFillGradient;\n            el.__canvasFillGradient = fillGradient;\n        }\n        if (hasStrokeGradient) {\n            strokeGradient = el.__dirty\n                ? getCanvasGradient(ctx, stroke, rect)\n                : el.__canvasStrokeGradient;\n            el.__canvasStrokeGradient = strokeGradient;\n        }\n        if (hasFillPattern) {\n            fillPattern = (el.__dirty || !el.__canvasFillPattern)\n                ? createCanvasPattern(ctx, fill, el)\n                : el.__canvasFillPattern;\n            el.__canvasFillPattern = fillPattern;\n        }\n        if (hasStrokePattern) {\n            strokePattern = (el.__dirty || !el.__canvasStrokePattern)\n                ? createCanvasPattern(ctx, stroke, el)\n                : el.__canvasStrokePattern;\n            el.__canvasStrokePattern = fillPattern;\n        }\n        if (hasFillGradient) {\n            ctx.fillStyle = fillGradient;\n        }\n        else if (hasFillPattern) {\n            if (fillPattern) {\n                ctx.fillStyle = fillPattern;\n            }\n            else {\n                hasFill = false;\n            }\n        }\n        if (hasStrokeGradient) {\n            ctx.strokeStyle = strokeGradient;\n        }\n        else if (hasStrokePattern) {\n            if (strokePattern) {\n                ctx.strokeStyle = strokePattern;\n            }\n            else {\n                hasStroke = false;\n            }\n        }\n    }\n    var lineDash = style.lineDash && style.lineWidth > 0 && normalizeLineDash(style.lineDash, style.lineWidth);\n    var lineDashOffset = style.lineDashOffset;\n    var ctxLineDash = !!ctx.setLineDash;\n    var scale = el.getGlobalScale();\n    path.setScale(scale[0], scale[1], el.segmentIgnoreThreshold);\n    if (lineDash) {\n        var lineScale_1 = (style.strokeNoScale && el.getLineScale) ? el.getLineScale() : 1;\n        if (lineScale_1 && lineScale_1 !== 1) {\n            lineDash = map(lineDash, function (rawVal) {\n                return rawVal / lineScale_1;\n            });\n            lineDashOffset /= lineScale_1;\n        }\n    }\n    var needsRebuild = true;\n    if (firstDraw || (el.__dirty & Path.SHAPE_CHANGED_BIT)\n        || (lineDash && !ctxLineDash && hasStroke)) {\n        path.setDPR(ctx.dpr);\n        if (strokePart) {\n            path.setContext(null);\n        }\n        else {\n            path.setContext(ctx);\n            needsRebuild = false;\n        }\n        path.reset();\n        if (lineDash && !ctxLineDash) {\n            path.setLineDash(lineDash);\n            path.setLineDashOffset(lineDashOffset);\n        }\n        el.buildPath(path, el.shape, inBatch);\n        path.toStatic();\n        el.pathUpdated();\n    }\n    if (needsRebuild) {\n        path.rebuildPath(ctx, strokePart ? strokePercent : 1);\n    }\n    if (lineDash && ctxLineDash) {\n        ctx.setLineDash(lineDash);\n        ctx.lineDashOffset = lineDashOffset;\n    }\n    if (!inBatch) {\n        if (style.strokeFirst) {\n            if (hasStroke) {\n                doStrokePath(ctx, style);\n            }\n            if (hasFill) {\n                doFillPath(ctx, style);\n            }\n        }\n        else {\n            if (hasFill) {\n                doFillPath(ctx, style);\n            }\n            if (hasStroke) {\n                doStrokePath(ctx, style);\n            }\n        }\n    }\n    if (lineDash && ctxLineDash) {\n        ctx.setLineDash([]);\n    }\n}\nfunction brushImage(ctx, el, style) {\n    var image = el.__image = createOrUpdateImage(style.image, el.__image, el, el.onload);\n    if (!image || !isImageReady(image)) {\n        return;\n    }\n    var x = style.x || 0;\n    var y = style.y || 0;\n    var width = el.getWidth();\n    var height = el.getHeight();\n    var aspect = image.width / image.height;\n    if (width == null && height != null) {\n        width = height * aspect;\n    }\n    else if (height == null && width != null) {\n        height = width / aspect;\n    }\n    else if (width == null && height == null) {\n        width = image.width;\n        height = image.height;\n    }\n    if (style.sWidth && style.sHeight) {\n        var sx = style.sx || 0;\n        var sy = style.sy || 0;\n        ctx.drawImage(image, sx, sy, style.sWidth, style.sHeight, x, y, width, height);\n    }\n    else if (style.sx && style.sy) {\n        var sx = style.sx;\n        var sy = style.sy;\n        var sWidth = width - sx;\n        var sHeight = height - sy;\n        ctx.drawImage(image, sx, sy, sWidth, sHeight, x, y, width, height);\n    }\n    else {\n        ctx.drawImage(image, x, y, width, height);\n    }\n}\nfunction brushText(ctx, el, style) {\n    var text = style.text;\n    text != null && (text += '');\n    if (text) {\n        ctx.font = style.font || DEFAULT_FONT;\n        ctx.textAlign = style.textAlign;\n        ctx.textBaseline = style.textBaseline;\n        var hasLineDash = void 0;\n        if (ctx.setLineDash) {\n            var lineDash = style.lineDash && style.lineWidth > 0 && normalizeLineDash(style.lineDash, style.lineWidth);\n            var lineDashOffset = style.lineDashOffset;\n            if (lineDash) {\n                var lineScale_2 = (style.strokeNoScale && el.getLineScale) ? el.getLineScale() : 1;\n                if (lineScale_2 && lineScale_2 !== 1) {\n                    lineDash = map(lineDash, function (rawVal) {\n                        return rawVal / lineScale_2;\n                    });\n                    lineDashOffset /= lineScale_2;\n                }\n                ctx.setLineDash(lineDash);\n                ctx.lineDashOffset = lineDashOffset;\n                hasLineDash = true;\n            }\n        }\n        if (style.strokeFirst) {\n            if (styleHasStroke(style)) {\n                ctx.strokeText(text, style.x, style.y);\n            }\n            if (styleHasFill(style)) {\n                ctx.fillText(text, style.x, style.y);\n            }\n        }\n        else {\n            if (styleHasFill(style)) {\n                ctx.fillText(text, style.x, style.y);\n            }\n            if (styleHasStroke(style)) {\n                ctx.strokeText(text, style.x, style.y);\n            }\n        }\n        if (hasLineDash) {\n            ctx.setLineDash([]);\n        }\n    }\n}\nvar SHADOW_NUMBER_PROPS = ['shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];\nvar STROKE_PROPS = [\n    ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]\n];\nfunction bindCommonProps(ctx, style, prevStyle, forceSetAll, scope) {\n    var styleChanged = false;\n    if (!forceSetAll) {\n        prevStyle = prevStyle || {};\n        if (style === prevStyle) {\n            return false;\n        }\n    }\n    if (forceSetAll || style.opacity !== prevStyle.opacity) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.globalAlpha = style.opacity == null ? DEFAULT_COMMON_STYLE.opacity : style.opacity;\n    }\n    if (forceSetAll || style.blend !== prevStyle.blend) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.globalCompositeOperation = style.blend || DEFAULT_COMMON_STYLE.blend;\n    }\n    for (var i = 0; i < SHADOW_NUMBER_PROPS.length; i++) {\n        var propName = SHADOW_NUMBER_PROPS[i];\n        if (forceSetAll || style[propName] !== prevStyle[propName]) {\n            if (!styleChanged) {\n                flushPathDrawn(ctx, scope);\n                styleChanged = true;\n            }\n            ctx[propName] = ctx.dpr * (style[propName] || 0);\n        }\n    }\n    if (forceSetAll || style.shadowColor !== prevStyle.shadowColor) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.shadowColor = style.shadowColor || DEFAULT_COMMON_STYLE.shadowColor;\n    }\n    return styleChanged;\n}\nfunction bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetAll, scope) {\n    var style = getStyle(el, scope.inHover);\n    var prevStyle = forceSetAll\n        ? null\n        : (prevEl && getStyle(prevEl, scope.inHover) || {});\n    if (style === prevStyle) {\n        return false;\n    }\n    var styleChanged = bindCommonProps(ctx, style, prevStyle, forceSetAll, scope);\n    if (forceSetAll || style.fill !== prevStyle.fill) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.fillStyle = style.fill;\n    }\n    if (forceSetAll || style.stroke !== prevStyle.stroke) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.strokeStyle = style.stroke;\n    }\n    if (forceSetAll || style.opacity !== prevStyle.opacity) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;\n    }\n    if (el.hasStroke()) {\n        var lineWidth = style.lineWidth;\n        var newLineWidth = lineWidth / ((style.strokeNoScale && el && el.getLineScale) ? el.getLineScale() : 1);\n        if (ctx.lineWidth !== newLineWidth) {\n            if (!styleChanged) {\n                flushPathDrawn(ctx, scope);\n                styleChanged = true;\n            }\n            ctx.lineWidth = newLineWidth;\n        }\n    }\n    for (var i = 0; i < STROKE_PROPS.length; i++) {\n        var prop = STROKE_PROPS[i];\n        var propName = prop[0];\n        if (forceSetAll || style[propName] !== prevStyle[propName]) {\n            if (!styleChanged) {\n                flushPathDrawn(ctx, scope);\n                styleChanged = true;\n            }\n            ctx[propName] = style[propName] || prop[1];\n        }\n    }\n    return styleChanged;\n}\nfunction bindImageStyle(ctx, el, prevEl, forceSetAll, scope) {\n    return bindCommonProps(ctx, getStyle(el, scope.inHover), prevEl && getStyle(prevEl, scope.inHover), forceSetAll, scope);\n}\nfunction setContextTransform(ctx, el) {\n    var m = el.transform;\n    var dpr = ctx.dpr || 1;\n    if (m) {\n        ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);\n    }\n    else {\n        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n    }\n}\nfunction updateClipStatus(clipPaths, ctx, scope) {\n    var allClipped = false;\n    for (var i = 0; i < clipPaths.length; i++) {\n        var clipPath = clipPaths[i];\n        allClipped = allClipped || clipPath.isZeroArea();\n        setContextTransform(ctx, clipPath);\n        ctx.beginPath();\n        clipPath.buildPath(ctx, clipPath.shape);\n        ctx.clip();\n    }\n    scope.allClipped = allClipped;\n}\nfunction isTransformChanged(m0, m1) {\n    if (m0 && m1) {\n        return m0[0] !== m1[0]\n            || m0[1] !== m1[1]\n            || m0[2] !== m1[2]\n            || m0[3] !== m1[3]\n            || m0[4] !== m1[4]\n            || m0[5] !== m1[5];\n    }\n    else if (!m0 && !m1) {\n        return false;\n    }\n    return true;\n}\nvar DRAW_TYPE_PATH = 1;\nvar DRAW_TYPE_IMAGE = 2;\nvar DRAW_TYPE_TEXT = 3;\nvar DRAW_TYPE_INCREMENTAL = 4;\nfunction canPathBatch(style) {\n    var hasFill = styleHasFill(style);\n    var hasStroke = styleHasStroke(style);\n    return !(style.lineDash\n        || !(+hasFill ^ +hasStroke)\n        || (hasFill && typeof style.fill !== 'string')\n        || (hasStroke && typeof style.stroke !== 'string')\n        || style.strokePercent < 1\n        || style.strokeOpacity < 1\n        || style.fillOpacity < 1);\n}\nfunction flushPathDrawn(ctx, scope) {\n    scope.batchFill && ctx.fill();\n    scope.batchStroke && ctx.stroke();\n    scope.batchFill = '';\n    scope.batchStroke = '';\n}\nfunction getStyle(el, inHover) {\n    return inHover ? (el.__hoverStyle || el.style) : el.style;\n}\nexport function brushSingle(ctx, el) {\n    brush(ctx, el, { inHover: false, viewWidth: 0, viewHeight: 0 }, true);\n}\nexport function brush(ctx, el, scope, isLast) {\n    var m = el.transform;\n    if (!el.shouldBePainted(scope.viewWidth, scope.viewHeight, false, false)) {\n        el.__dirty &= ~Element.REDARAW_BIT;\n        el.__isRendered = false;\n        return;\n    }\n    var clipPaths = el.__clipPaths;\n    var prevElClipPaths = scope.prevElClipPaths;\n    var forceSetTransform = false;\n    var forceSetStyle = false;\n    if (!prevElClipPaths || isClipPathChanged(clipPaths, prevElClipPaths)) {\n        if (prevElClipPaths && prevElClipPaths.length) {\n            flushPathDrawn(ctx, scope);\n            ctx.restore();\n            forceSetStyle = forceSetTransform = true;\n            scope.prevElClipPaths = null;\n            scope.allClipped = false;\n            scope.prevEl = null;\n        }\n        if (clipPaths && clipPaths.length) {\n            flushPathDrawn(ctx, scope);\n            ctx.save();\n            updateClipStatus(clipPaths, ctx, scope);\n            forceSetTransform = true;\n        }\n        scope.prevElClipPaths = clipPaths;\n    }\n    if (scope.allClipped) {\n        el.__isRendered = false;\n        return;\n    }\n    el.beforeBrush && el.beforeBrush();\n    el.innerBeforeBrush();\n    var prevEl = scope.prevEl;\n    if (!prevEl) {\n        forceSetStyle = forceSetTransform = true;\n    }\n    var canBatchPath = el instanceof Path\n        && el.autoBatch\n        && canPathBatch(el.style);\n    if (forceSetTransform || isTransformChanged(m, prevEl.transform)) {\n        flushPathDrawn(ctx, scope);\n        setContextTransform(ctx, el);\n    }\n    else if (!canBatchPath) {\n        flushPathDrawn(ctx, scope);\n    }\n    var style = getStyle(el, scope.inHover);\n    if (el instanceof Path) {\n        if (scope.lastDrawType !== DRAW_TYPE_PATH) {\n            forceSetStyle = true;\n            scope.lastDrawType = DRAW_TYPE_PATH;\n        }\n        bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);\n        if (!canBatchPath || (!scope.batchFill && !scope.batchStroke)) {\n            ctx.beginPath();\n        }\n        brushPath(ctx, el, style, canBatchPath);\n        if (canBatchPath) {\n            scope.batchFill = style.fill || '';\n            scope.batchStroke = style.stroke || '';\n        }\n    }\n    else {\n        if (el instanceof TSpan) {\n            if (scope.lastDrawType !== DRAW_TYPE_TEXT) {\n                forceSetStyle = true;\n                scope.lastDrawType = DRAW_TYPE_TEXT;\n            }\n            bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);\n            brushText(ctx, el, style);\n        }\n        else if (el instanceof ZRImage) {\n            if (scope.lastDrawType !== DRAW_TYPE_IMAGE) {\n                forceSetStyle = true;\n                scope.lastDrawType = DRAW_TYPE_IMAGE;\n            }\n            bindImageStyle(ctx, el, prevEl, forceSetStyle, scope);\n            brushImage(ctx, el, style);\n        }\n        else if (el instanceof IncrementalDisplayable) {\n            if (scope.lastDrawType !== DRAW_TYPE_INCREMENTAL) {\n                forceSetStyle = true;\n                scope.lastDrawType = DRAW_TYPE_INCREMENTAL;\n            }\n            brushIncremental(ctx, el, scope);\n        }\n    }\n    if (canBatchPath && isLast) {\n        flushPathDrawn(ctx, scope);\n    }\n    el.innerAfterBrush();\n    el.afterBrush && el.afterBrush();\n    scope.prevEl = el;\n    el.__dirty = 0;\n    el.__isRendered = true;\n}\nfunction brushIncremental(ctx, el, scope) {\n    var displayables = el.getDisplayables();\n    var temporalDisplayables = el.getTemporalDisplayables();\n    ctx.save();\n    var innerScope = {\n        prevElClipPaths: null,\n        prevEl: null,\n        allClipped: false,\n        viewWidth: scope.viewWidth,\n        viewHeight: scope.viewHeight,\n        inHover: scope.inHover\n    };\n    var i;\n    var len;\n    for (i = el.getCursor(), len = displayables.length; i < len; i++) {\n        var displayable = displayables[i];\n        displayable.beforeBrush && displayable.beforeBrush();\n        displayable.innerBeforeBrush();\n        brush(ctx, displayable, innerScope, i === len - 1);\n        displayable.innerAfterBrush();\n        displayable.afterBrush && displayable.afterBrush();\n        innerScope.prevEl = displayable;\n    }\n    for (var i_1 = 0, len_1 = temporalDisplayables.length; i_1 < len_1; i_1++) {\n        var displayable = temporalDisplayables[i_1];\n        displayable.beforeBrush && displayable.beforeBrush();\n        displayable.innerBeforeBrush();\n        brush(ctx, displayable, innerScope, i_1 === len_1 - 1);\n        displayable.innerAfterBrush();\n        displayable.afterBrush && displayable.afterBrush();\n        innerScope.prevEl = displayable;\n    }\n    el.clearTemporalDisplayables();\n    el.notClear = true;\n    ctx.restore();\n}\n"]},"metadata":{},"sourceType":"module"}