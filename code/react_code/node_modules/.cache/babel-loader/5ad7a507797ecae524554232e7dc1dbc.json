{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { isFunction, extend, createHashMap } from 'zrender/lib/core/util';\nimport makeStyleMapper from '../model/mixin/makeStyleMapper';\nimport { ITEM_STYLE_KEY_MAP } from '../model/mixin/itemStyle';\nimport { LINE_STYLE_KEY_MAP } from '../model/mixin/lineStyle';\nimport Model from '../model/Model';\nimport { makeInner } from '../util/model';\nvar inner = makeInner();\nvar defaultStyleMappers = {\n  itemStyle: makeStyleMapper(ITEM_STYLE_KEY_MAP, true),\n  lineStyle: makeStyleMapper(LINE_STYLE_KEY_MAP, true)\n};\nvar defaultColorKey = {\n  lineStyle: 'stroke',\n  itemStyle: 'fill'\n};\n\nfunction getStyleMapper(seriesModel, stylePath) {\n  var styleMapper = seriesModel.visualStyleMapper || defaultStyleMappers[stylePath];\n\n  if (!styleMapper) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return defaultStyleMappers.itemStyle;\n  }\n\n  return styleMapper;\n}\n\nfunction getDefaultColorKey(seriesModel, stylePath) {\n  // return defaultColorKey[stylePath] ||\n  var colorKey = seriesModel.visualDrawType || defaultColorKey[stylePath];\n\n  if (!colorKey) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return 'fill';\n  }\n\n  return colorKey;\n}\n\nvar seriesStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle'; // Set in itemStyle\n\n    var styleModel = seriesModel.getModel(stylePath);\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var globalStyle = getStyle(styleModel);\n    var decalOption = styleModel.getShallow('decal');\n\n    if (decalOption) {\n      data.setVisual('decal', decalOption);\n      decalOption.dirty = true;\n    } // TODO\n\n\n    var colorKey = getDefaultColorKey(seriesModel, stylePath);\n    var color = globalStyle[colorKey]; // TODO style callback\n\n    var colorCallback = isFunction(color) ? color : null; // Get from color palette by default.\n\n    if (!globalStyle[colorKey] || colorCallback) {\n      // Note: if some series has color specified (e.g., by itemStyle.color), we DO NOT\n      // make it effect palette. Bacause some scenarios users need to make some series\n      // transparent or as background, which should better not effect the palette.\n      globalStyle[colorKey] = seriesModel.getColorFromPalette( // TODO series count changed.\n      seriesModel.name, null, ecModel.getSeriesCount());\n      data.setVisual('colorFromPalette', true);\n    }\n\n    data.setVisual('style', globalStyle);\n    data.setVisual('drawType', colorKey); // Only visible series has each data be visual encoded\n\n    if (!ecModel.isSeriesFiltered(seriesModel) && colorCallback) {\n      data.setVisual('colorFromPalette', false);\n      return {\n        dataEach: function (data, idx) {\n          var dataParams = seriesModel.getDataParams(idx);\n          var itemStyle = extend({}, globalStyle);\n          itemStyle[colorKey] = colorCallback(dataParams);\n          data.setItemVisual(idx, 'style', itemStyle);\n        }\n      };\n    }\n  }\n};\nvar sharedModel = new Model();\nvar dataStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    if (seriesModel.ignoreStyleOnData || ecModel.isSeriesFiltered(seriesModel)) {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle'; // Set in itemStyle\n\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var colorKey = data.getVisual('drawType');\n    return {\n      dataEach: data.hasItemOption ? function (data, idx) {\n        // Not use getItemModel for performance considuration\n        var rawItem = data.getRawDataItem(idx);\n\n        if (rawItem && rawItem[stylePath]) {\n          sharedModel.option = rawItem[stylePath];\n          var style = getStyle(sharedModel);\n          var existsStyle = data.ensureUniqueItemVisual(idx, 'style');\n          extend(existsStyle, style);\n\n          if (sharedModel.option.decal) {\n            data.setItemVisual(idx, 'decal', sharedModel.option.decal);\n            sharedModel.option.decal.dirty = true;\n          }\n\n          if (colorKey in style) {\n            data.setItemVisual(idx, 'colorFromPalette', false);\n          }\n        }\n      } : null\n    };\n  }\n}; // Pick color from palette for the data which has not been set with color yet.\n// Note: do not support stream rendering. No such cases yet.\n\nvar dataColorPaletteTask = {\n  performRawSeries: true,\n  overallReset: function (ecModel) {\n    // Each type of series use one scope.\n    // Pie and funnel are using diferrent scopes\n    var paletteScopeGroupByType = createHashMap();\n    ecModel.eachSeries(function (seriesModel) {\n      if (!seriesModel.useColorPaletteOnData) {\n        return;\n      }\n\n      var colorScope = paletteScopeGroupByType.get(seriesModel.type);\n\n      if (!colorScope) {\n        colorScope = {};\n        paletteScopeGroupByType.set(seriesModel.type, colorScope);\n      }\n\n      inner(seriesModel).scope = colorScope;\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (!seriesModel.useColorPaletteOnData || ecModel.isSeriesFiltered(seriesModel)) {\n        return;\n      }\n\n      var dataAll = seriesModel.getRawData();\n      var idxMap = {};\n      var data = seriesModel.getData();\n      var colorScope = inner(seriesModel).scope;\n      var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle';\n      var colorKey = getDefaultColorKey(seriesModel, stylePath);\n      data.each(function (idx) {\n        var rawIdx = data.getRawIndex(idx);\n        idxMap[rawIdx] = idx;\n      }); // Iterate on data before filtered. To make sure color from palette can be\n      // Consistent when toggling legend.\n\n      dataAll.each(function (rawIdx) {\n        var idx = idxMap[rawIdx];\n        var fromPalette = data.getItemVisual(idx, 'colorFromPalette'); // Get color from palette for each data only when the color is inherited from series color, which is\n        // also picked from color palette. So following situation is not in the case:\n        // 1. series.itemStyle.color is set\n        // 2. color is encoded by visualMap\n\n        if (fromPalette) {\n          var itemStyle = data.ensureUniqueItemVisual(idx, 'style');\n          var name_1 = dataAll.getName(rawIdx) || rawIdx + '';\n          var dataCount = dataAll.count();\n          itemStyle[colorKey] = seriesModel.getColorFromPalette(name_1, colorScope, dataCount);\n        }\n      });\n    });\n  }\n};\nexport { seriesStyleTask, dataStyleTask, dataColorPaletteTask };","map":{"version":3,"sources":["/home/kzj/project/finalize/B-S-/源码/前端/node_modules/echarts/lib/visual/style.js"],"names":["isFunction","extend","createHashMap","makeStyleMapper","ITEM_STYLE_KEY_MAP","LINE_STYLE_KEY_MAP","Model","makeInner","inner","defaultStyleMappers","itemStyle","lineStyle","defaultColorKey","getStyleMapper","seriesModel","stylePath","styleMapper","visualStyleMapper","console","warn","getDefaultColorKey","colorKey","visualDrawType","seriesStyleTask","createOnAllSeries","performRawSeries","reset","ecModel","data","getData","visualStyleAccessPath","styleModel","getModel","getStyle","globalStyle","decalOption","getShallow","setVisual","dirty","color","colorCallback","getColorFromPalette","name","getSeriesCount","isSeriesFiltered","dataEach","idx","dataParams","getDataParams","setItemVisual","sharedModel","dataStyleTask","ignoreStyleOnData","getVisual","hasItemOption","rawItem","getRawDataItem","option","style","existsStyle","ensureUniqueItemVisual","decal","dataColorPaletteTask","overallReset","paletteScopeGroupByType","eachSeries","useColorPaletteOnData","colorScope","get","type","set","scope","dataAll","getRawData","idxMap","each","rawIdx","getRawIndex","fromPalette","getItemVisual","name_1","getName","dataCount","count"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { isFunction, extend, createHashMap } from 'zrender/lib/core/util';\nimport makeStyleMapper from '../model/mixin/makeStyleMapper';\nimport { ITEM_STYLE_KEY_MAP } from '../model/mixin/itemStyle';\nimport { LINE_STYLE_KEY_MAP } from '../model/mixin/lineStyle';\nimport Model from '../model/Model';\nimport { makeInner } from '../util/model';\nvar inner = makeInner();\nvar defaultStyleMappers = {\n  itemStyle: makeStyleMapper(ITEM_STYLE_KEY_MAP, true),\n  lineStyle: makeStyleMapper(LINE_STYLE_KEY_MAP, true)\n};\nvar defaultColorKey = {\n  lineStyle: 'stroke',\n  itemStyle: 'fill'\n};\n\nfunction getStyleMapper(seriesModel, stylePath) {\n  var styleMapper = seriesModel.visualStyleMapper || defaultStyleMappers[stylePath];\n\n  if (!styleMapper) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return defaultStyleMappers.itemStyle;\n  }\n\n  return styleMapper;\n}\n\nfunction getDefaultColorKey(seriesModel, stylePath) {\n  // return defaultColorKey[stylePath] ||\n  var colorKey = seriesModel.visualDrawType || defaultColorKey[stylePath];\n\n  if (!colorKey) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return 'fill';\n  }\n\n  return colorKey;\n}\n\nvar seriesStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle'; // Set in itemStyle\n\n    var styleModel = seriesModel.getModel(stylePath);\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var globalStyle = getStyle(styleModel);\n    var decalOption = styleModel.getShallow('decal');\n\n    if (decalOption) {\n      data.setVisual('decal', decalOption);\n      decalOption.dirty = true;\n    } // TODO\n\n\n    var colorKey = getDefaultColorKey(seriesModel, stylePath);\n    var color = globalStyle[colorKey]; // TODO style callback\n\n    var colorCallback = isFunction(color) ? color : null; // Get from color palette by default.\n\n    if (!globalStyle[colorKey] || colorCallback) {\n      // Note: if some series has color specified (e.g., by itemStyle.color), we DO NOT\n      // make it effect palette. Bacause some scenarios users need to make some series\n      // transparent or as background, which should better not effect the palette.\n      globalStyle[colorKey] = seriesModel.getColorFromPalette( // TODO series count changed.\n      seriesModel.name, null, ecModel.getSeriesCount());\n      data.setVisual('colorFromPalette', true);\n    }\n\n    data.setVisual('style', globalStyle);\n    data.setVisual('drawType', colorKey); // Only visible series has each data be visual encoded\n\n    if (!ecModel.isSeriesFiltered(seriesModel) && colorCallback) {\n      data.setVisual('colorFromPalette', false);\n      return {\n        dataEach: function (data, idx) {\n          var dataParams = seriesModel.getDataParams(idx);\n          var itemStyle = extend({}, globalStyle);\n          itemStyle[colorKey] = colorCallback(dataParams);\n          data.setItemVisual(idx, 'style', itemStyle);\n        }\n      };\n    }\n  }\n};\nvar sharedModel = new Model();\nvar dataStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    if (seriesModel.ignoreStyleOnData || ecModel.isSeriesFiltered(seriesModel)) {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle'; // Set in itemStyle\n\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var colorKey = data.getVisual('drawType');\n    return {\n      dataEach: data.hasItemOption ? function (data, idx) {\n        // Not use getItemModel for performance considuration\n        var rawItem = data.getRawDataItem(idx);\n\n        if (rawItem && rawItem[stylePath]) {\n          sharedModel.option = rawItem[stylePath];\n          var style = getStyle(sharedModel);\n          var existsStyle = data.ensureUniqueItemVisual(idx, 'style');\n          extend(existsStyle, style);\n\n          if (sharedModel.option.decal) {\n            data.setItemVisual(idx, 'decal', sharedModel.option.decal);\n            sharedModel.option.decal.dirty = true;\n          }\n\n          if (colorKey in style) {\n            data.setItemVisual(idx, 'colorFromPalette', false);\n          }\n        }\n      } : null\n    };\n  }\n}; // Pick color from palette for the data which has not been set with color yet.\n// Note: do not support stream rendering. No such cases yet.\n\nvar dataColorPaletteTask = {\n  performRawSeries: true,\n  overallReset: function (ecModel) {\n    // Each type of series use one scope.\n    // Pie and funnel are using diferrent scopes\n    var paletteScopeGroupByType = createHashMap();\n    ecModel.eachSeries(function (seriesModel) {\n      if (!seriesModel.useColorPaletteOnData) {\n        return;\n      }\n\n      var colorScope = paletteScopeGroupByType.get(seriesModel.type);\n\n      if (!colorScope) {\n        colorScope = {};\n        paletteScopeGroupByType.set(seriesModel.type, colorScope);\n      }\n\n      inner(seriesModel).scope = colorScope;\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (!seriesModel.useColorPaletteOnData || ecModel.isSeriesFiltered(seriesModel)) {\n        return;\n      }\n\n      var dataAll = seriesModel.getRawData();\n      var idxMap = {};\n      var data = seriesModel.getData();\n      var colorScope = inner(seriesModel).scope;\n      var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle';\n      var colorKey = getDefaultColorKey(seriesModel, stylePath);\n      data.each(function (idx) {\n        var rawIdx = data.getRawIndex(idx);\n        idxMap[rawIdx] = idx;\n      }); // Iterate on data before filtered. To make sure color from palette can be\n      // Consistent when toggling legend.\n\n      dataAll.each(function (rawIdx) {\n        var idx = idxMap[rawIdx];\n        var fromPalette = data.getItemVisual(idx, 'colorFromPalette'); // Get color from palette for each data only when the color is inherited from series color, which is\n        // also picked from color palette. So following situation is not in the case:\n        // 1. series.itemStyle.color is set\n        // 2. color is encoded by visualMap\n\n        if (fromPalette) {\n          var itemStyle = data.ensureUniqueItemVisual(idx, 'style');\n          var name_1 = dataAll.getName(rawIdx) || rawIdx + '';\n          var dataCount = dataAll.count();\n          itemStyle[colorKey] = seriesModel.getColorFromPalette(name_1, colorScope, dataCount);\n        }\n      });\n    });\n  }\n};\nexport { seriesStyleTask, dataStyleTask, dataColorPaletteTask };"]},"metadata":{},"sourceType":"module"}