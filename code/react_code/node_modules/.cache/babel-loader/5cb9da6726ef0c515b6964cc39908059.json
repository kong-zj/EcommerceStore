{"ast":null,"code":"var TruffleError = require(\"@truffle/error\");\n\nvar inherits = require(\"util\").inherits;\n\nvar utils = require(\"./utils\");\n\ninherits(StatusError, TruffleError);\nvar defaultGas = 90000;\n\nfunction StatusError(args, tx, receipt, reason) {\n  var message;\n  var gasLimit = args.gas || defaultGas;\n  var reasonString = \"\";\n  if (reason) reasonString = `Reason given: ${reason}.`;\n\n  if (utils.bigNumberify(receipt.gasUsed).eq(utils.bigNumberify(gasLimit))) {\n    message = \"Transaction: \" + tx + \" exited with an error (status 0) after consuming all gas.\\n\" + \"     Please check that the transaction:\\n\" + \"     - satisfies all conditions set by Solidity `assert` statements.\\n\" + \"     - has enough gas to execute the full transaction.\\n\" + \"     - does not trigger an invalid opcode by other means (ex: accessing an array out of bounds).\";\n  } else {\n    message = `Transaction: ${tx} exited with an error (status 0). ${reasonString}\\n` + \"     Please check that the transaction:\\n\" + \"     - satisfies all conditions set by Solidity `require` statements.\\n\" + \"     - does not trigger a Solidity `revert` statement.\\n\";\n  }\n\n  StatusError.super_.call(this, message);\n  this.tx = tx;\n  this.receipt = receipt;\n  this.reason = reason;\n}\n\nmodule.exports = StatusError;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/truffle-contract/lib/statuserror.js"],"names":["TruffleError","require","inherits","utils","StatusError","defaultGas","args","tx","receipt","reason","message","gasLimit","gas","reasonString","bigNumberify","gasUsed","eq","super_","call","module","exports"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,MAAD,CAAP,CAAgBC,QAA/B;;AACA,IAAIC,KAAK,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AAEAC,QAAQ,CAACE,WAAD,EAAcJ,YAAd,CAAR;AAEA,IAAIK,UAAU,GAAG,KAAjB;;AAEA,SAASD,WAAT,CAAqBE,IAArB,EAA2BC,EAA3B,EAA+BC,OAA/B,EAAwCC,MAAxC,EAAgD;AAC9C,MAAIC,OAAJ;AACA,MAAIC,QAAQ,GAAGL,IAAI,CAACM,GAAL,IAAYP,UAA3B;AACA,MAAIQ,YAAY,GAAG,EAAnB;AAEA,MAAIJ,MAAJ,EAAYI,YAAY,GAAI,iBAAgBJ,MAAO,GAAvC;;AAEZ,MAAIN,KAAK,CAACW,YAAN,CAAmBN,OAAO,CAACO,OAA3B,EAAoCC,EAApC,CAAuCb,KAAK,CAACW,YAAN,CAAmBH,QAAnB,CAAvC,CAAJ,EAA0E;AACxED,IAAAA,OAAO,GACL,kBACAH,EADA,GAEA,6DAFA,GAGA,2CAHA,GAIA,wEAJA,GAKA,0DALA,GAMA,kGAPF;AAQD,GATD,MASO;AACLG,IAAAA,OAAO,GACJ,gBAAeH,EAAG,qCAAoCM,YAAa,IAApE,GACA,2CADA,GAEA,yEAFA,GAGA,0DAJF;AAKD;;AAEDT,EAAAA,WAAW,CAACa,MAAZ,CAAmBC,IAAnB,CAAwB,IAAxB,EAA8BR,OAA9B;AACA,OAAKH,EAAL,GAAUA,EAAV;AACA,OAAKC,OAAL,GAAeA,OAAf;AACA,OAAKC,MAAL,GAAcA,MAAd;AACD;;AAEDU,MAAM,CAACC,OAAP,GAAiBhB,WAAjB","sourcesContent":["var TruffleError = require(\"@truffle/error\");\nvar inherits = require(\"util\").inherits;\nvar utils = require(\"./utils\");\n\ninherits(StatusError, TruffleError);\n\nvar defaultGas = 90000;\n\nfunction StatusError(args, tx, receipt, reason) {\n  var message;\n  var gasLimit = args.gas || defaultGas;\n  var reasonString = \"\";\n\n  if (reason) reasonString = `Reason given: ${reason}.`;\n\n  if (utils.bigNumberify(receipt.gasUsed).eq(utils.bigNumberify(gasLimit))) {\n    message =\n      \"Transaction: \" +\n      tx +\n      \" exited with an error (status 0) after consuming all gas.\\n\" +\n      \"     Please check that the transaction:\\n\" +\n      \"     - satisfies all conditions set by Solidity `assert` statements.\\n\" +\n      \"     - has enough gas to execute the full transaction.\\n\" +\n      \"     - does not trigger an invalid opcode by other means (ex: accessing an array out of bounds).\";\n  } else {\n    message =\n      `Transaction: ${tx} exited with an error (status 0). ${reasonString}\\n` +\n      \"     Please check that the transaction:\\n\" +\n      \"     - satisfies all conditions set by Solidity `require` statements.\\n\" +\n      \"     - does not trigger a Solidity `revert` statement.\\n\";\n  }\n\n  StatusError.super_.call(this, message);\n  this.tx = tx;\n  this.receipt = receipt;\n  this.reason = reason;\n}\n\nmodule.exports = StatusError;\n"]},"metadata":{},"sourceType":"script"}