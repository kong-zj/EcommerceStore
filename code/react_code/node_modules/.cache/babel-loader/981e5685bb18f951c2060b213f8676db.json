{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport * as numberUtil from '../../util/number';\nimport sliderMove from '../helper/sliderMove';\nimport { unionAxisExtentFromData } from '../../coord/axisHelper';\nimport { ensureScaleRawExtentInfo } from '../../coord/scaleRawExtentInfo';\nimport { getAxisMainType, isCoordSupported } from './helper';\nimport { SINGLE_REFERRING } from '../../util/model';\nvar each = zrUtil.each;\nvar asc = numberUtil.asc;\n/**\n * Operate single axis.\n * One axis can only operated by one axis operator.\n * Different dataZoomModels may be defined to operate the same axis.\n * (i.e. 'inside' data zoom and 'slider' data zoom components)\n * So dataZoomModels share one axisProxy in that case.\n */\n\nvar AxisProxy =\n/** @class */\nfunction () {\n  function AxisProxy(dimName, axisIndex, dataZoomModel, ecModel) {\n    this._dimName = dimName;\n    this._axisIndex = axisIndex;\n    this.ecModel = ecModel;\n    this._dataZoomModel = dataZoomModel; // /**\n    //  * @readOnly\n    //  * @private\n    //  */\n    // this.hasSeriesStacked;\n  }\n  /**\n   * Whether the axisProxy is hosted by dataZoomModel.\n   */\n\n\n  AxisProxy.prototype.hostedBy = function (dataZoomModel) {\n    return this._dataZoomModel === dataZoomModel;\n  };\n  /**\n   * @return Value can only be NaN or finite value.\n   */\n\n\n  AxisProxy.prototype.getDataValueWindow = function () {\n    return this._valueWindow.slice();\n  };\n  /**\n   * @return {Array.<number>}\n   */\n\n\n  AxisProxy.prototype.getDataPercentWindow = function () {\n    return this._percentWindow.slice();\n  };\n\n  AxisProxy.prototype.getTargetSeriesModels = function () {\n    var seriesModels = [];\n    this.ecModel.eachSeries(function (seriesModel) {\n      if (isCoordSupported(seriesModel)) {\n        var axisMainType = getAxisMainType(this._dimName);\n        var axisModel = seriesModel.getReferringComponents(axisMainType, SINGLE_REFERRING).models[0];\n\n        if (axisModel && this._axisIndex === axisModel.componentIndex) {\n          seriesModels.push(seriesModel);\n        }\n      }\n    }, this);\n    return seriesModels;\n  };\n\n  AxisProxy.prototype.getAxisModel = function () {\n    return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);\n  };\n\n  AxisProxy.prototype.getMinMaxSpan = function () {\n    return zrUtil.clone(this._minMaxSpan);\n  };\n  /**\n   * Only calculate by given range and this._dataExtent, do not change anything.\n   */\n\n\n  AxisProxy.prototype.calculateDataWindow = function (opt) {\n    var dataExtent = this._dataExtent;\n    var axisModel = this.getAxisModel();\n    var scale = axisModel.axis.scale;\n\n    var rangePropMode = this._dataZoomModel.getRangePropMode();\n\n    var percentExtent = [0, 100];\n    var percentWindow = [];\n    var valueWindow = [];\n    var hasPropModeValue;\n    each(['start', 'end'], function (prop, idx) {\n      var boundPercent = opt[prop];\n      var boundValue = opt[prop + 'Value']; // Notice: dataZoom is based either on `percentProp` ('start', 'end') or\n      // on `valueProp` ('startValue', 'endValue'). (They are based on the data extent\n      // but not min/max of axis, which will be calculated by data window then).\n      // The former one is suitable for cases that a dataZoom component controls multiple\n      // axes with different unit or extent, and the latter one is suitable for accurate\n      // zoom by pixel (e.g., in dataZoomSelect).\n      // we use `getRangePropMode()` to mark which prop is used. `rangePropMode` is updated\n      // only when setOption or dispatchAction, otherwise it remains its original value.\n      // (Why not only record `percentProp` and always map to `valueProp`? Because\n      // the map `valueProp` -> `percentProp` -> `valueProp` probably not the original\n      // `valueProp`. consider two axes constrolled by one dataZoom. They have different\n      // data extent. All of values that are overflow the `dataExtent` will be calculated\n      // to percent '100%').\n\n      if (rangePropMode[idx] === 'percent') {\n        boundPercent == null && (boundPercent = percentExtent[idx]); // Use scale.parse to math round for category or time axis.\n\n        boundValue = scale.parse(numberUtil.linearMap(boundPercent, percentExtent, dataExtent));\n      } else {\n        hasPropModeValue = true;\n        boundValue = boundValue == null ? dataExtent[idx] : scale.parse(boundValue); // Calculating `percent` from `value` may be not accurate, because\n        // This calculation can not be inversed, because all of values that\n        // are overflow the `dataExtent` will be calculated to percent '100%'\n\n        boundPercent = numberUtil.linearMap(boundValue, dataExtent, percentExtent);\n      } // valueWindow[idx] = round(boundValue);\n      // percentWindow[idx] = round(boundPercent);\n\n\n      valueWindow[idx] = boundValue;\n      percentWindow[idx] = boundPercent;\n    });\n    asc(valueWindow);\n    asc(percentWindow); // The windows from user calling of `dispatchAction` might be out of the extent,\n    // or do not obey the `min/maxSpan`, `min/maxValueSpan`. But we dont restrict window\n    // by `zoomLock` here, because we see `zoomLock` just as a interaction constraint,\n    // where API is able to initialize/modify the window size even though `zoomLock`\n    // specified.\n\n    var spans = this._minMaxSpan;\n    hasPropModeValue ? restrictSet(valueWindow, percentWindow, dataExtent, percentExtent, false) : restrictSet(percentWindow, valueWindow, percentExtent, dataExtent, true);\n\n    function restrictSet(fromWindow, toWindow, fromExtent, toExtent, toValue) {\n      var suffix = toValue ? 'Span' : 'ValueSpan';\n      sliderMove(0, fromWindow, fromExtent, 'all', spans['min' + suffix], spans['max' + suffix]);\n\n      for (var i = 0; i < 2; i++) {\n        toWindow[i] = numberUtil.linearMap(fromWindow[i], fromExtent, toExtent, true);\n        toValue && (toWindow[i] = scale.parse(toWindow[i]));\n      }\n    }\n\n    return {\n      valueWindow: valueWindow,\n      percentWindow: percentWindow\n    };\n  };\n  /**\n   * Notice: reset should not be called before series.restoreData() called,\n   * so it is recommanded to be called in \"process stage\" but not \"model init\n   * stage\".\n   */\n\n\n  AxisProxy.prototype.reset = function (dataZoomModel) {\n    if (dataZoomModel !== this._dataZoomModel) {\n      return;\n    }\n\n    var targetSeries = this.getTargetSeriesModels(); // Culculate data window and data extent, and record them.\n\n    this._dataExtent = calculateDataExtent(this, this._dimName, targetSeries); // this.hasSeriesStacked = false;\n    // each(targetSeries, function (series) {\n    // let data = series.getData();\n    // let dataDim = data.mapDimension(this._dimName);\n    // let stackedDimension = data.getCalculationInfo('stackedDimension');\n    // if (stackedDimension && stackedDimension === dataDim) {\n    // this.hasSeriesStacked = true;\n    // }\n    // }, this);\n    // `calculateDataWindow` uses min/maxSpan.\n\n    this._updateMinMaxSpan();\n\n    var dataWindow = this.calculateDataWindow(dataZoomModel.settledOption);\n    this._valueWindow = dataWindow.valueWindow;\n    this._percentWindow = dataWindow.percentWindow; // Update axis setting then.\n\n    this._setAxisModel();\n  };\n\n  AxisProxy.prototype.filterData = function (dataZoomModel, api) {\n    if (dataZoomModel !== this._dataZoomModel) {\n      return;\n    }\n\n    var axisDim = this._dimName;\n    var seriesModels = this.getTargetSeriesModels();\n    var filterMode = dataZoomModel.get('filterMode');\n    var valueWindow = this._valueWindow;\n\n    if (filterMode === 'none') {\n      return;\n    } // FIXME\n    // Toolbox may has dataZoom injected. And if there are stacked bar chart\n    // with NaN data, NaN will be filtered and stack will be wrong.\n    // So we need to force the mode to be set empty.\n    // In fect, it is not a big deal that do not support filterMode-'filter'\n    // when using toolbox#dataZoom, utill tooltip#dataZoom support \"single axis\n    // selection\" some day, which might need \"adapt to data extent on the\n    // otherAxis\", which is disabled by filterMode-'empty'.\n    // But currently, stack has been fixed to based on value but not index,\n    // so this is not an issue any more.\n    // let otherAxisModel = this.getOtherAxisModel();\n    // if (dataZoomModel.get('$fromToolbox')\n    //     && otherAxisModel\n    //     && otherAxisModel.hasSeriesStacked\n    // ) {\n    //     filterMode = 'empty';\n    // }\n    // TODO\n    // filterMode 'weakFilter' and 'empty' is not optimized for huge data yet.\n\n\n    each(seriesModels, function (seriesModel) {\n      var seriesData = seriesModel.getData();\n      var dataDims = seriesData.mapDimensionsAll(axisDim);\n\n      if (!dataDims.length) {\n        return;\n      }\n\n      if (filterMode === 'weakFilter') {\n        seriesData.filterSelf(function (dataIndex) {\n          var leftOut;\n          var rightOut;\n          var hasValue;\n\n          for (var i = 0; i < dataDims.length; i++) {\n            var value = seriesData.get(dataDims[i], dataIndex);\n            var thisHasValue = !isNaN(value);\n            var thisLeftOut = value < valueWindow[0];\n            var thisRightOut = value > valueWindow[1];\n\n            if (thisHasValue && !thisLeftOut && !thisRightOut) {\n              return true;\n            }\n\n            thisHasValue && (hasValue = true);\n            thisLeftOut && (leftOut = true);\n            thisRightOut && (rightOut = true);\n          } // If both left out and right out, do not filter.\n\n\n          return hasValue && leftOut && rightOut;\n        });\n      } else {\n        each(dataDims, function (dim) {\n          if (filterMode === 'empty') {\n            seriesModel.setData(seriesData = seriesData.map(dim, function (value) {\n              return !isInWindow(value) ? NaN : value;\n            }));\n          } else {\n            var range = {};\n            range[dim] = valueWindow; // console.time('select');\n\n            seriesData.selectRange(range); // console.timeEnd('select');\n          }\n        });\n      }\n\n      each(dataDims, function (dim) {\n        seriesData.setApproximateExtent(valueWindow, dim);\n      });\n    });\n\n    function isInWindow(value) {\n      return value >= valueWindow[0] && value <= valueWindow[1];\n    }\n  };\n\n  AxisProxy.prototype._updateMinMaxSpan = function () {\n    var minMaxSpan = this._minMaxSpan = {};\n    var dataZoomModel = this._dataZoomModel;\n    var dataExtent = this._dataExtent;\n    each(['min', 'max'], function (minMax) {\n      var percentSpan = dataZoomModel.get(minMax + 'Span');\n      var valueSpan = dataZoomModel.get(minMax + 'ValueSpan');\n      valueSpan != null && (valueSpan = this.getAxisModel().axis.scale.parse(valueSpan)); // minValueSpan and maxValueSpan has higher priority than minSpan and maxSpan\n\n      if (valueSpan != null) {\n        percentSpan = numberUtil.linearMap(dataExtent[0] + valueSpan, dataExtent, [0, 100], true);\n      } else if (percentSpan != null) {\n        valueSpan = numberUtil.linearMap(percentSpan, [0, 100], dataExtent, true) - dataExtent[0];\n      }\n\n      minMaxSpan[minMax + 'Span'] = percentSpan;\n      minMaxSpan[minMax + 'ValueSpan'] = valueSpan;\n    }, this);\n  };\n\n  AxisProxy.prototype._setAxisModel = function () {\n    var axisModel = this.getAxisModel();\n    var percentWindow = this._percentWindow;\n    var valueWindow = this._valueWindow;\n\n    if (!percentWindow) {\n      return;\n    } // [0, 500]: arbitrary value, guess axis extent.\n\n\n    var precision = numberUtil.getPixelPrecision(valueWindow, [0, 500]);\n    precision = Math.min(precision, 20); // For value axis, if min/max/scale are not set, we just use the extent obtained\n    // by series data, which may be a little different from the extent calculated by\n    // `axisHelper.getScaleExtent`. But the different just affects the experience a\n    // little when zooming. So it will not be fixed until some users require it strongly.\n\n    var rawExtentInfo = axisModel.axis.scale.rawExtentInfo;\n\n    if (percentWindow[0] !== 0) {\n      rawExtentInfo.setDeterminedMinMax('min', +valueWindow[0].toFixed(precision));\n    }\n\n    if (percentWindow[1] !== 100) {\n      rawExtentInfo.setDeterminedMinMax('max', +valueWindow[1].toFixed(precision));\n    }\n\n    rawExtentInfo.freeze();\n  };\n\n  return AxisProxy;\n}();\n\nfunction calculateDataExtent(axisProxy, axisDim, seriesModels) {\n  var dataExtent = [Infinity, -Infinity];\n  each(seriesModels, function (seriesModel) {\n    unionAxisExtentFromData(dataExtent, seriesModel.getData(), axisDim);\n  }); // It is important to get \"consistent\" extent when more then one axes is\n  // controlled by a `dataZoom`, otherwise those axes will not be synchronized\n  // when zooming. But it is difficult to know what is \"consistent\", considering\n  // axes have different type or even different meanings (For example, two\n  // time axes are used to compare data of the same date in different years).\n  // So basically dataZoom just obtains extent by series.data (in category axis\n  // extent can be obtained from axis.data).\n  // Nevertheless, user can set min/max/scale on axes to make extent of axes\n  // consistent.\n\n  var axisModel = axisProxy.getAxisModel();\n  var rawExtentResult = ensureScaleRawExtentInfo(axisModel.axis.scale, axisModel, dataExtent).calculate();\n  return [rawExtentResult.min, rawExtentResult.max];\n}\n\nexport default AxisProxy;","map":{"version":3,"sources":["/home/kzj/project/finalize/B-S-/源码/前端/node_modules/echarts/lib/component/dataZoom/AxisProxy.js"],"names":["zrUtil","numberUtil","sliderMove","unionAxisExtentFromData","ensureScaleRawExtentInfo","getAxisMainType","isCoordSupported","SINGLE_REFERRING","each","asc","AxisProxy","dimName","axisIndex","dataZoomModel","ecModel","_dimName","_axisIndex","_dataZoomModel","prototype","hostedBy","getDataValueWindow","_valueWindow","slice","getDataPercentWindow","_percentWindow","getTargetSeriesModels","seriesModels","eachSeries","seriesModel","axisMainType","axisModel","getReferringComponents","models","componentIndex","push","getAxisModel","getComponent","getMinMaxSpan","clone","_minMaxSpan","calculateDataWindow","opt","dataExtent","_dataExtent","scale","axis","rangePropMode","getRangePropMode","percentExtent","percentWindow","valueWindow","hasPropModeValue","prop","idx","boundPercent","boundValue","parse","linearMap","spans","restrictSet","fromWindow","toWindow","fromExtent","toExtent","toValue","suffix","i","reset","targetSeries","calculateDataExtent","_updateMinMaxSpan","dataWindow","settledOption","_setAxisModel","filterData","api","axisDim","filterMode","get","seriesData","getData","dataDims","mapDimensionsAll","length","filterSelf","dataIndex","leftOut","rightOut","hasValue","value","thisHasValue","isNaN","thisLeftOut","thisRightOut","dim","setData","map","isInWindow","NaN","range","selectRange","setApproximateExtent","minMaxSpan","minMax","percentSpan","valueSpan","precision","getPixelPrecision","Math","min","rawExtentInfo","setDeterminedMinMax","toFixed","freeze","axisProxy","Infinity","rawExtentResult","calculate","max"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport * as numberUtil from '../../util/number';\nimport sliderMove from '../helper/sliderMove';\nimport { unionAxisExtentFromData } from '../../coord/axisHelper';\nimport { ensureScaleRawExtentInfo } from '../../coord/scaleRawExtentInfo';\nimport { getAxisMainType, isCoordSupported } from './helper';\nimport { SINGLE_REFERRING } from '../../util/model';\nvar each = zrUtil.each;\nvar asc = numberUtil.asc;\n/**\n * Operate single axis.\n * One axis can only operated by one axis operator.\n * Different dataZoomModels may be defined to operate the same axis.\n * (i.e. 'inside' data zoom and 'slider' data zoom components)\n * So dataZoomModels share one axisProxy in that case.\n */\n\nvar AxisProxy =\n/** @class */\nfunction () {\n  function AxisProxy(dimName, axisIndex, dataZoomModel, ecModel) {\n    this._dimName = dimName;\n    this._axisIndex = axisIndex;\n    this.ecModel = ecModel;\n    this._dataZoomModel = dataZoomModel; // /**\n    //  * @readOnly\n    //  * @private\n    //  */\n    // this.hasSeriesStacked;\n  }\n  /**\n   * Whether the axisProxy is hosted by dataZoomModel.\n   */\n\n\n  AxisProxy.prototype.hostedBy = function (dataZoomModel) {\n    return this._dataZoomModel === dataZoomModel;\n  };\n  /**\n   * @return Value can only be NaN or finite value.\n   */\n\n\n  AxisProxy.prototype.getDataValueWindow = function () {\n    return this._valueWindow.slice();\n  };\n  /**\n   * @return {Array.<number>}\n   */\n\n\n  AxisProxy.prototype.getDataPercentWindow = function () {\n    return this._percentWindow.slice();\n  };\n\n  AxisProxy.prototype.getTargetSeriesModels = function () {\n    var seriesModels = [];\n    this.ecModel.eachSeries(function (seriesModel) {\n      if (isCoordSupported(seriesModel)) {\n        var axisMainType = getAxisMainType(this._dimName);\n        var axisModel = seriesModel.getReferringComponents(axisMainType, SINGLE_REFERRING).models[0];\n\n        if (axisModel && this._axisIndex === axisModel.componentIndex) {\n          seriesModels.push(seriesModel);\n        }\n      }\n    }, this);\n    return seriesModels;\n  };\n\n  AxisProxy.prototype.getAxisModel = function () {\n    return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);\n  };\n\n  AxisProxy.prototype.getMinMaxSpan = function () {\n    return zrUtil.clone(this._minMaxSpan);\n  };\n  /**\n   * Only calculate by given range and this._dataExtent, do not change anything.\n   */\n\n\n  AxisProxy.prototype.calculateDataWindow = function (opt) {\n    var dataExtent = this._dataExtent;\n    var axisModel = this.getAxisModel();\n    var scale = axisModel.axis.scale;\n\n    var rangePropMode = this._dataZoomModel.getRangePropMode();\n\n    var percentExtent = [0, 100];\n    var percentWindow = [];\n    var valueWindow = [];\n    var hasPropModeValue;\n    each(['start', 'end'], function (prop, idx) {\n      var boundPercent = opt[prop];\n      var boundValue = opt[prop + 'Value']; // Notice: dataZoom is based either on `percentProp` ('start', 'end') or\n      // on `valueProp` ('startValue', 'endValue'). (They are based on the data extent\n      // but not min/max of axis, which will be calculated by data window then).\n      // The former one is suitable for cases that a dataZoom component controls multiple\n      // axes with different unit or extent, and the latter one is suitable for accurate\n      // zoom by pixel (e.g., in dataZoomSelect).\n      // we use `getRangePropMode()` to mark which prop is used. `rangePropMode` is updated\n      // only when setOption or dispatchAction, otherwise it remains its original value.\n      // (Why not only record `percentProp` and always map to `valueProp`? Because\n      // the map `valueProp` -> `percentProp` -> `valueProp` probably not the original\n      // `valueProp`. consider two axes constrolled by one dataZoom. They have different\n      // data extent. All of values that are overflow the `dataExtent` will be calculated\n      // to percent '100%').\n\n      if (rangePropMode[idx] === 'percent') {\n        boundPercent == null && (boundPercent = percentExtent[idx]); // Use scale.parse to math round for category or time axis.\n\n        boundValue = scale.parse(numberUtil.linearMap(boundPercent, percentExtent, dataExtent));\n      } else {\n        hasPropModeValue = true;\n        boundValue = boundValue == null ? dataExtent[idx] : scale.parse(boundValue); // Calculating `percent` from `value` may be not accurate, because\n        // This calculation can not be inversed, because all of values that\n        // are overflow the `dataExtent` will be calculated to percent '100%'\n\n        boundPercent = numberUtil.linearMap(boundValue, dataExtent, percentExtent);\n      } // valueWindow[idx] = round(boundValue);\n      // percentWindow[idx] = round(boundPercent);\n\n\n      valueWindow[idx] = boundValue;\n      percentWindow[idx] = boundPercent;\n    });\n    asc(valueWindow);\n    asc(percentWindow); // The windows from user calling of `dispatchAction` might be out of the extent,\n    // or do not obey the `min/maxSpan`, `min/maxValueSpan`. But we dont restrict window\n    // by `zoomLock` here, because we see `zoomLock` just as a interaction constraint,\n    // where API is able to initialize/modify the window size even though `zoomLock`\n    // specified.\n\n    var spans = this._minMaxSpan;\n    hasPropModeValue ? restrictSet(valueWindow, percentWindow, dataExtent, percentExtent, false) : restrictSet(percentWindow, valueWindow, percentExtent, dataExtent, true);\n\n    function restrictSet(fromWindow, toWindow, fromExtent, toExtent, toValue) {\n      var suffix = toValue ? 'Span' : 'ValueSpan';\n      sliderMove(0, fromWindow, fromExtent, 'all', spans['min' + suffix], spans['max' + suffix]);\n\n      for (var i = 0; i < 2; i++) {\n        toWindow[i] = numberUtil.linearMap(fromWindow[i], fromExtent, toExtent, true);\n        toValue && (toWindow[i] = scale.parse(toWindow[i]));\n      }\n    }\n\n    return {\n      valueWindow: valueWindow,\n      percentWindow: percentWindow\n    };\n  };\n  /**\n   * Notice: reset should not be called before series.restoreData() called,\n   * so it is recommanded to be called in \"process stage\" but not \"model init\n   * stage\".\n   */\n\n\n  AxisProxy.prototype.reset = function (dataZoomModel) {\n    if (dataZoomModel !== this._dataZoomModel) {\n      return;\n    }\n\n    var targetSeries = this.getTargetSeriesModels(); // Culculate data window and data extent, and record them.\n\n    this._dataExtent = calculateDataExtent(this, this._dimName, targetSeries); // this.hasSeriesStacked = false;\n    // each(targetSeries, function (series) {\n    // let data = series.getData();\n    // let dataDim = data.mapDimension(this._dimName);\n    // let stackedDimension = data.getCalculationInfo('stackedDimension');\n    // if (stackedDimension && stackedDimension === dataDim) {\n    // this.hasSeriesStacked = true;\n    // }\n    // }, this);\n    // `calculateDataWindow` uses min/maxSpan.\n\n    this._updateMinMaxSpan();\n\n    var dataWindow = this.calculateDataWindow(dataZoomModel.settledOption);\n    this._valueWindow = dataWindow.valueWindow;\n    this._percentWindow = dataWindow.percentWindow; // Update axis setting then.\n\n    this._setAxisModel();\n  };\n\n  AxisProxy.prototype.filterData = function (dataZoomModel, api) {\n    if (dataZoomModel !== this._dataZoomModel) {\n      return;\n    }\n\n    var axisDim = this._dimName;\n    var seriesModels = this.getTargetSeriesModels();\n    var filterMode = dataZoomModel.get('filterMode');\n    var valueWindow = this._valueWindow;\n\n    if (filterMode === 'none') {\n      return;\n    } // FIXME\n    // Toolbox may has dataZoom injected. And if there are stacked bar chart\n    // with NaN data, NaN will be filtered and stack will be wrong.\n    // So we need to force the mode to be set empty.\n    // In fect, it is not a big deal that do not support filterMode-'filter'\n    // when using toolbox#dataZoom, utill tooltip#dataZoom support \"single axis\n    // selection\" some day, which might need \"adapt to data extent on the\n    // otherAxis\", which is disabled by filterMode-'empty'.\n    // But currently, stack has been fixed to based on value but not index,\n    // so this is not an issue any more.\n    // let otherAxisModel = this.getOtherAxisModel();\n    // if (dataZoomModel.get('$fromToolbox')\n    //     && otherAxisModel\n    //     && otherAxisModel.hasSeriesStacked\n    // ) {\n    //     filterMode = 'empty';\n    // }\n    // TODO\n    // filterMode 'weakFilter' and 'empty' is not optimized for huge data yet.\n\n\n    each(seriesModels, function (seriesModel) {\n      var seriesData = seriesModel.getData();\n      var dataDims = seriesData.mapDimensionsAll(axisDim);\n\n      if (!dataDims.length) {\n        return;\n      }\n\n      if (filterMode === 'weakFilter') {\n        seriesData.filterSelf(function (dataIndex) {\n          var leftOut;\n          var rightOut;\n          var hasValue;\n\n          for (var i = 0; i < dataDims.length; i++) {\n            var value = seriesData.get(dataDims[i], dataIndex);\n            var thisHasValue = !isNaN(value);\n            var thisLeftOut = value < valueWindow[0];\n            var thisRightOut = value > valueWindow[1];\n\n            if (thisHasValue && !thisLeftOut && !thisRightOut) {\n              return true;\n            }\n\n            thisHasValue && (hasValue = true);\n            thisLeftOut && (leftOut = true);\n            thisRightOut && (rightOut = true);\n          } // If both left out and right out, do not filter.\n\n\n          return hasValue && leftOut && rightOut;\n        });\n      } else {\n        each(dataDims, function (dim) {\n          if (filterMode === 'empty') {\n            seriesModel.setData(seriesData = seriesData.map(dim, function (value) {\n              return !isInWindow(value) ? NaN : value;\n            }));\n          } else {\n            var range = {};\n            range[dim] = valueWindow; // console.time('select');\n\n            seriesData.selectRange(range); // console.timeEnd('select');\n          }\n        });\n      }\n\n      each(dataDims, function (dim) {\n        seriesData.setApproximateExtent(valueWindow, dim);\n      });\n    });\n\n    function isInWindow(value) {\n      return value >= valueWindow[0] && value <= valueWindow[1];\n    }\n  };\n\n  AxisProxy.prototype._updateMinMaxSpan = function () {\n    var minMaxSpan = this._minMaxSpan = {};\n    var dataZoomModel = this._dataZoomModel;\n    var dataExtent = this._dataExtent;\n    each(['min', 'max'], function (minMax) {\n      var percentSpan = dataZoomModel.get(minMax + 'Span');\n      var valueSpan = dataZoomModel.get(minMax + 'ValueSpan');\n      valueSpan != null && (valueSpan = this.getAxisModel().axis.scale.parse(valueSpan)); // minValueSpan and maxValueSpan has higher priority than minSpan and maxSpan\n\n      if (valueSpan != null) {\n        percentSpan = numberUtil.linearMap(dataExtent[0] + valueSpan, dataExtent, [0, 100], true);\n      } else if (percentSpan != null) {\n        valueSpan = numberUtil.linearMap(percentSpan, [0, 100], dataExtent, true) - dataExtent[0];\n      }\n\n      minMaxSpan[minMax + 'Span'] = percentSpan;\n      minMaxSpan[minMax + 'ValueSpan'] = valueSpan;\n    }, this);\n  };\n\n  AxisProxy.prototype._setAxisModel = function () {\n    var axisModel = this.getAxisModel();\n    var percentWindow = this._percentWindow;\n    var valueWindow = this._valueWindow;\n\n    if (!percentWindow) {\n      return;\n    } // [0, 500]: arbitrary value, guess axis extent.\n\n\n    var precision = numberUtil.getPixelPrecision(valueWindow, [0, 500]);\n    precision = Math.min(precision, 20); // For value axis, if min/max/scale are not set, we just use the extent obtained\n    // by series data, which may be a little different from the extent calculated by\n    // `axisHelper.getScaleExtent`. But the different just affects the experience a\n    // little when zooming. So it will not be fixed until some users require it strongly.\n\n    var rawExtentInfo = axisModel.axis.scale.rawExtentInfo;\n\n    if (percentWindow[0] !== 0) {\n      rawExtentInfo.setDeterminedMinMax('min', +valueWindow[0].toFixed(precision));\n    }\n\n    if (percentWindow[1] !== 100) {\n      rawExtentInfo.setDeterminedMinMax('max', +valueWindow[1].toFixed(precision));\n    }\n\n    rawExtentInfo.freeze();\n  };\n\n  return AxisProxy;\n}();\n\nfunction calculateDataExtent(axisProxy, axisDim, seriesModels) {\n  var dataExtent = [Infinity, -Infinity];\n  each(seriesModels, function (seriesModel) {\n    unionAxisExtentFromData(dataExtent, seriesModel.getData(), axisDim);\n  }); // It is important to get \"consistent\" extent when more then one axes is\n  // controlled by a `dataZoom`, otherwise those axes will not be synchronized\n  // when zooming. But it is difficult to know what is \"consistent\", considering\n  // axes have different type or even different meanings (For example, two\n  // time axes are used to compare data of the same date in different years).\n  // So basically dataZoom just obtains extent by series.data (in category axis\n  // extent can be obtained from axis.data).\n  // Nevertheless, user can set min/max/scale on axes to make extent of axes\n  // consistent.\n\n  var axisModel = axisProxy.getAxisModel();\n  var rawExtentResult = ensureScaleRawExtentInfo(axisModel.axis.scale, axisModel, dataExtent).calculate();\n  return [rawExtentResult.min, rawExtentResult.max];\n}\n\nexport default AxisProxy;"]},"metadata":{},"sourceType":"module"}