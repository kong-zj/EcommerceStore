{"ast":null,"code":"import \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nvar _jsxFileName = \"/home/kzj/project/finalize/final/code/react_code/src/components/Auction/HighestBidderInfo/index.jsx\";\nimport React, { Component } from \"react\";\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\"; //接入web3\n\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport openNotification from \"../../Notification\"; //价格格式化\n\nimport handlePrice from '../../../utils/handlePrice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HighestBidderInfo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      highestBidderExist: false\n    };\n\n    this.componentDidMount = async () => {\n      console.log(\"生成HighestBidderInfo模块\");\n      this.getInfoFromBlockchain();\n    };\n\n    this.getInfoFromBlockchain = () => {\n      let blockChainID = this.props.dataArray[0].ID;\n      console.log(\"竞拍商品ID : \" + blockChainID);\n      let that = this;\n      this.props.truffleContract.deployed().then(async i => {\n        console.log(\"进入 this.props.truffleContract.deployed() 的回调函数\"); //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n        //即时获取当前地址，用该地址发交易\n\n        let currentAccount = await that.props.web3.eth.getAccounts();\n        console.log(\"交易发起地址为: \" + currentAccount);\n\n        try {\n          //调用合约的 highestBidderInfo 方法\n          await i.highestBidderInfo(parseInt(blockChainID)).then(info => {\n            console.log(\"成功调用合约的highestBidderInfo方法，返回 : \");\n            console.dir(info);\n            let highestBidderString = \"\";\n\n            if (info[2].toLocaleString() != '0') {\n              //有人揭示报价\n              this.setState({\n                highestBidderExist: true\n              });\n              highestBidderString = \"拍卖结束，没有人揭示报价\";\n            } else {\n              //有人出价\n              highestBidderString = \"拍卖结束，最高出价竞拍人 (\" + info[0] + \") 以次高价格 (\" + handlePrice(info[2]) + \") 赢得竞拍\";\n              highestBidderString += \"---------买家的资金现在存放在资金托管合约中. 3个参与人中的2人 (买家, 卖家, 仲裁人) 投票决定是否成交\";\n            }\n\n            this.setState({\n              highestBidderString: highestBidderString\n            });\n\n            _message.success(\"查询最高竞价人信息成功\", 2);\n          });\n        } catch (err) {\n          _message.error(\"查询最高竞价人信息失败\", 2);\n\n          console.log(\"调用合约的highestBidderInfo方法失败 \" + err);\n          return;\n        }\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u6700\\u9AD8\\u51FA\\u4EF7\\u4EBA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default HighestBidderInfo;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/src/components/Auction/HighestBidderInfo/index.jsx"],"names":["React","Component","UserOutlined","LaptopOutlined","FileSearchOutlined","HomeOutlined","EyeTwoTone","EyeInvisibleOutlined","RocketOutlined","cookie","getWeb3","getEcommerceStore","openNotification","handlePrice","HighestBidderInfo","state","highestBidderExist","componentDidMount","console","log","getInfoFromBlockchain","blockChainID","props","dataArray","ID","that","truffleContract","deployed","then","i","currentAccount","web3","eth","getAccounts","highestBidderInfo","parseInt","info","dir","highestBidderString","toLocaleString","setState","success","err","error","render"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,kBAAvC,EAA2DC,YAA3D,EAAyEC,UAAzE,EAAqFC,oBAArF,EAA2GC,cAA3G,QAAiI,mBAAjI;AACA,OAAOC,MAAP,MAAmB,eAAnB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B,C,CACA;;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;;AAIA,MAAMC,iBAAN,SAAgCb,SAAhC,CAA0C;AAAA;AAAA;AAAA,SAEtCc,KAFsC,GAE9B;AACJC,MAAAA,kBAAkB,EAAG;AADjB,KAF8B;;AAAA,SAMtCC,iBANsC,GAMlB,YAAY;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,WAAKC,qBAAL;AACH,KATqC;;AAAA,SAWtCA,qBAXsC,GAWd,MAAM;AAC1B,UAAIC,YAAY,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqB,CAArB,EAAwBC,EAA3C;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAcE,YAA1B;AAEA,UAAII,IAAI,GAAG,IAAX;AACA,WAAKH,KAAL,CAAWI,eAAX,CAA2BC,QAA3B,GAAsCC,IAAtC,CAA2C,MAAOC,CAAP,IAAa;AACpDX,QAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ,EADoD,CAEpD;AACA;;AACA,YAAIW,cAAc,GAAG,MAAML,IAAI,CAACH,KAAL,CAAWS,IAAX,CAAgBC,GAAhB,CAAoBC,WAApB,EAA3B;AACAf,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAYW,cAAxB;;AAEA,YAAG;AACC;AACA,gBAAMD,CAAC,CAACK,iBAAF,CAAoBC,QAAQ,CAACd,YAAD,CAA5B,EAA4CO,IAA5C,CAAiDQ,IAAI,IAAI;AAC3DlB,YAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACAD,YAAAA,OAAO,CAACmB,GAAR,CAAYD,IAAZ;AACA,gBAAIE,mBAAmB,GAAG,EAA1B;;AACA,gBAAIF,IAAI,CAAC,CAAD,CAAJ,CAAQG,cAAR,MAA4B,GAAhC,EAAqC;AACjC;AACA,mBAAKC,QAAL,CAAc;AACVxB,gBAAAA,kBAAkB,EAAG;AADX,eAAd;AAGAsB,cAAAA,mBAAmB,GAAG,cAAtB;AACH,aAND,MAMO;AACH;AACAA,cAAAA,mBAAmB,GAAG,mBAAmBF,IAAI,CAAC,CAAD,CAAvB,GAA6B,WAA7B,GAA2CvB,WAAW,CAACuB,IAAI,CAAC,CAAD,CAAL,CAAtD,GAAkE,QAAxF;AACAE,cAAAA,mBAAmB,IAAK,8DAAxB;AACH;;AAED,iBAAKE,QAAL,CAAc;AACVF,cAAAA,mBAAmB,EAAGA;AADZ,aAAd;;AAIA,qBAAQG,OAAR,CAAgB,aAAhB,EAA8B,CAA9B;AAGH,WAvBK,CAAN;AAwBH,SA1BD,CA0BC,OAAMC,GAAN,EAAW;AACR,mBAAQC,KAAR,CAAc,aAAd,EAA4B,CAA5B;;AACAzB,UAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgCuB,GAA5C;AACA;AACH;AACJ,OAtCD;AAuCH,KAvDqC;AAAA;;AA4DtCE,EAAAA,MAAM,GAAI;AACN,wBAGI;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHJ;AAWH;;AAxEqC;;AA2E1C,eAAe9B,iBAAf","sourcesContent":["import React, {Component} from \"react\";\nimport { Menu, Layout, message, Drawer, Space, Button, Divider, Form, InputNumber, Input, Select } from 'antd';\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\";\n//接入web3\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport openNotification from \"../../Notification\";\n//价格格式化\nimport handlePrice from '../../../utils/handlePrice';\n\n\n\nclass HighestBidderInfo extends Component {\n\n    state = {\n        highestBidderExist : false\n    }\n\n    componentDidMount = async () => {\n        console.log(\"生成HighestBidderInfo模块\");\n        this.getInfoFromBlockchain();\n    }\n\n    getInfoFromBlockchain = () => {\n        let blockChainID = this.props.dataArray[0].ID;\n        console.log(\"竞拍商品ID : \" + blockChainID);\n\n        let that = this;\n        this.props.truffleContract.deployed().then(async (i) => {\n            console.log(\"进入 this.props.truffleContract.deployed() 的回调函数\");\n            //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n            //即时获取当前地址，用该地址发交易\n            let currentAccount = await that.props.web3.eth.getAccounts();\n            console.log(\"交易发起地址为: \"+currentAccount);\n\n            try{\n                //调用合约的 highestBidderInfo 方法\n                await i.highestBidderInfo(parseInt(blockChainID)).then(info => {\n                    console.log(\"成功调用合约的highestBidderInfo方法，返回 : \");\n                    console.dir(info);\n                    let highestBidderString = \"\";\n                    if (info[2].toLocaleString() != '0') {\n                        //有人揭示报价\n                        this.setState({\n                            highestBidderExist : true,\n                        })\n                        highestBidderString = \"拍卖结束，没有人揭示报价\";\n                    } else {\n                        //有人出价\n                        highestBidderString = \"拍卖结束，最高出价竞拍人 (\" + info[0] + \") 以次高价格 (\" + handlePrice(info[2]) + \") 赢得竞拍\";\n                        highestBidderString +=  \"---------买家的资金现在存放在资金托管合约中. 3个参与人中的2人 (买家, 卖家, 仲裁人) 投票决定是否成交\";\n                    }\n\n                    this.setState({\n                        highestBidderString : highestBidderString\n                    })\n\n                    message.success(\"查询最高竞价人信息成功\",2);\n\n                    \n                });\n            }catch(err) {\n                message.error(\"查询最高竞价人信息失败\",2);\n                console.log(\"调用合约的highestBidderInfo方法失败 \" + err);\n                return;\n            }  \n        });\n    }\n   \n\n \n    \n    render () {\n        return (\n\n\n            <div>    \n                <p>最高出价人</p>    \n         \n            </div>\n\n            \n\n        );\n    }\n}\n\nexport default HighestBidderInfo;\n"]},"metadata":{},"sourceType":"module"}