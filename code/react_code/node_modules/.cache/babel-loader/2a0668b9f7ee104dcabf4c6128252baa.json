{"ast":null,"code":"import { default as Web3 } from 'web3';\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  console.log('[Loading...] Start get web3'); // Wait for loading completion to avoid race conditions with web3 injection timing.\n  // Modern dapp browsers...\n\n  if (window.ethereum) {\n    const web3 = new Web3(window.ethereum);\n\n    try {\n      // Request account access if needed\n      window.ethereum.enable();\n      console.log(\"Use defined web3 setting.\"); // Accounts now exposed\n\n      resolve(web3);\n    } catch (error) {\n      reject(error);\n    }\n  } // Legacy dapp browsers...\n  else if (window.web3) {\n      // Use Mist/MetaMask's provider.\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } // Fallback to localhost; use dev console port by default...\n    else {\n        const provider = new Web3.providers.WebsocketProvider(\"http://localshost:8545\");\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        console.log(\"Use http://localshost:8545.\");\n        resolve(web3);\n      } // window.addEventListener(\"load\", async() => {\n  // });\n\n});\n\nexport default getWeb3;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/src/utils/getWeb3.js"],"names":["default","Web3","getWeb3","Promise","resolve","reject","console","log","window","ethereum","web3","enable","error","provider","providers","WebsocketProvider"],"mappings":"AAAA,SAASA,OAAO,IAAIC,IAApB,QAAgC,MAAhC;;AAEA,MAAMC,OAAO,GAAG,MACZ,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAD6B,CAE7B;AACA;;AACA,MAAIC,MAAM,CAACC,QAAX,EAAqB;AACjB,UAAMC,IAAI,GAAG,IAAIT,IAAJ,CAASO,MAAM,CAACC,QAAhB,CAAb;;AACA,QAAI;AACA;AACAD,MAAAA,MAAM,CAACC,QAAP,CAAgBE,MAAhB;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAHA,CAIA;;AACAH,MAAAA,OAAO,CAACM,IAAD,CAAP;AACH,KAND,CAME,OAAOE,KAAP,EAAc;AACZP,MAAAA,MAAM,CAACO,KAAD,CAAN;AACH;AACJ,GAXD,CAYA;AAZA,OAaK,IAAIJ,MAAM,CAACE,IAAX,EAAiB;AAClB;AACA,YAAMA,IAAI,GAAGF,MAAM,CAACE,IAApB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAH,MAAAA,OAAO,CAACM,IAAD,CAAP;AACH,KALI,CAML;AANK,SAOA;AACD,cAAMG,QAAQ,GAAG,IAAIZ,IAAI,CAACa,SAAL,CAAeC,iBAAnB,CACb,wBADa,CAAjB;AAGA,cAAML,IAAI,GAAG,IAAIT,IAAJ,CAASY,QAAT,CAAb;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAH,QAAAA,OAAO,CAACM,IAAD,CAAP;AACH,OAhC4B,CAiC7B;AAEA;;AACH,CApCD,CADJ;;AAuCA,eAAeR,OAAf","sourcesContent":["import { default as Web3 } from 'web3';\n\nconst getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        console.log('[Loading...] Start get web3');\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        // Modern dapp browsers...\n        if (window.ethereum) {\n            const web3 = new Web3(window.ethereum);\n            try {\n                // Request account access if needed\n                window.ethereum.enable();\n                console.log(\"Use defined web3 setting.\");\n                // Accounts now exposed\n                resolve(web3);\n            } catch (error) {\n                reject(error);\n            }\n        }\n        // Legacy dapp browsers...\n        else if (window.web3) {\n            // Use Mist/MetaMask's provider.\n            const web3 = window.web3;\n            console.log(\"Injected web3 detected.\");\n            resolve(web3);\n        }\n        // Fallback to localhost; use dev console port by default...\n        else {\n            const provider = new Web3.providers.WebsocketProvider(\n                \"http://localshost:8545\"\n            );\n            const web3 = new Web3(provider);\n            console.log(\"No web3 instance injected, using Local web3.\");\n            console.log(\"Use http://localshost:8545.\");\n            resolve(web3);\n        }\n        // window.addEventListener(\"load\", async() => {\n\n        // });\n    });\n\nexport default getWeb3;"]},"metadata":{},"sourceType":"module"}