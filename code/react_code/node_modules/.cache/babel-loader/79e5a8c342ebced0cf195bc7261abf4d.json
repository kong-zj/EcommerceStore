{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar Bytes = require(\"./bytes\");\n\nvar Nat = require(\"./nat\");\n\nvar elliptic = require(\"elliptic\");\n\nvar rlp = require(\"./rlp\");\n\nvar secp256k1 = new elliptic.ec(\"secp256k1\"); // eslint-disable-line\n\nvar _require = require(\"./hash\"),\n    keccak256 = _require.keccak256,\n    keccak256s = _require.keccak256s;\n\nvar create = function create(entropy) {\n  var innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));\n  var middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));\n  var outerHex = keccak256(middleHex);\n  return fromPrivate(outerHex);\n};\n\nvar toChecksum = function toChecksum(address) {\n  var addressHash = keccak256s(address.slice(2));\n  var checksumAddress = \"0x\";\n\n  for (var i = 0; i < 40; i++) {\n    checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];\n  }\n\n  return checksumAddress;\n};\n\nvar fromPrivate = function fromPrivate(privateKey) {\n  var buffer = new Buffer(privateKey.slice(2), \"hex\");\n  var ecKey = secp256k1.keyFromPrivate(buffer);\n  var publicKey = \"0x\" + ecKey.getPublic(false, 'hex').slice(2);\n  var publicHash = keccak256(publicKey);\n  var address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return {\n    address: address,\n    privateKey: privateKey\n  };\n};\n\nvar encodeSignature = function encodeSignature(_ref) {\n  var _ref2 = _slicedToArray(_ref, 3),\n      v = _ref2[0],\n      r = Bytes.pad(32, _ref2[1]),\n      s = Bytes.pad(32, _ref2[2]);\n\n  return Bytes.flatten([r, s, v]);\n};\n\nvar decodeSignature = function decodeSignature(hex) {\n  return [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];\n};\n\nvar makeSigner = function makeSigner(addToV) {\n  return function (hash, privateKey) {\n    var signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), \"hex\")).sign(new Buffer(hash.slice(2), \"hex\"), {\n      canonical: true\n    });\n    return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.s.toString(16)))]);\n  };\n};\n\nvar sign = makeSigner(27); // v=27|28 instead of 0|1...\n\nvar recover = function recover(hash, signature) {\n  var vals = decodeSignature(signature);\n  var vrs = {\n    v: Bytes.toNumber(vals[0]),\n    r: vals[1].slice(2),\n    s: vals[2].slice(2)\n  };\n  var ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), \"hex\"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that\n\n  var publicKey = \"0x\" + ecPublicKey.encode(\"hex\", false).slice(2);\n  var publicHash = keccak256(publicKey);\n  var address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return address;\n};\n\nmodule.exports = {\n  create: create,\n  toChecksum: toChecksum,\n  fromPrivate: fromPrivate,\n  sign: sign,\n  makeSigner: makeSigner,\n  recover: recover,\n  encodeSignature: encodeSignature,\n  decodeSignature: decodeSignature\n};","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js"],"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","Bytes","require","Nat","elliptic","rlp","secp256k1","ec","_require","keccak256","keccak256s","create","entropy","innerHex","concat","random","middleHex","outerHex","fromPrivate","toChecksum","address","addressHash","slice","checksumAddress","parseInt","toUpperCase","privateKey","buffer","Buffer","ecKey","keyFromPrivate","publicKey","getPublic","publicHash","encodeSignature","_ref","_ref2","v","r","pad","s","flatten","decodeSignature","hex","makeSigner","addToV","hash","signature","sign","canonical","fromString","fromNumber","recoveryParam","fromNat","toString","recover","vals","vrs","toNumber","ecPublicKey","recoverPubKey","encode","module","exports"],"mappings":"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","sourcesContent":["var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar Bytes = require(\"./bytes\");\nvar Nat = require(\"./nat\");\nvar elliptic = require(\"elliptic\");\nvar rlp = require(\"./rlp\");\nvar secp256k1 = new elliptic.ec(\"secp256k1\"); // eslint-disable-line\n\nvar _require = require(\"./hash\"),\n    keccak256 = _require.keccak256,\n    keccak256s = _require.keccak256s;\n\nvar create = function create(entropy) {\n  var innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));\n  var middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));\n  var outerHex = keccak256(middleHex);\n  return fromPrivate(outerHex);\n};\n\nvar toChecksum = function toChecksum(address) {\n  var addressHash = keccak256s(address.slice(2));\n  var checksumAddress = \"0x\";\n  for (var i = 0; i < 40; i++) {\n    checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];\n  }return checksumAddress;\n};\n\nvar fromPrivate = function fromPrivate(privateKey) {\n  var buffer = new Buffer(privateKey.slice(2), \"hex\");\n  var ecKey = secp256k1.keyFromPrivate(buffer);\n  var publicKey = \"0x\" + ecKey.getPublic(false, 'hex').slice(2);\n  var publicHash = keccak256(publicKey);\n  var address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return {\n    address: address,\n    privateKey: privateKey\n  };\n};\n\nvar encodeSignature = function encodeSignature(_ref) {\n  var _ref2 = _slicedToArray(_ref, 3),\n      v = _ref2[0],\n      r = Bytes.pad(32, _ref2[1]),\n      s = Bytes.pad(32, _ref2[2]);\n\n  return Bytes.flatten([r, s, v]);\n};\n\nvar decodeSignature = function decodeSignature(hex) {\n  return [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];\n};\n\nvar makeSigner = function makeSigner(addToV) {\n  return function (hash, privateKey) {\n    var signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), \"hex\")).sign(new Buffer(hash.slice(2), \"hex\"), { canonical: true });\n    return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.s.toString(16)))]);\n  };\n};\n\nvar sign = makeSigner(27); // v=27|28 instead of 0|1...\n\nvar recover = function recover(hash, signature) {\n  var vals = decodeSignature(signature);\n  var vrs = { v: Bytes.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2) };\n  var ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), \"hex\"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that\n  var publicKey = \"0x\" + ecPublicKey.encode(\"hex\", false).slice(2);\n  var publicHash = keccak256(publicKey);\n  var address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return address;\n};\n\nmodule.exports = {\n  create: create,\n  toChecksum: toChecksum,\n  fromPrivate: fromPrivate,\n  sign: sign,\n  makeSigner: makeSigner,\n  recover: recover,\n  encodeSignature: encodeSignature,\n  decodeSignature: decodeSignature\n};"]},"metadata":{},"sourceType":"script"}