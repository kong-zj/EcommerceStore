{"ast":null,"code":"import \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nvar _jsxFileName = \"/home/kzj/project/finalize/final/code/react_code/src/pages/StatisticsReport/index.jsx\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport cookie from \"react-cookies\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StaticsReport extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      deviceArray: [],\n      messages: {}\n    };\n  }\n\n  componentDidMount() {\n    axios.post(\"/getPersonalInfo\", {\n      username: cookie.load('username')\n    }).then(response => {\n      const data = response.data;\n\n      if (data.code === \"success\") {\n        let array = data.deviceArray.map((item, index) => {\n          return {\n            key: index + 1,\n            deviceName: item.deviceName,\n            deviceID: item.deviceID,\n            deviceStatus: item.isOnline\n          };\n        });\n        this.setState({\n          deviceArray: array\n        });\n        array.forEach(item => {\n          const deviceID = item.deviceID;\n          axios.post('/getDeviceInfo', {\n            deviceID: deviceID\n          }).then(response => {\n            const data = response.data;\n            const message = data.deviceMessage;\n\n            if (data.status === 'failed') {\n              message.warning(\"获取设备信息失败\");\n            } else if (data.status === 'notExist') {\n              message.warning('设备不存在');\n            } else {\n              const messageArray = message.map((item, index) => {\n                const obj = JSON.parse(item.content);\n                let infoItem = {\n                  key: item.messageID,\n                  messageID: item.messageID,\n                  messageType: obj.alert,\n                  messageContent: obj.info,\n                  lat: obj.lat,\n                  lng: obj.lng,\n                  timestamp: obj.timestamp,\n                  time: new Date(parseInt(obj.timestamp)).toLocaleDateString() + ' ' + new Date(parseInt(obj.timestamp)).toLocaleTimeString(),\n                  location: \"\"\n                };\n                axios.get(`https://restapi.amap.com/v3/geocode/regeo?\" +\n                                    \"output=xml&location=${infoItem.lng},${infoItem.lat}&key=167046dfd610b3eea087876e05ee0181&radius=1000&extensions=base`).then(response => {\n                  const data = response.data;\n                  infoItem.location = data.regeocode.formatted_address;\n                });\n                return infoItem;\n              });\n              const messages = { ...this.state.messages\n              };\n              messages[deviceID] = messageArray;\n              this.setState({\n                messages: messages\n              });\n            }\n          });\n        });\n      } else {\n        _message.warning(\"获取个人信息出错\").then(r => console.log(r));\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default StaticsReport;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/src/pages/StatisticsReport/index.jsx"],"names":["React","Component","axios","cookie","StaticsReport","state","deviceArray","messages","componentDidMount","post","username","load","then","response","data","code","array","map","item","index","key","deviceName","deviceID","deviceStatus","isOnline","setState","forEach","message","deviceMessage","status","warning","messageArray","obj","JSON","parse","content","infoItem","messageID","messageType","alert","messageContent","info","lat","lng","timestamp","time","Date","parseInt","toLocaleDateString","toLocaleTimeString","location","get","regeocode","formatted_address","r","console","log","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\nimport cookie from \"react-cookies\";\nimport {message} from \"antd\";\n\nclass StaticsReport extends Component {\n\n    state = {deviceArray:[], messages:{}}\n\n    componentDidMount () {\n        axios.post(\"/getPersonalInfo\", {\n            username:cookie.load('username')\n        }).then(response => {\n            const data =  response.data;\n            if(data.code === \"success\"){\n                let array = data.deviceArray.map((item, index) => {\n                    return {\n                        key: index + 1,\n                        deviceName: item.deviceName,\n                        deviceID: item.deviceID,\n                        deviceStatus: item.isOnline\n                    }\n                });\n                this.setState({deviceArray:array});\n                array.forEach(item => {\n                    const deviceID = item.deviceID;\n                    axios.post('/getDeviceInfo', {\n                        deviceID:deviceID\n                    }).then(response => {\n                        const data = response.data;\n                        const message = data.deviceMessage;\n                        if(data.status === 'failed'){\n                            message.warning(\"获取设备信息失败\")\n                        }\n                        else if(data.status === 'notExist'){\n                            message.warning('设备不存在')\n                        }\n                        else{\n\n                            const messageArray = message.map((item, index) => {\n                                const obj = JSON.parse(item.content);\n                                let infoItem = {\n                                    key: item.messageID,\n                                    messageID: item.messageID,\n                                    messageType: obj.alert,\n                                    messageContent: obj.info,\n                                    lat:obj.lat,\n                                    lng:obj.lng,\n                                    timestamp:obj.timestamp,\n                                    time:(new Date(parseInt(obj.timestamp))).toLocaleDateString() + ' '+ (new Date(parseInt(obj.timestamp))).toLocaleTimeString(),\n                                    location: \"\"\n                                }\n                                axios.get(`https://restapi.amap.com/v3/geocode/regeo?\" +\n                                    \"output=xml&location=${infoItem.lng},${infoItem.lat}&key=167046dfd610b3eea087876e05ee0181&radius=1000&extensions=base`)\n                                    .then(response => {\n                                        const data = response.data;\n                                        infoItem.location = data.regeocode.formatted_address;\n                                    });\n                                return infoItem;\n                            });\n                            const messages = {...this.state.messages};\n                            messages[deviceID] = messageArray;\n                            this.setState({messages:messages});\n                        }\n                    })\n                })\n            }\n            else{\n                message.warning (\"获取个人信息出错\").then (r  => console.log(r));\n            }\n        })\n    }\n\n    render () {\n        return (\n            <div>\n\n            </div>\n        );\n    }\n}\n\nexport default StaticsReport;"]},"metadata":{},"sourceType":"module"}