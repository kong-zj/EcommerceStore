{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport List from '../../data/List';\nimport createDimensions from '../../data/helper/createDimensions';\nimport { getDimensionTypeByAxis } from '../../data/helper/dimensionHelper';\nimport { getDataItemValue } from '../../util/model';\nimport CoordinateSystem from '../../core/CoordinateSystem';\nimport { getCoordSysInfoBySeries } from '../../model/referHelper';\nimport { createSourceFromSeriesDataOption, isSourceInstance } from '../../data/Source';\nimport { enableDataStack } from '../../data/helper/dataStackHelper';\nimport { makeSeriesEncodeForAxisCoordSys } from '../../data/helper/sourceHelper';\nimport { SOURCE_FORMAT_ORIGINAL } from '../../util/types';\n\nfunction createListFromArray(source, seriesModel, opt) {\n  opt = opt || {};\n\n  if (!isSourceInstance(source)) {\n    source = createSourceFromSeriesDataOption(source);\n  }\n\n  var coordSysName = seriesModel.get('coordinateSystem');\n  var registeredCoordSys = CoordinateSystem.get(coordSysName);\n  var coordSysInfo = getCoordSysInfoBySeries(seriesModel);\n  var coordSysDimDefs;\n\n  if (coordSysInfo && coordSysInfo.coordSysDims) {\n    coordSysDimDefs = zrUtil.map(coordSysInfo.coordSysDims, function (dim) {\n      var dimInfo = {\n        name: dim\n      };\n      var axisModel = coordSysInfo.axisMap.get(dim);\n\n      if (axisModel) {\n        var axisType = axisModel.get('type');\n        dimInfo.type = getDimensionTypeByAxis(axisType); // dimInfo.stackable = isStackable(axisType);\n      }\n\n      return dimInfo;\n    });\n  }\n\n  if (!coordSysDimDefs) {\n    // Get dimensions from registered coordinate system\n    coordSysDimDefs = registeredCoordSys && (registeredCoordSys.getDimensionsInfo ? registeredCoordSys.getDimensionsInfo() : registeredCoordSys.dimensions.slice()) || ['x', 'y'];\n  }\n\n  var useEncodeDefaulter = opt.useEncodeDefaulter;\n  var dimInfoList = createDimensions(source, {\n    coordDimensions: coordSysDimDefs,\n    generateCoord: opt.generateCoord,\n    encodeDefaulter: zrUtil.isFunction(useEncodeDefaulter) ? useEncodeDefaulter : useEncodeDefaulter ? zrUtil.curry(makeSeriesEncodeForAxisCoordSys, coordSysDimDefs, seriesModel) : null\n  });\n  var firstCategoryDimIndex;\n  var hasNameEncode;\n  coordSysInfo && zrUtil.each(dimInfoList, function (dimInfo, dimIndex) {\n    var coordDim = dimInfo.coordDim;\n    var categoryAxisModel = coordSysInfo.categoryAxisMap.get(coordDim);\n\n    if (categoryAxisModel) {\n      if (firstCategoryDimIndex == null) {\n        firstCategoryDimIndex = dimIndex;\n      }\n\n      dimInfo.ordinalMeta = categoryAxisModel.getOrdinalMeta();\n\n      if (opt.createInvertedIndices) {\n        dimInfo.createInvertedIndices = true;\n      }\n    }\n\n    if (dimInfo.otherDims.itemName != null) {\n      hasNameEncode = true;\n    }\n  });\n\n  if (!hasNameEncode && firstCategoryDimIndex != null) {\n    dimInfoList[firstCategoryDimIndex].otherDims.itemName = 0;\n  }\n\n  var stackCalculationInfo = enableDataStack(seriesModel, dimInfoList);\n  var list = new List(dimInfoList, seriesModel);\n  list.setCalculationInfo(stackCalculationInfo);\n  var dimValueGetter = firstCategoryDimIndex != null && isNeedCompleteOrdinalData(source) ? function (itemOpt, dimName, dataIndex, dimIndex) {\n    // Use dataIndex as ordinal value in categoryAxis\n    return dimIndex === firstCategoryDimIndex ? dataIndex : this.defaultDimValueGetter(itemOpt, dimName, dataIndex, dimIndex);\n  } : null;\n  list.hasItemOption = false;\n  list.initData(source, null, dimValueGetter);\n  return list;\n}\n\nfunction isNeedCompleteOrdinalData(source) {\n  if (source.sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var sampleItem = firstDataNotNull(source.data || []);\n    return sampleItem != null && !zrUtil.isArray(getDataItemValue(sampleItem));\n  }\n}\n\nfunction firstDataNotNull(data) {\n  var i = 0;\n\n  while (i < data.length && data[i] == null) {\n    i++;\n  }\n\n  return data[i];\n}\n\nexport default createListFromArray;","map":{"version":3,"sources":["/home/kzj/project/finalize/B-S-/源码/前端/node_modules/echarts/lib/chart/helper/createListFromArray.js"],"names":["zrUtil","List","createDimensions","getDimensionTypeByAxis","getDataItemValue","CoordinateSystem","getCoordSysInfoBySeries","createSourceFromSeriesDataOption","isSourceInstance","enableDataStack","makeSeriesEncodeForAxisCoordSys","SOURCE_FORMAT_ORIGINAL","createListFromArray","source","seriesModel","opt","coordSysName","get","registeredCoordSys","coordSysInfo","coordSysDimDefs","coordSysDims","map","dim","dimInfo","name","axisModel","axisMap","axisType","type","getDimensionsInfo","dimensions","slice","useEncodeDefaulter","dimInfoList","coordDimensions","generateCoord","encodeDefaulter","isFunction","curry","firstCategoryDimIndex","hasNameEncode","each","dimIndex","coordDim","categoryAxisModel","categoryAxisMap","ordinalMeta","getOrdinalMeta","createInvertedIndices","otherDims","itemName","stackCalculationInfo","list","setCalculationInfo","dimValueGetter","isNeedCompleteOrdinalData","itemOpt","dimName","dataIndex","defaultDimValueGetter","hasItemOption","initData","sourceFormat","sampleItem","firstDataNotNull","data","isArray","i","length"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport List from '../../data/List';\nimport createDimensions from '../../data/helper/createDimensions';\nimport { getDimensionTypeByAxis } from '../../data/helper/dimensionHelper';\nimport { getDataItemValue } from '../../util/model';\nimport CoordinateSystem from '../../core/CoordinateSystem';\nimport { getCoordSysInfoBySeries } from '../../model/referHelper';\nimport { createSourceFromSeriesDataOption, isSourceInstance } from '../../data/Source';\nimport { enableDataStack } from '../../data/helper/dataStackHelper';\nimport { makeSeriesEncodeForAxisCoordSys } from '../../data/helper/sourceHelper';\nimport { SOURCE_FORMAT_ORIGINAL } from '../../util/types';\n\nfunction createListFromArray(source, seriesModel, opt) {\n  opt = opt || {};\n\n  if (!isSourceInstance(source)) {\n    source = createSourceFromSeriesDataOption(source);\n  }\n\n  var coordSysName = seriesModel.get('coordinateSystem');\n  var registeredCoordSys = CoordinateSystem.get(coordSysName);\n  var coordSysInfo = getCoordSysInfoBySeries(seriesModel);\n  var coordSysDimDefs;\n\n  if (coordSysInfo && coordSysInfo.coordSysDims) {\n    coordSysDimDefs = zrUtil.map(coordSysInfo.coordSysDims, function (dim) {\n      var dimInfo = {\n        name: dim\n      };\n      var axisModel = coordSysInfo.axisMap.get(dim);\n\n      if (axisModel) {\n        var axisType = axisModel.get('type');\n        dimInfo.type = getDimensionTypeByAxis(axisType); // dimInfo.stackable = isStackable(axisType);\n      }\n\n      return dimInfo;\n    });\n  }\n\n  if (!coordSysDimDefs) {\n    // Get dimensions from registered coordinate system\n    coordSysDimDefs = registeredCoordSys && (registeredCoordSys.getDimensionsInfo ? registeredCoordSys.getDimensionsInfo() : registeredCoordSys.dimensions.slice()) || ['x', 'y'];\n  }\n\n  var useEncodeDefaulter = opt.useEncodeDefaulter;\n  var dimInfoList = createDimensions(source, {\n    coordDimensions: coordSysDimDefs,\n    generateCoord: opt.generateCoord,\n    encodeDefaulter: zrUtil.isFunction(useEncodeDefaulter) ? useEncodeDefaulter : useEncodeDefaulter ? zrUtil.curry(makeSeriesEncodeForAxisCoordSys, coordSysDimDefs, seriesModel) : null\n  });\n  var firstCategoryDimIndex;\n  var hasNameEncode;\n  coordSysInfo && zrUtil.each(dimInfoList, function (dimInfo, dimIndex) {\n    var coordDim = dimInfo.coordDim;\n    var categoryAxisModel = coordSysInfo.categoryAxisMap.get(coordDim);\n\n    if (categoryAxisModel) {\n      if (firstCategoryDimIndex == null) {\n        firstCategoryDimIndex = dimIndex;\n      }\n\n      dimInfo.ordinalMeta = categoryAxisModel.getOrdinalMeta();\n\n      if (opt.createInvertedIndices) {\n        dimInfo.createInvertedIndices = true;\n      }\n    }\n\n    if (dimInfo.otherDims.itemName != null) {\n      hasNameEncode = true;\n    }\n  });\n\n  if (!hasNameEncode && firstCategoryDimIndex != null) {\n    dimInfoList[firstCategoryDimIndex].otherDims.itemName = 0;\n  }\n\n  var stackCalculationInfo = enableDataStack(seriesModel, dimInfoList);\n  var list = new List(dimInfoList, seriesModel);\n  list.setCalculationInfo(stackCalculationInfo);\n  var dimValueGetter = firstCategoryDimIndex != null && isNeedCompleteOrdinalData(source) ? function (itemOpt, dimName, dataIndex, dimIndex) {\n    // Use dataIndex as ordinal value in categoryAxis\n    return dimIndex === firstCategoryDimIndex ? dataIndex : this.defaultDimValueGetter(itemOpt, dimName, dataIndex, dimIndex);\n  } : null;\n  list.hasItemOption = false;\n  list.initData(source, null, dimValueGetter);\n  return list;\n}\n\nfunction isNeedCompleteOrdinalData(source) {\n  if (source.sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var sampleItem = firstDataNotNull(source.data || []);\n    return sampleItem != null && !zrUtil.isArray(getDataItemValue(sampleItem));\n  }\n}\n\nfunction firstDataNotNull(data) {\n  var i = 0;\n\n  while (i < data.length && data[i] == null) {\n    i++;\n  }\n\n  return data[i];\n}\n\nexport default createListFromArray;"]},"metadata":{},"sourceType":"module"}