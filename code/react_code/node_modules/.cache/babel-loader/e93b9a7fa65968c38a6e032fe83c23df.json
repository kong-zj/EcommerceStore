{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport { hasOwn, assert, isString, retrieve2, retrieve3, defaults, each, keys, isArrayLike, bind, isFunction, eqNaN, indexOf, clone } from 'zrender/lib/core/util';\nimport * as graphicUtil from '../../util/graphic';\nimport { setDefaultStateProxy, enableHoverEmphasis } from '../../util/states';\nimport * as labelStyleHelper from '../../label/labelStyle';\nimport { getDefaultLabel } from '../helper/labelHelper';\nimport createListFromArray from '../helper/createListFromArray';\nimport { getLayoutOnAxis } from '../../layout/barGrid';\nimport DataDiffer from '../../data/DataDiffer';\nimport SeriesModel from '../../model/Series';\nimport ChartView from '../../view/Chart';\nimport { createClipPath } from '../helper/createClipPathFromCoordSys';\nimport prepareCartesian2d from '../../coord/cartesian/prepareCustom';\nimport prepareGeo from '../../coord/geo/prepareCustom';\nimport prepareSingleAxis from '../../coord/single/prepareCustom';\nimport preparePolar from '../../coord/polar/prepareCustom';\nimport prepareCalendar from '../../coord/calendar/prepareCustom';\nimport { makeInner, normalizeToArray } from '../../util/model';\nimport { convertToEC4StyleForCustomSerise, isEC4CompatibleStyle, convertFromEC4CompatibleStyle, warnDeprecated } from '../../util/styleCompat';\nimport Transformable from 'zrender/lib/core/Transformable';\nimport { cloneValue } from 'zrender/lib/animation/Animator';\nimport { warn, throwError } from '../../util/log';\nimport { combine, isInAnyMorphing, morphPath, isCombiningPath, separate } from 'zrender/lib/tool/morphPath';\nimport * as matrix from 'zrender/lib/core/matrix';\nimport { createOrUpdatePatternFromDecal } from '../../util/decal';\nvar inner = makeInner();\nvar TRANSFORM_PROPS = {\n  x: 1,\n  y: 1,\n  scaleX: 1,\n  scaleY: 1,\n  originX: 1,\n  originY: 1,\n  rotation: 1\n};\nvar transformPropNamesStr = keys(TRANSFORM_PROPS).join(', ');\n; // Also compat with ec4, where\n// `visual('color') visual('borderColor')` is supported.\n\nvar STYLE_VISUAL_TYPE = {\n  color: 'fill',\n  borderColor: 'stroke'\n};\nvar NON_STYLE_VISUAL_PROPS = {\n  symbol: 1,\n  symbolSize: 1,\n  symbolKeepAspect: 1,\n  legendSymbol: 1,\n  visualMeta: 1,\n  liftZ: 1,\n  decal: 1\n};\nvar EMPHASIS = 'emphasis';\nvar NORMAL = 'normal';\nvar BLUR = 'blur';\nvar SELECT = 'select';\nvar STATES = [NORMAL, EMPHASIS, BLUR, SELECT];\nvar PATH_ITEM_STYLE = {\n  normal: ['itemStyle'],\n  emphasis: [EMPHASIS, 'itemStyle'],\n  blur: [BLUR, 'itemStyle'],\n  select: [SELECT, 'itemStyle']\n};\nvar PATH_LABEL = {\n  normal: ['label'],\n  emphasis: [EMPHASIS, 'label'],\n  blur: [BLUR, 'label'],\n  select: [SELECT, 'label']\n}; // Use prefix to avoid index to be the same as el.name,\n// which will cause weird update animation.\n\nvar GROUP_DIFF_PREFIX = 'e\\0\\0';\nvar attachedTxInfoTmp = {\n  normal: {},\n  emphasis: {},\n  blur: {},\n  select: {}\n};\nvar LEGACY_TRANSFORM_PROPS = {\n  position: ['x', 'y'],\n  scale: ['scaleX', 'scaleY'],\n  origin: ['originX', 'originY']\n};\nvar tmpTransformable = new Transformable();\n/**\n * To reduce total package size of each coordinate systems, the modules `prepareCustom`\n * of each coordinate systems are not required by each coordinate systems directly, but\n * required by the module `custom`.\n *\n * prepareInfoForCustomSeries {Function}: optional\n *     @return {Object} {coordSys: {...}, api: {\n *         coord: function (data, clamp) {}, // return point in global.\n *         size: function (dataSize, dataItem) {} // return size of each axis in coordSys.\n *     }}\n */\n\nvar prepareCustoms = {\n  cartesian2d: prepareCartesian2d,\n  geo: prepareGeo,\n  singleAxis: prepareSingleAxis,\n  polar: preparePolar,\n  calendar: prepareCalendar\n};\n\nvar CustomSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(CustomSeriesModel, _super);\n\n  function CustomSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CustomSeriesModel.type;\n    return _this;\n  }\n\n  CustomSeriesModel.prototype.optionUpdated = function () {\n    this.currentZLevel = this.get('zlevel', true);\n    this.currentZ = this.get('z', true);\n  };\n\n  CustomSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return createListFromArray(this.getSource(), this);\n  };\n\n  CustomSeriesModel.prototype.getDataParams = function (dataIndex, dataType, el) {\n    var params = _super.prototype.getDataParams.call(this, dataIndex, dataType);\n\n    el && (params.info = inner(el).info);\n    return params;\n  };\n\n  CustomSeriesModel.type = 'series.custom';\n  CustomSeriesModel.dependencies = ['grid', 'polar', 'geo', 'singleAxis', 'calendar'];\n  CustomSeriesModel.defaultOption = {\n    coordinateSystem: 'cartesian2d',\n    zlevel: 0,\n    z: 2,\n    legendHoverLink: true,\n    // Custom series will not clip by default.\n    // Some case will use custom series to draw label\n    // For example https://echarts.apache.org/examples/en/editor.html?c=custom-gantt-flight\n    clip: false // Cartesian coordinate system\n    // xAxisIndex: 0,\n    // yAxisIndex: 0,\n    // Polar coordinate system\n    // polarIndex: 0,\n    // Geo coordinate system\n    // geoIndex: 0,\n\n  };\n  return CustomSeriesModel;\n}(SeriesModel);\n\nvar CustomSeriesView =\n/** @class */\nfunction (_super) {\n  __extends(CustomSeriesView, _super);\n\n  function CustomSeriesView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CustomSeriesView.type;\n    return _this;\n  }\n\n  CustomSeriesView.prototype.render = function (customSeries, ecModel, api, payload) {\n    var oldData = this._data;\n    var data = customSeries.getData();\n    var group = this.group;\n    var renderItem = makeRenderItem(customSeries, data, ecModel, api); // By default, merge mode is applied. In most cases, custom series is\n    // used in the scenario that data amount is not large but graphic elements\n    // is complicated, where merge mode is probably necessary for optimization.\n    // For example, reuse graphic elements and only update the transform when\n    // roam or data zoom according to `actionType`.\n\n    var transOpt = customSeries.__transientTransitionOpt; // Enable user to disable transition animation by both set\n    // `from` and `to` dimension as `null`/`undefined`.\n\n    if (transOpt && (transOpt.from == null || transOpt.to == null)) {\n      oldData && oldData.each(function (oldIdx) {\n        doRemoveEl(oldData.getItemGraphicEl(oldIdx), customSeries, group);\n      });\n      data.each(function (newIdx) {\n        createOrUpdateItem(api, null, newIdx, renderItem(newIdx, payload), customSeries, group, data, null);\n      });\n    } else {\n      var morphPreparation_1 = new MorphPreparation(customSeries, transOpt);\n      var diffMode = transOpt ? 'multiple' : 'oneToOne';\n      new DataDiffer(oldData ? oldData.getIndices() : [], data.getIndices(), createGetKey(oldData, diffMode, transOpt && transOpt.from), createGetKey(data, diffMode, transOpt && transOpt.to), null, diffMode).add(function (newIdx) {\n        createOrUpdateItem(api, null, newIdx, renderItem(newIdx, payload), customSeries, group, data, null);\n      }).remove(function (oldIdx) {\n        doRemoveEl(oldData.getItemGraphicEl(oldIdx), customSeries, group);\n      }).update(function (newIdx, oldIdx) {\n        morphPreparation_1.reset('oneToOne');\n        var oldEl = oldData.getItemGraphicEl(oldIdx);\n        morphPreparation_1.findAndAddFrom(oldEl); // PENDING:\n        // if may morph, currently we alway recreate the whole el.\n        // because if reuse some of the el in the group tree, the old el has to\n        // be removed from the group, and consequently we can not calculate\n        // the \"global transition\" of the old element.\n        // But is there performance issue?\n\n        if (morphPreparation_1.hasFrom()) {\n          removeElementDirectly(oldEl, group);\n          oldEl = null;\n        }\n\n        createOrUpdateItem(api, oldEl, newIdx, renderItem(newIdx, payload), customSeries, group, data, morphPreparation_1);\n        morphPreparation_1.applyMorphing();\n      }).updateManyToOne(function (newIdx, oldIndices) {\n        morphPreparation_1.reset('manyToOne');\n\n        for (var i = 0; i < oldIndices.length; i++) {\n          var oldEl = oldData.getItemGraphicEl(oldIndices[i]);\n          morphPreparation_1.findAndAddFrom(oldEl);\n          removeElementDirectly(oldEl, group);\n        }\n\n        createOrUpdateItem(api, null, newIdx, renderItem(newIdx, payload), customSeries, group, data, morphPreparation_1);\n        morphPreparation_1.applyMorphing();\n      }).updateOneToMany(function (newIndices, oldIdx) {\n        morphPreparation_1.reset('oneToMany');\n        var newLen = newIndices.length;\n        var oldEl = oldData.getItemGraphicEl(oldIdx);\n        morphPreparation_1.findAndAddFrom(oldEl);\n        removeElementDirectly(oldEl, group);\n\n        for (var i = 0; i < newLen; i++) {\n          createOrUpdateItem(api, null, newIndices[i], renderItem(newIndices[i], payload), customSeries, group, data, morphPreparation_1);\n        }\n\n        morphPreparation_1.applyMorphing();\n      }).execute();\n    } // Do clipping\n\n\n    var clipPath = customSeries.get('clip', true) ? createClipPath(customSeries.coordinateSystem, false, customSeries) : null;\n\n    if (clipPath) {\n      group.setClipPath(clipPath);\n    } else {\n      group.removeClipPath();\n    }\n\n    this._data = data;\n  };\n\n  CustomSeriesView.prototype.incrementalPrepareRender = function (customSeries, ecModel, api) {\n    this.group.removeAll();\n    this._data = null;\n  };\n\n  CustomSeriesView.prototype.incrementalRender = function (params, customSeries, ecModel, api, payload) {\n    var data = customSeries.getData();\n    var renderItem = makeRenderItem(customSeries, data, ecModel, api);\n\n    function setIncrementalAndHoverLayer(el) {\n      if (!el.isGroup) {\n        el.incremental = true;\n        el.ensureState('emphasis').hoverLayer = true;\n      }\n    }\n\n    for (var idx = params.start; idx < params.end; idx++) {\n      var el = createOrUpdateItem(null, null, idx, renderItem(idx, payload), customSeries, this.group, data, null);\n      el.traverse(setIncrementalAndHoverLayer);\n    }\n  };\n\n  CustomSeriesView.prototype.filterForExposedEvent = function (eventType, query, targetEl, packedEvent) {\n    var elementName = query.element;\n\n    if (elementName == null || targetEl.name === elementName) {\n      return true;\n    } // Enable to give a name on a group made by `renderItem`, and listen\n    // events that triggerd by its descendents.\n\n\n    while ((targetEl = targetEl.__hostTarget || targetEl.parent) && targetEl !== this.group) {\n      if (targetEl.name === elementName) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  CustomSeriesView.type = 'custom';\n  return CustomSeriesView;\n}(ChartView);\n\nfunction createGetKey(data, diffMode, dimension) {\n  if (!data) {\n    return;\n  }\n\n  if (diffMode === 'oneToOne') {\n    return function (rawIdx, dataIndex) {\n      return data.getId(dataIndex);\n    };\n  }\n\n  var diffByDimName = data.getDimension(dimension);\n  var dimInfo = data.getDimensionInfo(diffByDimName);\n\n  if (!dimInfo) {\n    var errMsg = '';\n\n    if (process.env.NODE_ENV !== 'production') {\n      errMsg = dimension + \" is not a valid dimension.\";\n    }\n\n    throwError(errMsg);\n  }\n\n  var ordinalMeta = dimInfo.ordinalMeta;\n  return function (rawIdx, dataIndex) {\n    var key = data.get(diffByDimName, dataIndex);\n\n    if (ordinalMeta) {\n      key = ordinalMeta.categories[key];\n    }\n\n    return key == null || eqNaN(key) ? rawIdx + '' : '_ec_' + key;\n  };\n}\n\nfunction createEl(elOption) {\n  var graphicType = elOption.type;\n  var el; // Those graphic elements are not shapes. They should not be\n  // overwritten by users, so do them first.\n\n  if (graphicType === 'path') {\n    var shape = elOption.shape; // Using pathRect brings convenience to users sacle svg path.\n\n    var pathRect = shape.width != null && shape.height != null ? {\n      x: shape.x || 0,\n      y: shape.y || 0,\n      width: shape.width,\n      height: shape.height\n    } : null;\n    var pathData = getPathData(shape); // Path is also used for icon, so layout 'center' by default.\n\n    el = graphicUtil.makePath(pathData, null, pathRect, shape.layout || 'center');\n    inner(el).customPathData = pathData;\n  } else if (graphicType === 'image') {\n    el = new graphicUtil.Image({});\n    inner(el).customImagePath = elOption.style.image;\n  } else if (graphicType === 'text') {\n    el = new graphicUtil.Text({}); // inner(el).customText = (elOption.style as TextStyleProps).text;\n  } else if (graphicType === 'group') {\n    el = new graphicUtil.Group();\n  } else if (graphicType === 'compoundPath') {\n    throw new Error('\"compoundPath\" is not supported yet.');\n  } else {\n    var Clz = graphicUtil.getShapeClass(graphicType);\n\n    if (!Clz) {\n      var errMsg = '';\n\n      if (process.env.NODE_ENV !== 'production') {\n        errMsg = 'graphic type \"' + graphicType + '\" can not be found.';\n      }\n\n      throwError(errMsg);\n    }\n\n    el = new Clz();\n  }\n\n  inner(el).customGraphicType = graphicType;\n  el.name = elOption.name; // Compat ec4: the default z2 lift is 1. If changing the number,\n  // some cases probably be broken: hierarchy layout along z, like circle packing,\n  // where emphasis only intending to modify color/border rather than lift z2.\n\n  el.z2EmphasisLift = 1;\n  el.z2SelectLift = 1;\n  return el;\n}\n/**\n * ----------------------------------------------------------\n * [STRATEGY_MERGE] Merge properties or erase all properties:\n *\n * Based on the fact that the existing zr element probably be reused, we now consider whether\n * merge or erase all properties to the exsiting elements.\n * That is, if a certain props is not specified in the lastest return of `renderItem`:\n * + \"Merge\" means that do not modify the value on the existing element.\n * + \"Erase all\" means that use a default value to the existing element.\n *\n * \"Merge\" might bring some unexpected state retaining for users and \"erase all\" seams to be\n * more safe. \"erase all\" force users to specify all of the props each time, which is recommanded\n * in most cases.\n * But \"erase all\" theoretically disables the chance of performance optimization (e.g., just\n * generete shape and style at the first time rather than always do that).\n * So we still use \"merge\" rather than \"erase all\". If users need \"erase all\", they can\n * simple always set all of the props each time.\n * Some \"object-like\" config like `textConfig`, `textContent`, `style` which are not needed for\n * every elment, so we replace them only when user specify them. And the that is a total replace.\n *\n * TODO: there is no hint of 'isFirst' to users. So the performance enhancement can not be\n * performed yet. Consider the case:\n * (1) setOption to \"mergeChildren\" with a smaller children count\n * (2) Use dataZoom to make an item disappear.\n * (3) User dataZoom to make the item display again. At that time, renderItem need to return the\n * full option rather than partial option to recreate the element.\n *\n * ----------------------------------------------\n * [STRATEGY_NULL] `hasOwnProperty` or `== null`:\n *\n * Ditinguishing \"own property\" probably bring little trouble to user when make el options.\n * So we  trade a {xx: null} or {xx: undefined} as \"not specified\" if possible rather than\n * \"set them to null/undefined\". In most cases, props can not be cleared. Some typicall\n * clearable props like `style`/`textConfig`/`textContent` we enable `false` to means\n * \"clear\". In some othere special cases that the prop is able to set as null/undefined,\n * but not suitable to use `false`, `hasOwnProperty` is checked.\n *\n * ---------------------------------------------\n * [STRATEGY_TRANSITION] The rule of transition:\n * + For props on the root level of a element:\n *      If there is no `transition` specified, tansform props will be transitioned by default,\n *      which is the same as the previous setting in echarts4 and suitable for the scenario\n *      of dataZoom change.\n *      If `transition` specified, only the specified props will be transitioned.\n * + For props in `shape` and `style`:\n *      Only props specified in `transition` will be transitioned.\n * + Break:\n *      Since ec5, do not make transition to shape by default, because it might result in\n *      performance issue (especially `points` of polygon) and do not necessary in most cases.\n *\n * @return if `isMorphTo`, return `allPropsFinal`.\n */\n\n\nfunction updateElNormal( // Can be null/undefined\napi, el, // Whether be a morph target.\nisMorphTo, dataIndex, elOption, styleOpt, attachedTxInfo, seriesModel, isInit, isTextContent) {\n  var transFromProps = {};\n  var allPropsFinal = {};\n  var elDisplayable = el.isGroup ? null : el; // If be \"morph to\", delay the `updateElNormal` when all of the els in\n  // this data item processed. Because at that time we can get all of the\n  // \"morph from\" and make correct separate/combine.\n\n  !isMorphTo && prepareShapeOrExtraTransitionFrom('shape', el, null, elOption, transFromProps, isInit);\n  prepareShapeOrExtraAllPropsFinal('shape', elOption, allPropsFinal);\n  !isMorphTo && prepareShapeOrExtraTransitionFrom('extra', el, null, elOption, transFromProps, isInit);\n  prepareShapeOrExtraAllPropsFinal('extra', elOption, allPropsFinal);\n  !isMorphTo && prepareTransformTransitionFrom(el, null, elOption, transFromProps, isInit);\n  prepareTransformAllPropsFinal(elOption, allPropsFinal);\n  var txCfgOpt = attachedTxInfo && attachedTxInfo.normal.cfg;\n\n  if (txCfgOpt) {\n    // PENDING: whether use user object directly rather than clone?\n    // TODO:5.0 textConfig transition animation?\n    el.setTextConfig(txCfgOpt);\n  }\n\n  if (el.type === 'text' && styleOpt) {\n    var textOptionStyle = styleOpt; // Compatible with ec4: if `textFill` or `textStroke` exists use them.\n\n    hasOwn(textOptionStyle, 'textFill') && (textOptionStyle.fill = textOptionStyle.textFill);\n    hasOwn(textOptionStyle, 'textStroke') && (textOptionStyle.stroke = textOptionStyle.textStroke);\n  }\n\n  if (styleOpt) {\n    var decalPattern = void 0;\n    var decalObj = isPath(el) ? styleOpt.decal : null;\n\n    if (api && decalObj) {\n      decalObj.dirty = true;\n      decalPattern = createOrUpdatePatternFromDecal(decalObj, api);\n    } // Always overwrite in case user specify this prop.\n\n\n    styleOpt.__decalPattern = decalPattern;\n  }\n\n  !isMorphTo && prepareStyleTransitionFrom(el, null, elOption, styleOpt, transFromProps, isInit);\n\n  if (elDisplayable) {\n    hasOwn(elOption, 'invisible') && (elDisplayable.invisible = elOption.invisible);\n  } // If `isMorphTo`, we should not update these props to el directly, otherwise,\n  // when applying morph finally, the original prop are missing for making \"animation from\".\n\n\n  if (!isMorphTo) {\n    applyPropsFinal(el, allPropsFinal, styleOpt);\n    applyTransitionFrom(el, dataIndex, elOption, seriesModel, transFromProps, isInit);\n  } // Merge by default.\n\n\n  hasOwn(elOption, 'silent') && (el.silent = elOption.silent);\n  hasOwn(elOption, 'ignore') && (el.ignore = elOption.ignore);\n\n  if (!isTextContent) {\n    // `elOption.info` enables user to mount some info on\n    // elements and use them in event handlers.\n    // Update them only when user specified, otherwise, remain.\n    hasOwn(elOption, 'info') && (inner(el).info = elOption.info);\n  }\n\n  styleOpt ? el.dirty() : el.markRedraw();\n  return isMorphTo ? allPropsFinal : null;\n}\n\nfunction applyPropsFinal(el, // Can be null/undefined\nallPropsFinal, styleOpt) {\n  var elDisplayable = el.isGroup ? null : el;\n\n  if (elDisplayable && styleOpt) {\n    var decalPattern = styleOpt.__decalPattern;\n    var originalDecalObj = void 0;\n\n    if (decalPattern) {\n      originalDecalObj = styleOpt.decal;\n      styleOpt.decal = decalPattern;\n    } // PENDING: here the input style object is used directly.\n    // Good for performance but bad for compatibility control.\n\n\n    elDisplayable.useStyle(styleOpt);\n\n    if (decalPattern) {\n      styleOpt.decal = originalDecalObj;\n    } // When style object changed, how to trade the existing animation?\n    // It is probably conplicated and not needed to cover all the cases.\n    // But still need consider the case:\n    // (1) When using init animation on `style.opacity`, and before the animation\n    //     ended users triggers an update by mousewhell. At that time the init\n    //     animation should better be continued rather than terminated.\n    //     So after `useStyle` called, we should change the animation target manually\n    //     to continue the effect of the init animation.\n    // (2) PENDING: If the previous animation targeted at a `val1`, and currently we need\n    //     to update the value to `val2` and no animation declared, should be terminate\n    //     the previous animation or just modify the target of the animation?\n    //     Therotically That will happen not only on `style` but also on `shape` and\n    //     `transfrom` props. But we haven't handle this case at present yet.\n    // (3) PENDING: Is it proper to visit `animators` and `targetName`?\n\n\n    var animators = elDisplayable.animators;\n\n    for (var i = 0; i < animators.length; i++) {\n      var animator = animators[i]; // targetName is the \"topKey\".\n\n      if (animator.targetName === 'style') {\n        animator.changeTarget(elDisplayable.style);\n      }\n    }\n  } // Set el to the final state firstly.\n\n\n  allPropsFinal && el.attr(allPropsFinal);\n}\n\nfunction applyTransitionFrom(el, dataIndex, elOption, seriesModel, // Can be null/undefined\ntransFromProps, isInit) {\n  if (transFromProps) {\n    // Do not use `el.updateDuringAnimation` here becuase `el.updateDuringAnimation` will\n    // be called mutiple time in each animation frame. For example, if both \"transform\" props\n    // and shape props and style props changed, it will generate three animator and called\n    // one-by-one in each animation frame.\n    // We use the during in `animateTo/From` params.\n    var userDuring = elOption.during; // For simplicity, if during not specified, the previous during will not work any more.\n\n    inner(el).userDuring = userDuring;\n    var cfgDuringCall = userDuring ? bind(duringCall, {\n      el: el,\n      userDuring: userDuring\n    }) : null;\n    var cfg = {\n      dataIndex: dataIndex,\n      isFrom: true,\n      during: cfgDuringCall\n    };\n    isInit ? graphicUtil.initProps(el, transFromProps, seriesModel, cfg) : graphicUtil.updateProps(el, transFromProps, seriesModel, cfg);\n  }\n} // See [STRATEGY_TRANSITION]\n\n\nfunction prepareShapeOrExtraTransitionFrom(mainAttr, el, morphFromEl, elOption, transFromProps, isInit) {\n  var attrOpt = elOption[mainAttr];\n\n  if (!attrOpt) {\n    return;\n  }\n\n  var elPropsInAttr = el[mainAttr];\n  var transFromPropsInAttr;\n  var enterFrom = attrOpt.enterFrom;\n\n  if (isInit && enterFrom) {\n    !transFromPropsInAttr && (transFromPropsInAttr = transFromProps[mainAttr] = {});\n    var enterFromKeys = keys(enterFrom);\n\n    for (var i = 0; i < enterFromKeys.length; i++) {\n      // `enterFrom` props are not necessarily also declared in `shape`/`style`/...,\n      // for example, `opacity` can only declared in `enterFrom` but not in `style`.\n      var key = enterFromKeys[i]; // Do not clone, animator will perform that clone.\n\n      transFromPropsInAttr[key] = enterFrom[key];\n    }\n  }\n\n  if (!isInit && elPropsInAttr // Just ignore shape animation in morphing.\n  && !(morphFromEl != null && mainAttr === 'shape')) {\n    if (attrOpt.transition) {\n      !transFromPropsInAttr && (transFromPropsInAttr = transFromProps[mainAttr] = {});\n      var transitionKeys = normalizeToArray(attrOpt.transition);\n\n      for (var i = 0; i < transitionKeys.length; i++) {\n        var key = transitionKeys[i];\n        var elVal = elPropsInAttr[key];\n\n        if (process.env.NODE_ENV !== 'production') {\n          checkNonStyleTansitionRefer(key, attrOpt[key], elVal);\n        } // Do not clone, see `checkNonStyleTansitionRefer`.\n\n\n        transFromPropsInAttr[key] = elVal;\n      }\n    } else if (indexOf(elOption.transition, mainAttr) >= 0) {\n      !transFromPropsInAttr && (transFromPropsInAttr = transFromProps[mainAttr] = {});\n      var elPropsInAttrKeys = keys(elPropsInAttr);\n\n      for (var i = 0; i < elPropsInAttrKeys.length; i++) {\n        var key = elPropsInAttrKeys[i];\n        var elVal = elPropsInAttr[key];\n\n        if (isNonStyleTransitionEnabled(attrOpt[key], elVal)) {\n          transFromPropsInAttr[key] = elVal;\n        }\n      }\n    }\n  }\n\n  var leaveTo = attrOpt.leaveTo;\n\n  if (leaveTo) {\n    var leaveToProps = getOrCreateLeaveToPropsFromEl(el);\n    var leaveToPropsInAttr = leaveToProps[mainAttr] || (leaveToProps[mainAttr] = {});\n    var leaveToKeys = keys(leaveTo);\n\n    for (var i = 0; i < leaveToKeys.length; i++) {\n      var key = leaveToKeys[i];\n      leaveToPropsInAttr[key] = leaveTo[key];\n    }\n  }\n}\n\nfunction prepareShapeOrExtraAllPropsFinal(mainAttr, elOption, allProps) {\n  var attrOpt = elOption[mainAttr];\n\n  if (!attrOpt) {\n    return;\n  }\n\n  var allPropsInAttr = allProps[mainAttr] = {};\n  var keysInAttr = keys(attrOpt);\n\n  for (var i = 0; i < keysInAttr.length; i++) {\n    var key = keysInAttr[i]; // To avoid share one object with different element, and\n    // to avoid user modify the object inexpectedly, have to clone.\n\n    allPropsInAttr[key] = cloneValue(attrOpt[key]);\n  }\n} // See [STRATEGY_TRANSITION].\n\n\nfunction prepareTransformTransitionFrom(el, morphFromEl, elOption, transFromProps, isInit) {\n  var enterFrom = elOption.enterFrom;\n\n  if (isInit && enterFrom) {\n    var enterFromKeys = keys(enterFrom);\n\n    for (var i = 0; i < enterFromKeys.length; i++) {\n      var key = enterFromKeys[i];\n\n      if (process.env.NODE_ENV !== 'production') {\n        checkTransformPropRefer(key, 'el.enterFrom');\n      } // Do not clone, animator will perform that clone.\n\n\n      transFromProps[key] = enterFrom[key];\n    }\n  }\n\n  if (!isInit) {\n    // If morphing, force transition all transform props.\n    // otherwise might have incorrect morphing animation.\n    if (morphFromEl) {\n      var fromTransformable = calcOldElLocalTransformBasedOnNewElParent(morphFromEl, el);\n      setTransformPropToTransitionFrom(transFromProps, 'x', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'y', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'scaleX', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'scaleY', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'originX', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'originY', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'rotation', fromTransformable);\n    } else if (elOption.transition) {\n      var transitionKeys = normalizeToArray(elOption.transition);\n\n      for (var i = 0; i < transitionKeys.length; i++) {\n        var key = transitionKeys[i];\n\n        if (key === 'style' || key === 'shape' || key === 'extra') {\n          continue;\n        }\n\n        var elVal = el[key];\n\n        if (process.env.NODE_ENV !== 'production') {\n          checkTransformPropRefer(key, 'el.transition');\n          checkNonStyleTansitionRefer(key, elOption[key], elVal);\n        } // Do not clone, see `checkNonStyleTansitionRefer`.\n\n\n        transFromProps[key] = elVal;\n      }\n    } // This default transition see [STRATEGY_TRANSITION]\n    else {\n        setTransformPropToTransitionFrom(transFromProps, 'x', el);\n        setTransformPropToTransitionFrom(transFromProps, 'y', el);\n      }\n  }\n\n  var leaveTo = elOption.leaveTo;\n\n  if (leaveTo) {\n    var leaveToProps = getOrCreateLeaveToPropsFromEl(el);\n    var leaveToKeys = keys(leaveTo);\n\n    for (var i = 0; i < leaveToKeys.length; i++) {\n      var key = leaveToKeys[i];\n\n      if (process.env.NODE_ENV !== 'production') {\n        checkTransformPropRefer(key, 'el.leaveTo');\n      }\n\n      leaveToProps[key] = leaveTo[key];\n    }\n  }\n}\n\nfunction prepareTransformAllPropsFinal(elOption, allProps) {\n  setLagecyTransformProp(elOption, allProps, 'position');\n  setLagecyTransformProp(elOption, allProps, 'scale');\n  setLagecyTransformProp(elOption, allProps, 'origin');\n  setTransformProp(elOption, allProps, 'x');\n  setTransformProp(elOption, allProps, 'y');\n  setTransformProp(elOption, allProps, 'scaleX');\n  setTransformProp(elOption, allProps, 'scaleY');\n  setTransformProp(elOption, allProps, 'originX');\n  setTransformProp(elOption, allProps, 'originY');\n  setTransformProp(elOption, allProps, 'rotation');\n} // See [STRATEGY_TRANSITION].\n\n\nfunction prepareStyleTransitionFrom(el, morphFromEl, elOption, styleOpt, transFromProps, isInit) {\n  if (!styleOpt) {\n    return;\n  } // At present in \"many-to-one\"/\"one-to-many\" case, to not support \"many\" have\n  // different styles and make style transitions. That might be a rare case.\n\n\n  var fromEl = morphFromEl || el;\n  var fromElStyle = fromEl.style;\n  var transFromStyleProps;\n  var enterFrom = styleOpt.enterFrom;\n\n  if (isInit && enterFrom) {\n    var enterFromKeys = keys(enterFrom);\n    !transFromStyleProps && (transFromStyleProps = transFromProps.style = {});\n\n    for (var i = 0; i < enterFromKeys.length; i++) {\n      var key = enterFromKeys[i]; // Do not clone, animator will perform that clone.\n\n      transFromStyleProps[key] = enterFrom[key];\n    }\n  }\n\n  if (!isInit && fromElStyle) {\n    if (styleOpt.transition) {\n      var transitionKeys = normalizeToArray(styleOpt.transition);\n      !transFromStyleProps && (transFromStyleProps = transFromProps.style = {});\n\n      for (var i = 0; i < transitionKeys.length; i++) {\n        var key = transitionKeys[i];\n        var elVal = fromElStyle[key]; // Do not clone, see `checkNonStyleTansitionRefer`.\n\n        transFromStyleProps[key] = elVal;\n      }\n    } else if (el.getAnimationStyleProps && indexOf(elOption.transition, 'style') >= 0) {\n      var animationProps = el.getAnimationStyleProps();\n      var animationStyleProps = animationProps ? animationProps.style : null;\n\n      if (animationStyleProps) {\n        !transFromStyleProps && (transFromStyleProps = transFromProps.style = {});\n        var styleKeys = keys(styleOpt);\n\n        for (var i = 0; i < styleKeys.length; i++) {\n          var key = styleKeys[i];\n\n          if (animationStyleProps[key]) {\n            var elVal = fromElStyle[key];\n            transFromStyleProps[key] = elVal;\n          }\n        }\n      }\n    }\n  }\n\n  var leaveTo = styleOpt.leaveTo;\n\n  if (leaveTo) {\n    var leaveToKeys = keys(leaveTo);\n    var leaveToProps = getOrCreateLeaveToPropsFromEl(el);\n    var leaveToStyleProps = leaveToProps.style || (leaveToProps.style = {});\n\n    for (var i = 0; i < leaveToKeys.length; i++) {\n      var key = leaveToKeys[i];\n      leaveToStyleProps[key] = leaveTo[key];\n    }\n  }\n}\n/**\n * If make \"transform\"(x/y/scaleX/scaleY/orient/originX/originY) transition between\n * two path elements that have different hierarchy, before we retrieve the \"from\" props,\n * we have to calculate the local transition of the \"oldPath\" based on the parent of\n * the \"newPath\".\n * At present, the case only happend in \"morphing\". Without morphing, the transform\n * transition are all between elements in the same hierarchy, where this kind of process\n * is not needed.\n *\n * [CAVEAT]:\n * This method makes sense only if: (very tricky)\n * (1) \"newEl\" has been added to its final parent.\n * (2) Local transform props of \"newPath.parent\" are not at their final value but already\n * have been at the \"from value\".\n *     This is currently ensured by:\n *     (2.1) \"graphicUtil.animationFrom\", which will set the element to the \"from value\"\n *     immediately.\n *     (2.2) \"morph\" option is not allowed to be set on Group, so all of the groups have\n *     been finished their \"updateElNormal\" when calling this method in morphing process.\n */\n\n\nfunction calcOldElLocalTransformBasedOnNewElParent(oldEl, newEl) {\n  if (!oldEl || oldEl === newEl || oldEl.parent === newEl.parent) {\n    return oldEl;\n  } // Not sure oldEl is rendered (may have \"lazyUpdate\"),\n  // so always call `getComputedTransform`.\n\n\n  var tmpM = tmpTransformable.transform || (tmpTransformable.transform = matrix.identity([]));\n  var oldGlobalTransform = oldEl.getComputedTransform();\n  oldGlobalTransform ? matrix.copy(tmpM, oldGlobalTransform) : matrix.identity(tmpM);\n  var newParent = newEl.parent;\n\n  if (newParent) {\n    newParent.getComputedTransform();\n  }\n\n  tmpTransformable.originX = oldEl.originX;\n  tmpTransformable.originY = oldEl.originY;\n  tmpTransformable.parent = newParent;\n  tmpTransformable.decomposeTransform();\n  return tmpTransformable;\n}\n\nvar checkNonStyleTansitionRefer;\n\nif (process.env.NODE_ENV !== 'production') {\n  checkNonStyleTansitionRefer = function (propName, optVal, elVal) {\n    if (!isArrayLike(optVal)) {\n      assert(optVal != null && isFinite(optVal), 'Prop `' + propName + '` must refer to a finite number or ArrayLike for transition.');\n    } else {\n      // Try not to copy array for performance, but if user use the same object in different\n      // call of `renderItem`, it will casue animation transition fail.\n      assert(optVal !== elVal, 'Prop `' + propName + '` must use different Array object each time for transition.');\n    }\n  };\n}\n\nfunction isNonStyleTransitionEnabled(optVal, elVal) {\n  // The same as `checkNonStyleTansitionRefer`.\n  return !isArrayLike(optVal) ? optVal != null && isFinite(optVal) : optVal !== elVal;\n}\n\nvar checkTransformPropRefer;\n\nif (process.env.NODE_ENV !== 'production') {\n  checkTransformPropRefer = function (key, usedIn) {\n    assert(hasOwn(TRANSFORM_PROPS, key), 'Prop `' + key + '` is not a permitted in `' + usedIn + '`. ' + 'Only `' + keys(TRANSFORM_PROPS).join('`, `') + '` are permitted.');\n  };\n}\n\nfunction getOrCreateLeaveToPropsFromEl(el) {\n  var innerEl = inner(el);\n  return innerEl.leaveToProps || (innerEl.leaveToProps = {});\n} // Use it to avoid it be exposed to user.\n\n\nvar tmpDuringScope = {};\nvar customDuringAPI = {\n  // Usually other props do not need to be changed in animation during.\n  setTransform: function (key, val) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(hasOwn(TRANSFORM_PROPS, key), 'Only ' + transformPropNamesStr + ' available in `setTransform`.');\n    }\n\n    tmpDuringScope.el[key] = val;\n    return this;\n  },\n  getTransform: function (key) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(hasOwn(TRANSFORM_PROPS, key), 'Only ' + transformPropNamesStr + ' available in `getTransform`.');\n    }\n\n    return tmpDuringScope.el[key];\n  },\n  setShape: function (key, val) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var shape = tmpDuringScope.el.shape || (tmpDuringScope.el.shape = {});\n    shape[key] = val;\n    tmpDuringScope.isShapeDirty = true;\n    return this;\n  },\n  getShape: function (key) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var shape = tmpDuringScope.el.shape;\n\n    if (shape) {\n      return shape[key];\n    }\n  },\n  setStyle: function (key, val) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var style = tmpDuringScope.el.style;\n\n    if (style) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (eqNaN(val)) {\n          warn('style.' + key + ' must not be assigned with NaN.');\n        }\n      }\n\n      style[key] = val;\n      tmpDuringScope.isStyleDirty = true;\n    }\n\n    return this;\n  },\n  getStyle: function (key) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var style = tmpDuringScope.el.style;\n\n    if (style) {\n      return style[key];\n    }\n  },\n  setExtra: function (key, val) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var extra = tmpDuringScope.el.extra || (tmpDuringScope.el.extra = {});\n    extra[key] = val;\n    return this;\n  },\n  getExtra: function (key) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var extra = tmpDuringScope.el.extra;\n\n    if (extra) {\n      return extra[key];\n    }\n  }\n};\n\nfunction assertNotReserved(key) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (key === 'transition' || key === 'enterFrom' || key === 'leaveTo') {\n      throw new Error('key must not be \"' + key + '\"');\n    }\n  }\n}\n\nfunction duringCall() {\n  // Do not provide \"percent\" until some requirements come.\n  // Because consider thies case:\n  // enterFrom: {x: 100, y: 30}, transition: 'x'.\n  // And enter duration is different from update duration.\n  // Thus it might be confused about the meaning of \"percent\" in during callback.\n  var scope = this;\n  var el = scope.el;\n\n  if (!el) {\n    return;\n  } // If el is remove from zr by reason like legend, during still need to called,\n  // becuase el will be added back to zr and the prop value should not be incorrect.\n\n\n  var newstUserDuring = inner(el).userDuring;\n  var scopeUserDuring = scope.userDuring; // Ensured a during is only called once in each animation frame.\n  // If a during is called multiple times in one frame, maybe some users' calulation logic\n  // might be wrong (not sure whether this usage exists).\n  // The case of a during might be called twice can be: by default there is a animator for\n  // 'x', 'y' when init. Before the init animation finished, call `setOption` to start\n  // another animators for 'style'/'shape'/'extra'.\n\n  if (newstUserDuring !== scopeUserDuring) {\n    // release\n    scope.el = scope.userDuring = null;\n    return;\n  }\n\n  tmpDuringScope.el = el;\n  tmpDuringScope.isShapeDirty = false;\n  tmpDuringScope.isStyleDirty = false; // Give no `this` to user in \"during\" calling.\n\n  scopeUserDuring(customDuringAPI);\n\n  if (tmpDuringScope.isShapeDirty && el.dirtyShape) {\n    el.dirtyShape();\n  }\n\n  if (tmpDuringScope.isStyleDirty && el.dirtyStyle) {\n    el.dirtyStyle();\n  } // markRedraw() will be called by default in during.\n  // FIXME `this.markRedraw();` directly ?\n  // FIXME: if in future meet the case that some prop will be both modified in `during` and `state`,\n  // consider the issue that the prop might be incorrect when return to \"normal\" state.\n\n}\n\nfunction updateElOnState(state, el, elStateOpt, styleOpt, attachedTxInfo, isRoot, isTextContent) {\n  var elDisplayable = el.isGroup ? null : el;\n  var txCfgOpt = attachedTxInfo && attachedTxInfo[state].cfg; // PENDING:5.0 support customize scale change and transition animation?\n\n  if (elDisplayable) {\n    // By default support auto lift color when hover whether `emphasis` specified.\n    var stateObj = elDisplayable.ensureState(state);\n\n    if (styleOpt === false) {\n      var existingEmphasisState = elDisplayable.getState(state);\n\n      if (existingEmphasisState) {\n        existingEmphasisState.style = null;\n      }\n    } else {\n      // style is needed to enable defaut emphasis.\n      stateObj.style = styleOpt || null;\n    } // If `elOption.styleEmphasis` or `elOption.emphasis.style` is `false`,\n    // remove hover style.\n    // If `elOption.textConfig` or `elOption.emphasis.textConfig` is null/undefined, it does not\n    // make sense. So for simplicity, we do not ditinguish `hasOwnProperty` and null/undefined.\n\n\n    if (txCfgOpt) {\n      stateObj.textConfig = txCfgOpt;\n    }\n\n    setDefaultStateProxy(elDisplayable);\n  }\n}\n\nfunction updateZ(el, elOption, seriesModel, attachedTxInfo) {\n  // Group not support textContent and not support z yet.\n  if (el.isGroup) {\n    return;\n  }\n\n  var elDisplayable = el;\n  var currentZ = seriesModel.currentZ;\n  var currentZLevel = seriesModel.currentZLevel; // Always erase.\n\n  elDisplayable.z = currentZ;\n  elDisplayable.zlevel = currentZLevel; // z2 must not be null/undefined, otherwise sort error may occur.\n\n  var optZ2 = elOption.z2;\n  optZ2 != null && (elDisplayable.z2 = optZ2 || 0);\n\n  for (var i = 0; i < STATES.length; i++) {\n    updateZForEachState(elDisplayable, elOption, STATES[i]);\n  }\n}\n\nfunction updateZForEachState(elDisplayable, elOption, state) {\n  var isNormal = state === NORMAL;\n  var elStateOpt = isNormal ? elOption : retrieveStateOption(elOption, state);\n  var optZ2 = elStateOpt ? elStateOpt.z2 : null;\n  var stateObj;\n\n  if (optZ2 != null) {\n    // Do not `ensureState` until required.\n    stateObj = isNormal ? elDisplayable : elDisplayable.ensureState(state);\n    stateObj.z2 = optZ2 || 0;\n  }\n}\n\nfunction setLagecyTransformProp(elOption, targetProps, legacyName, fromTransformable // If provided, retrieve from the element.\n) {\n  var legacyArr = elOption[legacyName];\n  var xyName = LEGACY_TRANSFORM_PROPS[legacyName];\n\n  if (legacyArr) {\n    if (fromTransformable) {\n      targetProps[xyName[0]] = fromTransformable[xyName[0]];\n      targetProps[xyName[1]] = fromTransformable[xyName[1]];\n    } else {\n      targetProps[xyName[0]] = legacyArr[0];\n      targetProps[xyName[1]] = legacyArr[1];\n    }\n  }\n}\n\nfunction setTransformProp(elOption, allProps, name, fromTransformable // If provided, retrieve from the element.\n) {\n  if (elOption[name] != null) {\n    allProps[name] = fromTransformable ? fromTransformable[name] : elOption[name];\n  }\n}\n\nfunction setTransformPropToTransitionFrom(transitionFrom, name, fromTransformable // If provided, retrieve from the element.\n) {\n  if (fromTransformable) {\n    transitionFrom[name] = fromTransformable[name];\n  }\n}\n\nfunction makeRenderItem(customSeries, data, ecModel, api) {\n  var renderItem = customSeries.get('renderItem');\n  var coordSys = customSeries.coordinateSystem;\n  var prepareResult = {};\n\n  if (coordSys) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(renderItem, 'series.render is required.');\n      assert(coordSys.prepareCustoms || prepareCustoms[coordSys.type], 'This coordSys does not support custom series.');\n    } // `coordSys.prepareCustoms` is used for external coord sys like bmap.\n\n\n    prepareResult = coordSys.prepareCustoms ? coordSys.prepareCustoms(coordSys) : prepareCustoms[coordSys.type](coordSys);\n  }\n\n  var userAPI = defaults({\n    getWidth: api.getWidth,\n    getHeight: api.getHeight,\n    getZr: api.getZr,\n    getDevicePixelRatio: api.getDevicePixelRatio,\n    value: value,\n    style: style,\n    ordinalRawValue: ordinalRawValue,\n    styleEmphasis: styleEmphasis,\n    visual: visual,\n    barLayout: barLayout,\n    currentSeriesIndices: currentSeriesIndices,\n    font: font\n  }, prepareResult.api || {});\n  var userParams = {\n    // The life cycle of context: current round of rendering.\n    // The global life cycle is probably not necessary, because\n    // user can store global status by themselves.\n    context: {},\n    seriesId: customSeries.id,\n    seriesName: customSeries.name,\n    seriesIndex: customSeries.seriesIndex,\n    coordSys: prepareResult.coordSys,\n    dataInsideLength: data.count(),\n    encode: wrapEncodeDef(customSeries.getData())\n  }; // If someday intending to refactor them to a class, should consider do not\n  // break change: currently these attribute member are encapsulated in a closure\n  // so that do not need to force user to call these method with a scope.\n  // Do not support call `api` asynchronously without dataIndexInside input.\n\n  var currDataIndexInside;\n  var currItemModel;\n  var currItemStyleModels = {};\n  var currLabelModels = {};\n  var seriesItemStyleModels = {};\n  var seriesLabelModels = {};\n\n  for (var i = 0; i < STATES.length; i++) {\n    var stateName = STATES[i];\n    seriesItemStyleModels[stateName] = customSeries.getModel(PATH_ITEM_STYLE[stateName]);\n    seriesLabelModels[stateName] = customSeries.getModel(PATH_LABEL[stateName]);\n  }\n\n  function getItemModel(dataIndexInside) {\n    return dataIndexInside === currDataIndexInside ? currItemModel || (currItemModel = data.getItemModel(dataIndexInside)) : data.getItemModel(dataIndexInside);\n  }\n\n  function getItemStyleModel(dataIndexInside, state) {\n    return !data.hasItemOption ? seriesItemStyleModels[state] : dataIndexInside === currDataIndexInside ? currItemStyleModels[state] || (currItemStyleModels[state] = getItemModel(dataIndexInside).getModel(PATH_ITEM_STYLE[state])) : getItemModel(dataIndexInside).getModel(PATH_ITEM_STYLE[state]);\n  }\n\n  function getLabelModel(dataIndexInside, state) {\n    return !data.hasItemOption ? seriesLabelModels[state] : dataIndexInside === currDataIndexInside ? currLabelModels[state] || (currLabelModels[state] = getItemModel(dataIndexInside).getModel(PATH_LABEL[state])) : getItemModel(dataIndexInside).getModel(PATH_LABEL[state]);\n  }\n\n  return function (dataIndexInside, payload) {\n    currDataIndexInside = dataIndexInside;\n    currItemModel = null;\n    currItemStyleModels = {};\n    currLabelModels = {};\n    return renderItem && renderItem(defaults({\n      dataIndexInside: dataIndexInside,\n      dataIndex: data.getRawIndex(dataIndexInside),\n      // Can be used for optimization when zoom or roam.\n      actionType: payload ? payload.type : null\n    }, userParams), userAPI);\n  };\n  /**\n   * @public\n   * @param dim by default 0.\n   * @param dataIndexInside by default `currDataIndexInside`.\n   */\n\n  function value(dim, dataIndexInside) {\n    dataIndexInside == null && (dataIndexInside = currDataIndexInside);\n    return data.get(data.getDimension(dim || 0), dataIndexInside);\n  }\n  /**\n   * @public\n   * @param dim by default 0.\n   * @param dataIndexInside by default `currDataIndexInside`.\n   */\n\n\n  function ordinalRawValue(dim, dataIndexInside) {\n    dataIndexInside == null && (dataIndexInside = currDataIndexInside);\n    var dimInfo = data.getDimensionInfo(dim || 0);\n\n    if (!dimInfo) {\n      return;\n    }\n\n    var val = data.get(dimInfo.name, dataIndexInside);\n    var ordinalMeta = dimInfo && dimInfo.ordinalMeta;\n    return ordinalMeta ? ordinalMeta.categories[val] : val;\n  }\n  /**\n   * @deprecated The orgininal intention of `api.style` is enable to set itemStyle\n   * like other series. But it not necessary and not easy to give a strict definition\n   * of what it return. And since echarts5 it needs to be make compat work. So\n   * deprecates it since echarts5.\n   *\n   * By default, `visual` is applied to style (to support visualMap).\n   * `visual.color` is applied at `fill`. If user want apply visual.color on `stroke`,\n   * it can be implemented as:\n   * `api.style({stroke: api.visual('color'), fill: null})`;\n   *\n   * [Compat]: since ec5, RectText has been separated from its hosts el.\n   * so `api.style()` will only return the style from `itemStyle` but not handle `label`\n   * any more. But `series.label` config is never published in doc.\n   * We still compat it in `api.style()`. But not encourage to use it and will still not\n   * to pulish it to doc.\n   * @public\n   * @param dataIndexInside by default `currDataIndexInside`.\n   */\n\n\n  function style(userProps, dataIndexInside) {\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecated('api.style', 'Please write literal style directly instead.');\n    }\n\n    dataIndexInside == null && (dataIndexInside = currDataIndexInside);\n    var style = data.getItemVisual(dataIndexInside, 'style');\n    var visualColor = style && style.fill;\n    var opacity = style && style.opacity;\n    var itemStyle = getItemStyleModel(dataIndexInside, NORMAL).getItemStyle();\n    visualColor != null && (itemStyle.fill = visualColor);\n    opacity != null && (itemStyle.opacity = opacity);\n    var opt = {\n      inheritColor: isString(visualColor) ? visualColor : '#000'\n    };\n    var labelModel = getLabelModel(dataIndexInside, NORMAL); // Now that the feture of \"auto adjust text fill/stroke\" has been migrated to zrender\n    // since ec5, we should set `isAttached` as `false` here and make compat in\n    // `convertToEC4StyleForCustomSerise`.\n\n    var textStyle = labelStyleHelper.createTextStyle(labelModel, null, opt, false, true);\n    textStyle.text = labelModel.getShallow('show') ? retrieve2(customSeries.getFormattedLabel(dataIndexInside, NORMAL), getDefaultLabel(data, dataIndexInside)) : null;\n    var textConfig = labelStyleHelper.createTextConfig(labelModel, opt, false);\n    preFetchFromExtra(userProps, itemStyle);\n    itemStyle = convertToEC4StyleForCustomSerise(itemStyle, textStyle, textConfig);\n    userProps && applyUserPropsAfter(itemStyle, userProps);\n    itemStyle.legacy = true;\n    return itemStyle;\n  }\n  /**\n   * @deprecated The reason see `api.style()`\n   * @public\n   * @param dataIndexInside by default `currDataIndexInside`.\n   */\n\n\n  function styleEmphasis(userProps, dataIndexInside) {\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecated('api.styleEmphasis', 'Please write literal style directly instead.');\n    }\n\n    dataIndexInside == null && (dataIndexInside = currDataIndexInside);\n    var itemStyle = getItemStyleModel(dataIndexInside, EMPHASIS).getItemStyle();\n    var labelModel = getLabelModel(dataIndexInside, EMPHASIS);\n    var textStyle = labelStyleHelper.createTextStyle(labelModel, null, null, true, true);\n    textStyle.text = labelModel.getShallow('show') ? retrieve3(customSeries.getFormattedLabel(dataIndexInside, EMPHASIS), customSeries.getFormattedLabel(dataIndexInside, NORMAL), getDefaultLabel(data, dataIndexInside)) : null;\n    var textConfig = labelStyleHelper.createTextConfig(labelModel, null, true);\n    preFetchFromExtra(userProps, itemStyle);\n    itemStyle = convertToEC4StyleForCustomSerise(itemStyle, textStyle, textConfig);\n    userProps && applyUserPropsAfter(itemStyle, userProps);\n    itemStyle.legacy = true;\n    return itemStyle;\n  }\n\n  function applyUserPropsAfter(itemStyle, extra) {\n    for (var key in extra) {\n      if (hasOwn(extra, key)) {\n        itemStyle[key] = extra[key];\n      }\n    }\n  }\n\n  function preFetchFromExtra(extra, itemStyle) {\n    // A trick to retrieve those props firstly, which are used to\n    // apply auto inside fill/stroke in `convertToEC4StyleForCustomSerise`.\n    // (It's not reasonable but only for a degree of compat)\n    if (extra) {\n      extra.textFill && (itemStyle.textFill = extra.textFill);\n      extra.textPosition && (itemStyle.textPosition = extra.textPosition);\n    }\n  }\n  /**\n   * @public\n   * @param dataIndexInside by default `currDataIndexInside`.\n   */\n\n\n  function visual(visualType, dataIndexInside) {\n    dataIndexInside == null && (dataIndexInside = currDataIndexInside);\n\n    if (hasOwn(STYLE_VISUAL_TYPE, visualType)) {\n      var style_1 = data.getItemVisual(dataIndexInside, 'style');\n      return style_1 ? style_1[STYLE_VISUAL_TYPE[visualType]] : null;\n    } // Only support these visuals. Other visual might be inner tricky\n    // for performance (like `style`), do not expose to users.\n\n\n    if (hasOwn(NON_STYLE_VISUAL_PROPS, visualType)) {\n      return data.getItemVisual(dataIndexInside, visualType);\n    }\n  }\n  /**\n   * @public\n   * @return If not support, return undefined.\n   */\n\n\n  function barLayout(opt) {\n    if (coordSys.type === 'cartesian2d') {\n      var baseAxis = coordSys.getBaseAxis();\n      return getLayoutOnAxis(defaults({\n        axis: baseAxis\n      }, opt));\n    }\n  }\n  /**\n   * @public\n   */\n\n\n  function currentSeriesIndices() {\n    return ecModel.getCurrentSeriesIndices();\n  }\n  /**\n   * @public\n   * @return font string\n   */\n\n\n  function font(opt) {\n    return labelStyleHelper.getFont(opt, ecModel);\n  }\n}\n\nfunction wrapEncodeDef(data) {\n  var encodeDef = {};\n  each(data.dimensions, function (dimName, dataDimIndex) {\n    var dimInfo = data.getDimensionInfo(dimName);\n\n    if (!dimInfo.isExtraCoord) {\n      var coordDim = dimInfo.coordDim;\n      var dataDims = encodeDef[coordDim] = encodeDef[coordDim] || [];\n      dataDims[dimInfo.coordDimIndex] = dataDimIndex;\n    }\n  });\n  return encodeDef;\n}\n\nfunction createOrUpdateItem(api, el, dataIndex, elOption, seriesModel, group, data, morphPreparation) {\n  // [Rule]\n  // If `renderItem` returns `null`/`undefined`/`false`, remove the previous el if existing.\n  //     (It seems that violate the \"merge\" principle, but most of users probably intuitively\n  //     regard \"return;\" as \"show nothing element whatever\", so make a exception to meet the\n  //     most cases.)\n  // The rule or \"merge\" see [STRATEGY_MERGE].\n  // If `elOption` is `null`/`undefined`/`false` (when `renderItem` returns nothing).\n  if (!elOption) {\n    removeElementDirectly(el, group);\n    return;\n  }\n\n  el = doCreateOrUpdateEl(api, el, dataIndex, elOption, seriesModel, group, true, morphPreparation);\n  el && data.setItemGraphicEl(dataIndex, el);\n  enableHoverEmphasis(el, elOption.focus, elOption.blurScope);\n  return el;\n}\n\nfunction doCreateOrUpdateEl(api, el, dataIndex, elOption, seriesModel, group, isRoot, morphPreparation) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(elOption, 'should not have an null/undefined element setting');\n  }\n\n  var toBeReplacedIdx = -1;\n\n  if (el && doesElNeedRecreate(el, elOption) // || (\n  //     // PENDING: even in one-to-one mapping case, if el is marked as morph,\n  //     // do not sure whether the el will be mapped to another el with different\n  //     // hierarchy in Group tree. So always recreate el rather than reuse the el.\n  //     morphPreparation && morphPreparation.isOneToOneFrom(el)\n  // )\n  ) {\n      // Should keep at the original index, otherwise \"merge by index\" will be incorrect.\n      toBeReplacedIdx = group.childrenRef().indexOf(el);\n      el = null;\n    }\n\n  var elIsNewCreated = !el;\n\n  if (!el) {\n    el = createEl(elOption);\n  } else {\n    // FIMXE:NEXT unified clearState?\n    // If in some case the performance issue arised, consider\n    // do not clearState but update cached normal state directly.\n    el.clearStates();\n  }\n\n  var canMorph = inner(el).canMorph = elOption.morph && isPath(el);\n  var thisElIsMorphTo = canMorph && morphPreparation && morphPreparation.hasFrom(); // Use update animation when morph is enabled.\n\n  var isInit = elIsNewCreated && !thisElIsMorphTo;\n  attachedTxInfoTmp.normal.cfg = attachedTxInfoTmp.normal.conOpt = attachedTxInfoTmp.emphasis.cfg = attachedTxInfoTmp.emphasis.conOpt = attachedTxInfoTmp.blur.cfg = attachedTxInfoTmp.blur.conOpt = attachedTxInfoTmp.select.cfg = attachedTxInfoTmp.select.conOpt = null;\n  attachedTxInfoTmp.isLegacy = false;\n  doCreateOrUpdateAttachedTx(el, dataIndex, elOption, seriesModel, isInit, attachedTxInfoTmp);\n  doCreateOrUpdateClipPath(el, dataIndex, elOption, seriesModel, isInit);\n  var pendingAllPropsFinal = updateElNormal(api, el, thisElIsMorphTo, dataIndex, elOption, elOption.style, attachedTxInfoTmp, seriesModel, isInit, false);\n\n  if (thisElIsMorphTo) {\n    morphPreparation.addTo(el, elOption, dataIndex, pendingAllPropsFinal);\n  }\n\n  for (var i = 0; i < STATES.length; i++) {\n    var stateName = STATES[i];\n\n    if (stateName !== NORMAL) {\n      var otherStateOpt = retrieveStateOption(elOption, stateName);\n      var otherStyleOpt = retrieveStyleOptionOnState(elOption, otherStateOpt, stateName);\n      updateElOnState(stateName, el, otherStateOpt, otherStyleOpt, attachedTxInfoTmp, isRoot, false);\n    }\n  }\n\n  updateZ(el, elOption, seriesModel, attachedTxInfoTmp);\n\n  if (elOption.type === 'group') {\n    mergeChildren(api, el, dataIndex, elOption, seriesModel, morphPreparation);\n  }\n\n  if (toBeReplacedIdx >= 0) {\n    group.replaceAt(el, toBeReplacedIdx);\n  } else {\n    group.add(el);\n  }\n\n  return el;\n} // `el` must not be null/undefined.\n\n\nfunction doesElNeedRecreate(el, elOption) {\n  var elInner = inner(el);\n  var elOptionType = elOption.type;\n  var elOptionShape = elOption.shape;\n  var elOptionStyle = elOption.style;\n  return (// If `elOptionType` is `null`, follow the merge principle.\n    elOptionType != null && elOptionType !== elInner.customGraphicType || elOptionType === 'path' && hasOwnPathData(elOptionShape) && getPathData(elOptionShape) !== elInner.customPathData || elOptionType === 'image' && hasOwn(elOptionStyle, 'image') && elOptionStyle.image !== elInner.customImagePath // // FIXME test and remove this restriction?\n    // || (elOptionType === 'text'\n    //     && hasOwn(elOptionStyle, 'text')\n    //     && (elOptionStyle as TextStyleProps).text !== elInner.customText\n    // )\n\n  );\n}\n\nfunction doCreateOrUpdateClipPath(el, dataIndex, elOption, seriesModel, isInit) {\n  // Based on the \"merge\" principle, if no clipPath provided,\n  // do nothing. The exists clip will be totally removed only if\n  // `el.clipPath` is `false`. Otherwise it will be merged/replaced.\n  var clipPathOpt = elOption.clipPath;\n\n  if (clipPathOpt === false) {\n    if (el && el.getClipPath()) {\n      el.removeClipPath();\n    }\n  } else if (clipPathOpt) {\n    var clipPath = el.getClipPath();\n\n    if (clipPath && doesElNeedRecreate(clipPath, clipPathOpt)) {\n      clipPath = null;\n    }\n\n    if (!clipPath) {\n      clipPath = createEl(clipPathOpt);\n\n      if (process.env.NODE_ENV !== 'production') {\n        assert(clipPath instanceof graphicUtil.Path, 'Only any type of `path` can be used in `clipPath`, rather than ' + clipPath.type + '.');\n      }\n\n      el.setClipPath(clipPath);\n    }\n\n    updateElNormal(null, clipPath, null, dataIndex, clipPathOpt, null, null, seriesModel, isInit, false);\n  } // If not define `clipPath` in option, do nothing unnecessary.\n\n}\n\nfunction doCreateOrUpdateAttachedTx(el, dataIndex, elOption, seriesModel, isInit, attachedTxInfo) {\n  // group do not support textContent temporarily untill necessary.\n  if (el.isGroup) {\n    return;\n  } // Normal must be called before emphasis, for `isLegacy` detection.\n\n\n  processTxInfo(elOption, null, attachedTxInfo);\n  processTxInfo(elOption, EMPHASIS, attachedTxInfo); // If `elOption.textConfig` or `elOption.textContent` is null/undefined, it does not make sence.\n  // So for simplicity, if \"elOption hasOwnProperty of them but be null/undefined\", we do not\n  // trade them as set to null to el.\n  // Especially:\n  // `elOption.textContent: false` means remove textContent.\n  // `elOption.textContent.emphasis.style: false` means remove the style from emphasis state.\n\n  var txConOptNormal = attachedTxInfo.normal.conOpt;\n  var txConOptEmphasis = attachedTxInfo.emphasis.conOpt;\n  var txConOptBlur = attachedTxInfo.blur.conOpt;\n  var txConOptSelect = attachedTxInfo.select.conOpt;\n\n  if (txConOptNormal != null || txConOptEmphasis != null || txConOptSelect != null || txConOptBlur != null) {\n    var textContent = el.getTextContent();\n\n    if (txConOptNormal === false) {\n      textContent && el.removeTextContent();\n    } else {\n      txConOptNormal = attachedTxInfo.normal.conOpt = txConOptNormal || {\n        type: 'text'\n      };\n\n      if (!textContent) {\n        textContent = createEl(txConOptNormal);\n        el.setTextContent(textContent);\n      } else {\n        // If in some case the performance issue arised, consider\n        // do not clearState but update cached normal state directly.\n        textContent.clearStates();\n      }\n\n      var txConStlOptNormal = txConOptNormal && txConOptNormal.style;\n      updateElNormal(null, textContent, null, dataIndex, txConOptNormal, txConStlOptNormal, null, seriesModel, isInit, true);\n\n      for (var i = 0; i < STATES.length; i++) {\n        var stateName = STATES[i];\n\n        if (stateName !== NORMAL) {\n          var txConOptOtherState = attachedTxInfo[stateName].conOpt;\n          updateElOnState(stateName, textContent, txConOptOtherState, retrieveStyleOptionOnState(txConOptNormal, txConOptOtherState, stateName), null, false, true);\n        }\n      }\n\n      txConStlOptNormal ? textContent.dirty() : textContent.markRedraw();\n    }\n  }\n}\n\nfunction processTxInfo(elOption, state, attachedTxInfo) {\n  var stateOpt = !state ? elOption : retrieveStateOption(elOption, state);\n  var styleOpt = !state ? elOption.style : retrieveStyleOptionOnState(elOption, stateOpt, EMPHASIS);\n  var elType = elOption.type;\n  var txCfg = stateOpt ? stateOpt.textConfig : null;\n  var txConOptNormal = elOption.textContent;\n  var txConOpt = !txConOptNormal ? null : !state ? txConOptNormal : retrieveStateOption(txConOptNormal, state);\n\n  if (styleOpt && ( // Because emphasis style has little info to detect legacy,\n  // if normal is legacy, emphasis is trade as legacy.\n  attachedTxInfo.isLegacy || isEC4CompatibleStyle(styleOpt, elType, !!txCfg, !!txConOpt))) {\n    attachedTxInfo.isLegacy = true;\n    var convertResult = convertFromEC4CompatibleStyle(styleOpt, elType, !state); // Explicitly specified `textConfig` and `textContent` has higher priority than\n    // the ones generated by legacy style. Otherwise if users use them and `api.style`\n    // at the same time, they not both work and hardly to known why.\n\n    if (!txCfg && convertResult.textConfig) {\n      txCfg = convertResult.textConfig;\n    }\n\n    if (!txConOpt && convertResult.textContent) {\n      txConOpt = convertResult.textContent;\n    }\n  }\n\n  if (!state && txConOpt) {\n    var txConOptNormal_1 = txConOpt; // `textContent: {type: 'text'}`, the \"type\" is easy to be missing. So we tolerate it.\n\n    !txConOptNormal_1.type && (txConOptNormal_1.type = 'text');\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Do not tolerate incorret type for forward compat.\n      txConOptNormal_1.type !== 'text' && assert(txConOptNormal_1.type === 'text', 'textContent.type must be \"text\"');\n    }\n  }\n\n  var info = !state ? attachedTxInfo.normal : attachedTxInfo[state];\n  info.cfg = txCfg;\n  info.conOpt = txConOpt;\n}\n\nfunction retrieveStateOption(elOption, state) {\n  return !state ? elOption : elOption ? elOption[state] : null;\n}\n\nfunction retrieveStyleOptionOnState(stateOptionNormal, stateOption, state) {\n  var style = stateOption && stateOption.style;\n\n  if (style == null && state === EMPHASIS && stateOptionNormal) {\n    style = stateOptionNormal.styleEmphasis;\n  }\n\n  return style;\n} // Usage:\n// (1) By default, `elOption.$mergeChildren` is `'byIndex'`, which indicates that\n//     the existing children will not be removed, and enables the feature that\n//     update some of the props of some of the children simply by construct\n//     the returned children of `renderItem` like:\n//     `var children = group.children = []; children[3] = {opacity: 0.5};`\n// (2) If `elOption.$mergeChildren` is `'byName'`, add/update/remove children\n//     by child.name. But that might be lower performance.\n// (3) If `elOption.$mergeChildren` is `false`, the existing children will be\n//     replaced totally.\n// (4) If `!elOption.children`, following the \"merge\" principle, nothing will happen.\n//\n// For implementation simpleness, do not provide a direct way to remove sinlge\n// child (otherwise the total indicies of the children array have to be modified).\n// User can remove a single child by set its `ignore` as `true`.\n\n\nfunction mergeChildren(api, el, dataIndex, elOption, seriesModel, morphPreparation) {\n  var newChildren = elOption.children;\n  var newLen = newChildren ? newChildren.length : 0;\n  var mergeChildren = elOption.$mergeChildren; // `diffChildrenByName` has been deprecated.\n\n  var byName = mergeChildren === 'byName' || elOption.diffChildrenByName;\n  var notMerge = mergeChildren === false; // For better performance on roam update, only enter if necessary.\n\n  if (!newLen && !byName && !notMerge) {\n    return;\n  }\n\n  if (byName) {\n    diffGroupChildren({\n      api: api,\n      oldChildren: el.children() || [],\n      newChildren: newChildren || [],\n      dataIndex: dataIndex,\n      seriesModel: seriesModel,\n      group: el,\n      morphPreparation: morphPreparation\n    });\n    return;\n  }\n\n  notMerge && el.removeAll(); // Mapping children of a group simply by index, which\n  // might be better performance.\n\n  var index = 0;\n\n  for (; index < newLen; index++) {\n    newChildren[index] && doCreateOrUpdateEl(api, el.childAt(index), dataIndex, newChildren[index], seriesModel, el, false, morphPreparation);\n  }\n\n  for (var i = el.childCount() - 1; i >= index; i--) {\n    // Do not supprot leave elements that are not mentioned in the latest\n    // `renderItem` return. Otherwise users may not have a clear and simple\n    // concept that how to contorl all of the elements.\n    doRemoveEl(el.childAt(i), seriesModel, el);\n  }\n}\n\nfunction diffGroupChildren(context) {\n  new DataDiffer(context.oldChildren, context.newChildren, getKey, getKey, context).add(processAddUpdate).update(processAddUpdate).remove(processRemove).execute();\n}\n\nfunction getKey(item, idx) {\n  var name = item && item.name;\n  return name != null ? name : GROUP_DIFF_PREFIX + idx;\n}\n\nfunction processAddUpdate(newIndex, oldIndex) {\n  var context = this.context;\n  var childOption = newIndex != null ? context.newChildren[newIndex] : null;\n  var child = oldIndex != null ? context.oldChildren[oldIndex] : null;\n  doCreateOrUpdateEl(context.api, child, context.dataIndex, childOption, context.seriesModel, context.group, false, context.morphPreparation);\n}\n\nfunction processRemove(oldIndex) {\n  var context = this.context;\n  var child = context.oldChildren[oldIndex];\n  doRemoveEl(child, context.seriesModel, context.group);\n}\n\nfunction doRemoveEl(el, seriesModel, group) {\n  if (el) {\n    var leaveToProps = inner(el).leaveToProps;\n    leaveToProps ? graphicUtil.updateProps(el, leaveToProps, seriesModel, {\n      cb: function () {\n        group.remove(el);\n      }\n    }) : group.remove(el);\n  }\n}\n/**\n * @return SVG Path data.\n */\n\n\nfunction getPathData(shape) {\n  // \"d\" follows the SVG convention.\n  return shape && (shape.pathData || shape.d);\n}\n\nfunction hasOwnPathData(shape) {\n  return shape && (hasOwn(shape, 'pathData') || hasOwn(shape, 'd'));\n}\n\nfunction isPath(el) {\n  return el && el instanceof graphicUtil.Path;\n}\n\nfunction removeElementDirectly(el, group) {\n  el && group.remove(el);\n}\n/**\n * Any morph-potential el should added by `morphPreparation.addTo(el)`.\n * And they may apply morph or not when `morphPreparation.applyMorphing()`.\n * But at least, all of the \"to\" elements will apply all of the updates\n * as `doCreateOrUpdateItem` did.\n */\n\n\nvar MorphPreparation =\n/** @class */\nfunction () {\n  function MorphPreparation(seriesModel, transOpt) {\n    this._fromList = [];\n    this._toList = [];\n    this._toElOptionList = [];\n    this._allPropsFinalList = [];\n    this._toDataIndices = []; // Key: `toDataIndex`, not `toIdx`\n\n    this._morphConfigList = [];\n    this._seriesModel = seriesModel;\n    this._transOpt = transOpt;\n  }\n\n  MorphPreparation.prototype.hasFrom = function () {\n    return !!this._fromList.length;\n  }; // isOneToOneFrom(el: Element): boolean {\n  //     if (el && inner(el).canMorph) {\n  //         const fromList = this._fromList;\n  //         for (let i = 0; i < fromList.length; i++) {\n  //             if (fromList[i] === el) {\n  //                 return true;\n  //             }\n  //         }\n  //     }\n  // }\n\n\n  MorphPreparation.prototype.findAndAddFrom = function (el) {\n    if (!el) {\n      return;\n    }\n\n    if (inner(el).canMorph) {\n      this._fromList.push(el);\n    }\n\n    if (el.isGroup) {\n      var children = el.childrenRef();\n\n      for (var i = 0; i < children.length; i++) {\n        this.findAndAddFrom(children[i]);\n      }\n    }\n  };\n\n  MorphPreparation.prototype.addTo = function (path, elOption, dataIndex, allPropsFinal) {\n    if (path) {\n      this._toList.push(path);\n\n      this._toElOptionList.push(elOption);\n\n      this._toDataIndices.push(dataIndex);\n\n      this._allPropsFinalList.push(allPropsFinal);\n    }\n  };\n\n  MorphPreparation.prototype.applyMorphing = function () {\n    // [MORPHING_LOGIC_HINT]\n    // Pay attention to the order:\n    // (A) Apply `allPropsFinal` and `styleOption` to \"to\".\n    //     (Then \"to\" becomes to the final state.)\n    // (B) Apply `morphPath`/`combine`/`separate`.\n    //     (Based on the current state of \"from\" and the final state of \"to\".)\n    //     (Then we may get \"from.subList\" or \"to.subList\".)\n    // (C) Copy the related props from \"from\" to \"from.subList\", from \"to\" to \"to.subList\".\n    // (D) Collect `transitionFromProps` for \"to\" and \"to.subList\"\n    //     (Based on \"from\" or \"from.subList\".)\n    // (E) Apply `transitionFromProps` to \"to\" and \"to.subList\"\n    //     (It might change the prop values to the first frame value.)\n    // Case_I:\n    //     If (D) should be after (C), we use sequence: A - B - C - D - E\n    // Case_II:\n    //     If (A) should be after (D), we use sequence: D - A - B - C - E\n    // [MORPHING_LOGIC_HINT]\n    // zrender `morphPath`/`combine`/`separate` only manages the shape animation.\n    // Other props (like transfrom, style transition) will handled in echarts).\n    // [MORPHING_LOGIC_HINT]\n    // Make sure `applyPropsFinal` always be called for \"to\".\n    var type = this._type;\n    var fromList = this._fromList;\n    var toList = this._toList;\n    var toListLen = toList.length;\n    var fromListLen = fromList.length;\n\n    if (!fromListLen || !toListLen) {\n      return;\n    }\n\n    if (type === 'oneToOne') {\n      // In one-to-one case, we by default apply a simple rule:\n      // map \"from\" and \"to\" one by one.\n      // For this case: old_data_item_el and new_data_item_el\n      // has the same hierarchy of group tree but only some path type changed.\n      for (var toIdx = 0; toIdx < toListLen; toIdx++) {\n        this._oneToOneForSingleTo(toIdx, toIdx);\n      }\n    } else if (type === 'manyToOne') {\n      // A rough strategy: if there are more than one \"to\", we simply divide \"fromList\" equally.\n      var fromSingleSegLen = Math.max(1, Math.floor(fromListLen / toListLen));\n\n      for (var toIdx = 0, fromIdxStart = 0; toIdx < toListLen; toIdx++, fromIdxStart += fromSingleSegLen) {\n        var fromCount = toIdx + 1 >= toListLen ? fromListLen - fromIdxStart : fromSingleSegLen;\n\n        this._manyToOneForSingleTo(toIdx, fromIdxStart >= fromListLen ? null : fromIdxStart, fromCount);\n      }\n    } else if (type === 'oneToMany') {\n      // A rough strategy: if there are more than one \"from\", we simply divide \"toList\" equally.\n      var toSingleSegLen = Math.max(1, Math.floor(toListLen / fromListLen));\n\n      for (var toIdxStart = 0, fromIdx = 0; toIdxStart < toListLen; toIdxStart += toSingleSegLen, fromIdx++) {\n        var toCount = toIdxStart + toSingleSegLen >= toListLen ? toListLen - toIdxStart : toSingleSegLen;\n\n        this._oneToManyForSingleFrom(toIdxStart, toCount, fromIdx >= fromListLen ? null : fromIdx);\n      }\n    }\n  };\n\n  MorphPreparation.prototype._oneToOneForSingleTo = function ( // \"to\" must NOT be null/undefined.\n  toIdx, // May `fromIdx >= this._fromList.length`\n  fromIdx) {\n    var to = this._toList[toIdx];\n    var toElOption = this._toElOptionList[toIdx];\n    var toDataIndex = this._toDataIndices[toIdx];\n    var allPropsFinal = this._allPropsFinalList[toIdx];\n    var from = this._fromList[fromIdx];\n\n    var elAnimationConfig = this._getOrCreateMorphConfig(toDataIndex);\n\n    var morphDuration = elAnimationConfig.duration;\n\n    if (from && isCombiningPath(from)) {\n      applyPropsFinal(to, allPropsFinal, toElOption.style);\n\n      if (morphDuration) {\n        var combineResult = combine([from], to, elAnimationConfig, copyPropsWhenDivided);\n\n        this._processResultIndividuals(combineResult, toIdx, null);\n      } // The target el will not be displayed and transition from multiple path.\n      // transition on the target el does not make sense.\n\n    } else {\n      var morphFrom = morphDuration // from === to usually happen in scenarios where internal update like\n      // \"dataZoom\", \"legendToggle\" happen. If from is not in any morphing,\n      // we do not need to call `morphPath`.\n      && from && (from !== to || isInAnyMorphing(from)) ? from : null; // See [Case_II] above.\n      // In this case, there is probably `from === to`. And the `transitionFromProps` collecting\n      // does not depends on morphing. So we collect `transitionFromProps` first.\n\n      var transFromProps = {};\n      prepareShapeOrExtraTransitionFrom('shape', to, morphFrom, toElOption, transFromProps, false);\n      prepareShapeOrExtraTransitionFrom('extra', to, morphFrom, toElOption, transFromProps, false);\n      prepareTransformTransitionFrom(to, morphFrom, toElOption, transFromProps, false);\n      prepareStyleTransitionFrom(to, morphFrom, toElOption, toElOption.style, transFromProps, false);\n      applyPropsFinal(to, allPropsFinal, toElOption.style);\n\n      if (morphFrom) {\n        morphPath(morphFrom, to, elAnimationConfig);\n      }\n\n      applyTransitionFrom(to, toDataIndex, toElOption, this._seriesModel, transFromProps, false);\n    }\n  };\n\n  MorphPreparation.prototype._manyToOneForSingleTo = function ( // \"to\" must NOT be null/undefined.\n  toIdx, // May be null.\n  fromIdxStart, fromCount) {\n    var to = this._toList[toIdx];\n    var toElOption = this._toElOptionList[toIdx];\n    var allPropsFinal = this._allPropsFinalList[toIdx];\n    applyPropsFinal(to, allPropsFinal, toElOption.style);\n\n    var elAnimationConfig = this._getOrCreateMorphConfig(this._toDataIndices[toIdx]);\n\n    if (elAnimationConfig.duration && fromIdxStart != null) {\n      var combineFromList = [];\n\n      for (var fromIdx = fromIdxStart; fromIdx < fromCount; fromIdx++) {\n        combineFromList.push(this._fromList[fromIdx]);\n      }\n\n      var combineResult = combine(combineFromList, to, elAnimationConfig, copyPropsWhenDivided);\n\n      this._processResultIndividuals(combineResult, toIdx, null);\n    }\n  };\n\n  MorphPreparation.prototype._oneToManyForSingleFrom = function ( // \"to\" must NOT be null/undefined.\n  toIdxStart, toCount, // May be null\n  fromIdx) {\n    var from = fromIdx == null ? null : this._fromList[fromIdx];\n    var toList = this._toList;\n    var separateToList = [];\n\n    for (var toIdx = toIdxStart; toIdx < toCount; toIdx++) {\n      var to = toList[toIdx];\n      applyPropsFinal(to, this._allPropsFinalList[toIdx], this._toElOptionList[toIdx].style);\n      separateToList.push(to);\n    }\n\n    var elAnimationConfig = this._getOrCreateMorphConfig(this._toDataIndices[toIdxStart]);\n\n    if (elAnimationConfig.duration && from) {\n      var separateResult = separate(from, separateToList, elAnimationConfig, copyPropsWhenDivided);\n\n      this._processResultIndividuals(separateResult, toIdxStart, toCount);\n    }\n  };\n\n  MorphPreparation.prototype._processResultIndividuals = function (combineSeparateResult, toIdxStart, toCount) {\n    var isSeparate = toCount != null;\n\n    for (var i = 0; i < combineSeparateResult.count; i++) {\n      var fromIndividual = combineSeparateResult.fromIndividuals[i];\n      var toIndividual = combineSeparateResult.toIndividuals[i]; // Here it's a trick:\n      // For \"combine\" case, all of the `toIndividuals` map to the same `toIdx`.\n      // For \"separate\" case, the `toIndividuals` map to some certain segment of `_toList` accurately.\n\n      var toIdx = toIdxStart + (isSeparate ? i : 0);\n      var toElOption = this._toElOptionList[toIdx];\n      var dataIndex = this._toDataIndices[toIdx];\n      var transFromProps = {};\n      prepareTransformTransitionFrom(toIndividual, fromIndividual, toElOption, transFromProps, false);\n      prepareStyleTransitionFrom(toIndividual, fromIndividual, toElOption, toElOption.style, transFromProps, false);\n      applyTransitionFrom(toIndividual, dataIndex, toElOption, this._seriesModel, transFromProps, false);\n    }\n  };\n\n  MorphPreparation.prototype._getOrCreateMorphConfig = function (dataIndex) {\n    var morphConfigList = this._morphConfigList;\n    var config = morphConfigList[dataIndex];\n\n    if (config) {\n      return config;\n    }\n\n    var duration;\n    var easing;\n    var delay;\n    var seriesModel = this._seriesModel;\n    var transOpt = this._transOpt;\n\n    if (seriesModel.isAnimationEnabled()) {\n      // PENDING: refactor? this is the same logic as `src/util/graphic.ts#animateOrSetProps`.\n      var animationPayload = void 0;\n\n      if (seriesModel && seriesModel.ecModel) {\n        var updatePayload = seriesModel.ecModel.getUpdatePayload();\n        animationPayload = updatePayload && updatePayload.animation;\n      }\n\n      if (animationPayload) {\n        duration = animationPayload.duration || 0;\n        easing = animationPayload.easing || 'cubicOut';\n        delay = animationPayload.delay || 0;\n      } else {\n        easing = seriesModel.get('animationEasingUpdate');\n        var delayOption = seriesModel.get('animationDelayUpdate');\n        delay = isFunction(delayOption) ? delayOption(dataIndex) : delayOption;\n        var durationOption = seriesModel.get('animationDurationUpdate');\n        duration = isFunction(durationOption) ? durationOption(dataIndex) : durationOption;\n      }\n    }\n\n    config = {\n      duration: duration || 0,\n      delay: delay,\n      easing: easing,\n      dividingMethod: transOpt ? transOpt.dividingMethod : null\n    };\n    morphConfigList[dataIndex] = config;\n    return config;\n  };\n\n  MorphPreparation.prototype.reset = function (type) {\n    // `this._morphConfigList` can be kept. It only related to `dataIndex`.\n    this._type = type;\n    this._fromList.length = this._toList.length = this._toElOptionList.length = this._allPropsFinalList.length = this._toDataIndices.length = 0;\n  };\n\n  return MorphPreparation;\n}();\n\nfunction copyPropsWhenDivided(srcPath, tarPath, willClone) {\n  // Do not copy transform props.\n  // Sub paths are transfrom based on their host path.\n  // tarPath.x = srcPath.x;\n  // tarPath.y = srcPath.y;\n  // tarPath.scaleX = srcPath.scaleX;\n  // tarPath.scaleY = srcPath.scaleY;\n  // tarPath.originX = srcPath.originX;\n  // tarPath.originY = srcPath.originY;\n  // If just carry the style, will not be modifed, so do not copy.\n  tarPath.style = willClone ? clone(srcPath.style) : srcPath.style;\n  tarPath.zlevel = srcPath.zlevel;\n  tarPath.z = srcPath.z;\n  tarPath.z2 = srcPath.z2;\n}\n\nexport function install(registers) {\n  registers.registerChartView(CustomSeriesView);\n  registers.registerSeriesModel(CustomSeriesModel);\n}","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/echarts/lib/chart/custom/install.js"],"names":["__extends","hasOwn","assert","isString","retrieve2","retrieve3","defaults","each","keys","isArrayLike","bind","isFunction","eqNaN","indexOf","clone","graphicUtil","setDefaultStateProxy","enableHoverEmphasis","labelStyleHelper","getDefaultLabel","createListFromArray","getLayoutOnAxis","DataDiffer","SeriesModel","ChartView","createClipPath","prepareCartesian2d","prepareGeo","prepareSingleAxis","preparePolar","prepareCalendar","makeInner","normalizeToArray","convertToEC4StyleForCustomSerise","isEC4CompatibleStyle","convertFromEC4CompatibleStyle","warnDeprecated","Transformable","cloneValue","warn","throwError","combine","isInAnyMorphing","morphPath","isCombiningPath","separate","matrix","createOrUpdatePatternFromDecal","inner","TRANSFORM_PROPS","x","y","scaleX","scaleY","originX","originY","rotation","transformPropNamesStr","join","STYLE_VISUAL_TYPE","color","borderColor","NON_STYLE_VISUAL_PROPS","symbol","symbolSize","symbolKeepAspect","legendSymbol","visualMeta","liftZ","decal","EMPHASIS","NORMAL","BLUR","SELECT","STATES","PATH_ITEM_STYLE","normal","emphasis","blur","select","PATH_LABEL","GROUP_DIFF_PREFIX","attachedTxInfoTmp","LEGACY_TRANSFORM_PROPS","position","scale","origin","tmpTransformable","prepareCustoms","cartesian2d","geo","singleAxis","polar","calendar","CustomSeriesModel","_super","_this","apply","arguments","type","prototype","optionUpdated","currentZLevel","get","currentZ","getInitialData","option","ecModel","getSource","getDataParams","dataIndex","dataType","el","params","call","info","dependencies","defaultOption","coordinateSystem","zlevel","z","legendHoverLink","clip","CustomSeriesView","render","customSeries","api","payload","oldData","_data","data","getData","group","renderItem","makeRenderItem","transOpt","__transientTransitionOpt","from","to","oldIdx","doRemoveEl","getItemGraphicEl","newIdx","createOrUpdateItem","morphPreparation_1","MorphPreparation","diffMode","getIndices","createGetKey","add","remove","update","reset","oldEl","findAndAddFrom","hasFrom","removeElementDirectly","applyMorphing","updateManyToOne","oldIndices","i","length","updateOneToMany","newIndices","newLen","execute","clipPath","setClipPath","removeClipPath","incrementalPrepareRender","removeAll","incrementalRender","setIncrementalAndHoverLayer","isGroup","incremental","ensureState","hoverLayer","idx","start","end","traverse","filterForExposedEvent","eventType","query","targetEl","packedEvent","elementName","element","name","__hostTarget","parent","dimension","rawIdx","getId","diffByDimName","getDimension","dimInfo","getDimensionInfo","errMsg","process","env","NODE_ENV","ordinalMeta","key","categories","createEl","elOption","graphicType","shape","pathRect","width","height","pathData","getPathData","makePath","layout","customPathData","Image","customImagePath","style","image","Text","Group","Error","Clz","getShapeClass","customGraphicType","z2EmphasisLift","z2SelectLift","updateElNormal","isMorphTo","styleOpt","attachedTxInfo","seriesModel","isInit","isTextContent","transFromProps","allPropsFinal","elDisplayable","prepareShapeOrExtraTransitionFrom","prepareShapeOrExtraAllPropsFinal","prepareTransformTransitionFrom","prepareTransformAllPropsFinal","txCfgOpt","cfg","setTextConfig","textOptionStyle","fill","textFill","stroke","textStroke","decalPattern","decalObj","isPath","dirty","__decalPattern","prepareStyleTransitionFrom","invisible","applyPropsFinal","applyTransitionFrom","silent","ignore","markRedraw","originalDecalObj","useStyle","animators","animator","targetName","changeTarget","attr","userDuring","during","cfgDuringCall","duringCall","isFrom","initProps","updateProps","mainAttr","morphFromEl","attrOpt","elPropsInAttr","transFromPropsInAttr","enterFrom","enterFromKeys","transition","transitionKeys","elVal","checkNonStyleTansitionRefer","elPropsInAttrKeys","isNonStyleTransitionEnabled","leaveTo","leaveToProps","getOrCreateLeaveToPropsFromEl","leaveToPropsInAttr","leaveToKeys","allProps","allPropsInAttr","keysInAttr","checkTransformPropRefer","fromTransformable","calcOldElLocalTransformBasedOnNewElParent","setTransformPropToTransitionFrom","setLagecyTransformProp","setTransformProp","fromEl","fromElStyle","transFromStyleProps","getAnimationStyleProps","animationProps","animationStyleProps","styleKeys","leaveToStyleProps","newEl","tmpM","transform","identity","oldGlobalTransform","getComputedTransform","copy","newParent","decomposeTransform","propName","optVal","isFinite","usedIn","innerEl","tmpDuringScope","customDuringAPI","setTransform","val","getTransform","setShape","assertNotReserved","isShapeDirty","getShape","setStyle","isStyleDirty","getStyle","setExtra","extra","getExtra","scope","newstUserDuring","scopeUserDuring","dirtyShape","dirtyStyle","updateElOnState","state","elStateOpt","isRoot","stateObj","existingEmphasisState","getState","textConfig","updateZ","optZ2","z2","updateZForEachState","isNormal","retrieveStateOption","targetProps","legacyName","legacyArr","xyName","transitionFrom","coordSys","prepareResult","userAPI","getWidth","getHeight","getZr","getDevicePixelRatio","value","ordinalRawValue","styleEmphasis","visual","barLayout","currentSeriesIndices","font","userParams","context","seriesId","id","seriesName","seriesIndex","dataInsideLength","count","encode","wrapEncodeDef","currDataIndexInside","currItemModel","currItemStyleModels","currLabelModels","seriesItemStyleModels","seriesLabelModels","stateName","getModel","getItemModel","dataIndexInside","getItemStyleModel","hasItemOption","getLabelModel","getRawIndex","actionType","dim","userProps","getItemVisual","visualColor","opacity","itemStyle","getItemStyle","opt","inheritColor","labelModel","textStyle","createTextStyle","text","getShallow","getFormattedLabel","createTextConfig","preFetchFromExtra","applyUserPropsAfter","legacy","textPosition","visualType","style_1","baseAxis","getBaseAxis","axis","getCurrentSeriesIndices","getFont","encodeDef","dimensions","dimName","dataDimIndex","isExtraCoord","coordDim","dataDims","coordDimIndex","morphPreparation","doCreateOrUpdateEl","setItemGraphicEl","focus","blurScope","toBeReplacedIdx","doesElNeedRecreate","childrenRef","elIsNewCreated","clearStates","canMorph","morph","thisElIsMorphTo","conOpt","isLegacy","doCreateOrUpdateAttachedTx","doCreateOrUpdateClipPath","pendingAllPropsFinal","addTo","otherStateOpt","otherStyleOpt","retrieveStyleOptionOnState","mergeChildren","replaceAt","elInner","elOptionType","elOptionShape","elOptionStyle","hasOwnPathData","clipPathOpt","getClipPath","Path","processTxInfo","txConOptNormal","txConOptEmphasis","txConOptBlur","txConOptSelect","textContent","getTextContent","removeTextContent","setTextContent","txConStlOptNormal","txConOptOtherState","stateOpt","elType","txCfg","txConOpt","convertResult","txConOptNormal_1","stateOptionNormal","stateOption","newChildren","children","$mergeChildren","byName","diffChildrenByName","notMerge","diffGroupChildren","oldChildren","index","childAt","childCount","getKey","processAddUpdate","processRemove","item","newIndex","oldIndex","childOption","child","cb","d","_fromList","_toList","_toElOptionList","_allPropsFinalList","_toDataIndices","_morphConfigList","_seriesModel","_transOpt","push","path","_type","fromList","toList","toListLen","fromListLen","toIdx","_oneToOneForSingleTo","fromSingleSegLen","Math","max","floor","fromIdxStart","fromCount","_manyToOneForSingleTo","toSingleSegLen","toIdxStart","fromIdx","toCount","_oneToManyForSingleFrom","toElOption","toDataIndex","elAnimationConfig","_getOrCreateMorphConfig","morphDuration","duration","combineResult","copyPropsWhenDivided","_processResultIndividuals","morphFrom","combineFromList","separateToList","separateResult","combineSeparateResult","isSeparate","fromIndividual","fromIndividuals","toIndividual","toIndividuals","morphConfigList","config","easing","delay","isAnimationEnabled","animationPayload","updatePayload","getUpdatePayload","animation","delayOption","durationOption","dividingMethod","srcPath","tarPath","willClone","install","registers","registerChartView","registerSeriesModel"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport { hasOwn, assert, isString, retrieve2, retrieve3, defaults, each, keys, isArrayLike, bind, isFunction, eqNaN, indexOf, clone } from 'zrender/lib/core/util';\nimport * as graphicUtil from '../../util/graphic';\nimport { setDefaultStateProxy, enableHoverEmphasis } from '../../util/states';\nimport * as labelStyleHelper from '../../label/labelStyle';\nimport { getDefaultLabel } from '../helper/labelHelper';\nimport createListFromArray from '../helper/createListFromArray';\nimport { getLayoutOnAxis } from '../../layout/barGrid';\nimport DataDiffer from '../../data/DataDiffer';\nimport SeriesModel from '../../model/Series';\nimport ChartView from '../../view/Chart';\nimport { createClipPath } from '../helper/createClipPathFromCoordSys';\nimport prepareCartesian2d from '../../coord/cartesian/prepareCustom';\nimport prepareGeo from '../../coord/geo/prepareCustom';\nimport prepareSingleAxis from '../../coord/single/prepareCustom';\nimport preparePolar from '../../coord/polar/prepareCustom';\nimport prepareCalendar from '../../coord/calendar/prepareCustom';\nimport { makeInner, normalizeToArray } from '../../util/model';\nimport { convertToEC4StyleForCustomSerise, isEC4CompatibleStyle, convertFromEC4CompatibleStyle, warnDeprecated } from '../../util/styleCompat';\nimport Transformable from 'zrender/lib/core/Transformable';\nimport { cloneValue } from 'zrender/lib/animation/Animator';\nimport { warn, throwError } from '../../util/log';\nimport { combine, isInAnyMorphing, morphPath, isCombiningPath, separate } from 'zrender/lib/tool/morphPath';\nimport * as matrix from 'zrender/lib/core/matrix';\nimport { createOrUpdatePatternFromDecal } from '../../util/decal';\nvar inner = makeInner();\nvar TRANSFORM_PROPS = {\n  x: 1,\n  y: 1,\n  scaleX: 1,\n  scaleY: 1,\n  originX: 1,\n  originY: 1,\n  rotation: 1\n};\nvar transformPropNamesStr = keys(TRANSFORM_PROPS).join(', ');\n; // Also compat with ec4, where\n// `visual('color') visual('borderColor')` is supported.\n\nvar STYLE_VISUAL_TYPE = {\n  color: 'fill',\n  borderColor: 'stroke'\n};\nvar NON_STYLE_VISUAL_PROPS = {\n  symbol: 1,\n  symbolSize: 1,\n  symbolKeepAspect: 1,\n  legendSymbol: 1,\n  visualMeta: 1,\n  liftZ: 1,\n  decal: 1\n};\nvar EMPHASIS = 'emphasis';\nvar NORMAL = 'normal';\nvar BLUR = 'blur';\nvar SELECT = 'select';\nvar STATES = [NORMAL, EMPHASIS, BLUR, SELECT];\nvar PATH_ITEM_STYLE = {\n  normal: ['itemStyle'],\n  emphasis: [EMPHASIS, 'itemStyle'],\n  blur: [BLUR, 'itemStyle'],\n  select: [SELECT, 'itemStyle']\n};\nvar PATH_LABEL = {\n  normal: ['label'],\n  emphasis: [EMPHASIS, 'label'],\n  blur: [BLUR, 'label'],\n  select: [SELECT, 'label']\n}; // Use prefix to avoid index to be the same as el.name,\n// which will cause weird update animation.\n\nvar GROUP_DIFF_PREFIX = 'e\\0\\0';\nvar attachedTxInfoTmp = {\n  normal: {},\n  emphasis: {},\n  blur: {},\n  select: {}\n};\nvar LEGACY_TRANSFORM_PROPS = {\n  position: ['x', 'y'],\n  scale: ['scaleX', 'scaleY'],\n  origin: ['originX', 'originY']\n};\nvar tmpTransformable = new Transformable();\n/**\n * To reduce total package size of each coordinate systems, the modules `prepareCustom`\n * of each coordinate systems are not required by each coordinate systems directly, but\n * required by the module `custom`.\n *\n * prepareInfoForCustomSeries {Function}: optional\n *     @return {Object} {coordSys: {...}, api: {\n *         coord: function (data, clamp) {}, // return point in global.\n *         size: function (dataSize, dataItem) {} // return size of each axis in coordSys.\n *     }}\n */\n\nvar prepareCustoms = {\n  cartesian2d: prepareCartesian2d,\n  geo: prepareGeo,\n  singleAxis: prepareSingleAxis,\n  polar: preparePolar,\n  calendar: prepareCalendar\n};\n\nvar CustomSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(CustomSeriesModel, _super);\n\n  function CustomSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CustomSeriesModel.type;\n    return _this;\n  }\n\n  CustomSeriesModel.prototype.optionUpdated = function () {\n    this.currentZLevel = this.get('zlevel', true);\n    this.currentZ = this.get('z', true);\n  };\n\n  CustomSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return createListFromArray(this.getSource(), this);\n  };\n\n  CustomSeriesModel.prototype.getDataParams = function (dataIndex, dataType, el) {\n    var params = _super.prototype.getDataParams.call(this, dataIndex, dataType);\n\n    el && (params.info = inner(el).info);\n    return params;\n  };\n\n  CustomSeriesModel.type = 'series.custom';\n  CustomSeriesModel.dependencies = ['grid', 'polar', 'geo', 'singleAxis', 'calendar'];\n  CustomSeriesModel.defaultOption = {\n    coordinateSystem: 'cartesian2d',\n    zlevel: 0,\n    z: 2,\n    legendHoverLink: true,\n    // Custom series will not clip by default.\n    // Some case will use custom series to draw label\n    // For example https://echarts.apache.org/examples/en/editor.html?c=custom-gantt-flight\n    clip: false // Cartesian coordinate system\n    // xAxisIndex: 0,\n    // yAxisIndex: 0,\n    // Polar coordinate system\n    // polarIndex: 0,\n    // Geo coordinate system\n    // geoIndex: 0,\n\n  };\n  return CustomSeriesModel;\n}(SeriesModel);\n\nvar CustomSeriesView =\n/** @class */\nfunction (_super) {\n  __extends(CustomSeriesView, _super);\n\n  function CustomSeriesView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CustomSeriesView.type;\n    return _this;\n  }\n\n  CustomSeriesView.prototype.render = function (customSeries, ecModel, api, payload) {\n    var oldData = this._data;\n    var data = customSeries.getData();\n    var group = this.group;\n    var renderItem = makeRenderItem(customSeries, data, ecModel, api); // By default, merge mode is applied. In most cases, custom series is\n    // used in the scenario that data amount is not large but graphic elements\n    // is complicated, where merge mode is probably necessary for optimization.\n    // For example, reuse graphic elements and only update the transform when\n    // roam or data zoom according to `actionType`.\n\n    var transOpt = customSeries.__transientTransitionOpt; // Enable user to disable transition animation by both set\n    // `from` and `to` dimension as `null`/`undefined`.\n\n    if (transOpt && (transOpt.from == null || transOpt.to == null)) {\n      oldData && oldData.each(function (oldIdx) {\n        doRemoveEl(oldData.getItemGraphicEl(oldIdx), customSeries, group);\n      });\n      data.each(function (newIdx) {\n        createOrUpdateItem(api, null, newIdx, renderItem(newIdx, payload), customSeries, group, data, null);\n      });\n    } else {\n      var morphPreparation_1 = new MorphPreparation(customSeries, transOpt);\n      var diffMode = transOpt ? 'multiple' : 'oneToOne';\n      new DataDiffer(oldData ? oldData.getIndices() : [], data.getIndices(), createGetKey(oldData, diffMode, transOpt && transOpt.from), createGetKey(data, diffMode, transOpt && transOpt.to), null, diffMode).add(function (newIdx) {\n        createOrUpdateItem(api, null, newIdx, renderItem(newIdx, payload), customSeries, group, data, null);\n      }).remove(function (oldIdx) {\n        doRemoveEl(oldData.getItemGraphicEl(oldIdx), customSeries, group);\n      }).update(function (newIdx, oldIdx) {\n        morphPreparation_1.reset('oneToOne');\n        var oldEl = oldData.getItemGraphicEl(oldIdx);\n        morphPreparation_1.findAndAddFrom(oldEl); // PENDING:\n        // if may morph, currently we alway recreate the whole el.\n        // because if reuse some of the el in the group tree, the old el has to\n        // be removed from the group, and consequently we can not calculate\n        // the \"global transition\" of the old element.\n        // But is there performance issue?\n\n        if (morphPreparation_1.hasFrom()) {\n          removeElementDirectly(oldEl, group);\n          oldEl = null;\n        }\n\n        createOrUpdateItem(api, oldEl, newIdx, renderItem(newIdx, payload), customSeries, group, data, morphPreparation_1);\n        morphPreparation_1.applyMorphing();\n      }).updateManyToOne(function (newIdx, oldIndices) {\n        morphPreparation_1.reset('manyToOne');\n\n        for (var i = 0; i < oldIndices.length; i++) {\n          var oldEl = oldData.getItemGraphicEl(oldIndices[i]);\n          morphPreparation_1.findAndAddFrom(oldEl);\n          removeElementDirectly(oldEl, group);\n        }\n\n        createOrUpdateItem(api, null, newIdx, renderItem(newIdx, payload), customSeries, group, data, morphPreparation_1);\n        morphPreparation_1.applyMorphing();\n      }).updateOneToMany(function (newIndices, oldIdx) {\n        morphPreparation_1.reset('oneToMany');\n        var newLen = newIndices.length;\n        var oldEl = oldData.getItemGraphicEl(oldIdx);\n        morphPreparation_1.findAndAddFrom(oldEl);\n        removeElementDirectly(oldEl, group);\n\n        for (var i = 0; i < newLen; i++) {\n          createOrUpdateItem(api, null, newIndices[i], renderItem(newIndices[i], payload), customSeries, group, data, morphPreparation_1);\n        }\n\n        morphPreparation_1.applyMorphing();\n      }).execute();\n    } // Do clipping\n\n\n    var clipPath = customSeries.get('clip', true) ? createClipPath(customSeries.coordinateSystem, false, customSeries) : null;\n\n    if (clipPath) {\n      group.setClipPath(clipPath);\n    } else {\n      group.removeClipPath();\n    }\n\n    this._data = data;\n  };\n\n  CustomSeriesView.prototype.incrementalPrepareRender = function (customSeries, ecModel, api) {\n    this.group.removeAll();\n    this._data = null;\n  };\n\n  CustomSeriesView.prototype.incrementalRender = function (params, customSeries, ecModel, api, payload) {\n    var data = customSeries.getData();\n    var renderItem = makeRenderItem(customSeries, data, ecModel, api);\n\n    function setIncrementalAndHoverLayer(el) {\n      if (!el.isGroup) {\n        el.incremental = true;\n        el.ensureState('emphasis').hoverLayer = true;\n      }\n    }\n\n    for (var idx = params.start; idx < params.end; idx++) {\n      var el = createOrUpdateItem(null, null, idx, renderItem(idx, payload), customSeries, this.group, data, null);\n      el.traverse(setIncrementalAndHoverLayer);\n    }\n  };\n\n  CustomSeriesView.prototype.filterForExposedEvent = function (eventType, query, targetEl, packedEvent) {\n    var elementName = query.element;\n\n    if (elementName == null || targetEl.name === elementName) {\n      return true;\n    } // Enable to give a name on a group made by `renderItem`, and listen\n    // events that triggerd by its descendents.\n\n\n    while ((targetEl = targetEl.__hostTarget || targetEl.parent) && targetEl !== this.group) {\n      if (targetEl.name === elementName) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  CustomSeriesView.type = 'custom';\n  return CustomSeriesView;\n}(ChartView);\n\nfunction createGetKey(data, diffMode, dimension) {\n  if (!data) {\n    return;\n  }\n\n  if (diffMode === 'oneToOne') {\n    return function (rawIdx, dataIndex) {\n      return data.getId(dataIndex);\n    };\n  }\n\n  var diffByDimName = data.getDimension(dimension);\n  var dimInfo = data.getDimensionInfo(diffByDimName);\n\n  if (!dimInfo) {\n    var errMsg = '';\n\n    if (process.env.NODE_ENV !== 'production') {\n      errMsg = dimension + \" is not a valid dimension.\";\n    }\n\n    throwError(errMsg);\n  }\n\n  var ordinalMeta = dimInfo.ordinalMeta;\n  return function (rawIdx, dataIndex) {\n    var key = data.get(diffByDimName, dataIndex);\n\n    if (ordinalMeta) {\n      key = ordinalMeta.categories[key];\n    }\n\n    return key == null || eqNaN(key) ? rawIdx + '' : '_ec_' + key;\n  };\n}\n\nfunction createEl(elOption) {\n  var graphicType = elOption.type;\n  var el; // Those graphic elements are not shapes. They should not be\n  // overwritten by users, so do them first.\n\n  if (graphicType === 'path') {\n    var shape = elOption.shape; // Using pathRect brings convenience to users sacle svg path.\n\n    var pathRect = shape.width != null && shape.height != null ? {\n      x: shape.x || 0,\n      y: shape.y || 0,\n      width: shape.width,\n      height: shape.height\n    } : null;\n    var pathData = getPathData(shape); // Path is also used for icon, so layout 'center' by default.\n\n    el = graphicUtil.makePath(pathData, null, pathRect, shape.layout || 'center');\n    inner(el).customPathData = pathData;\n  } else if (graphicType === 'image') {\n    el = new graphicUtil.Image({});\n    inner(el).customImagePath = elOption.style.image;\n  } else if (graphicType === 'text') {\n    el = new graphicUtil.Text({}); // inner(el).customText = (elOption.style as TextStyleProps).text;\n  } else if (graphicType === 'group') {\n    el = new graphicUtil.Group();\n  } else if (graphicType === 'compoundPath') {\n    throw new Error('\"compoundPath\" is not supported yet.');\n  } else {\n    var Clz = graphicUtil.getShapeClass(graphicType);\n\n    if (!Clz) {\n      var errMsg = '';\n\n      if (process.env.NODE_ENV !== 'production') {\n        errMsg = 'graphic type \"' + graphicType + '\" can not be found.';\n      }\n\n      throwError(errMsg);\n    }\n\n    el = new Clz();\n  }\n\n  inner(el).customGraphicType = graphicType;\n  el.name = elOption.name; // Compat ec4: the default z2 lift is 1. If changing the number,\n  // some cases probably be broken: hierarchy layout along z, like circle packing,\n  // where emphasis only intending to modify color/border rather than lift z2.\n\n  el.z2EmphasisLift = 1;\n  el.z2SelectLift = 1;\n  return el;\n}\n/**\n * ----------------------------------------------------------\n * [STRATEGY_MERGE] Merge properties or erase all properties:\n *\n * Based on the fact that the existing zr element probably be reused, we now consider whether\n * merge or erase all properties to the exsiting elements.\n * That is, if a certain props is not specified in the lastest return of `renderItem`:\n * + \"Merge\" means that do not modify the value on the existing element.\n * + \"Erase all\" means that use a default value to the existing element.\n *\n * \"Merge\" might bring some unexpected state retaining for users and \"erase all\" seams to be\n * more safe. \"erase all\" force users to specify all of the props each time, which is recommanded\n * in most cases.\n * But \"erase all\" theoretically disables the chance of performance optimization (e.g., just\n * generete shape and style at the first time rather than always do that).\n * So we still use \"merge\" rather than \"erase all\". If users need \"erase all\", they can\n * simple always set all of the props each time.\n * Some \"object-like\" config like `textConfig`, `textContent`, `style` which are not needed for\n * every elment, so we replace them only when user specify them. And the that is a total replace.\n *\n * TODO: there is no hint of 'isFirst' to users. So the performance enhancement can not be\n * performed yet. Consider the case:\n * (1) setOption to \"mergeChildren\" with a smaller children count\n * (2) Use dataZoom to make an item disappear.\n * (3) User dataZoom to make the item display again. At that time, renderItem need to return the\n * full option rather than partial option to recreate the element.\n *\n * ----------------------------------------------\n * [STRATEGY_NULL] `hasOwnProperty` or `== null`:\n *\n * Ditinguishing \"own property\" probably bring little trouble to user when make el options.\n * So we  trade a {xx: null} or {xx: undefined} as \"not specified\" if possible rather than\n * \"set them to null/undefined\". In most cases, props can not be cleared. Some typicall\n * clearable props like `style`/`textConfig`/`textContent` we enable `false` to means\n * \"clear\". In some othere special cases that the prop is able to set as null/undefined,\n * but not suitable to use `false`, `hasOwnProperty` is checked.\n *\n * ---------------------------------------------\n * [STRATEGY_TRANSITION] The rule of transition:\n * + For props on the root level of a element:\n *      If there is no `transition` specified, tansform props will be transitioned by default,\n *      which is the same as the previous setting in echarts4 and suitable for the scenario\n *      of dataZoom change.\n *      If `transition` specified, only the specified props will be transitioned.\n * + For props in `shape` and `style`:\n *      Only props specified in `transition` will be transitioned.\n * + Break:\n *      Since ec5, do not make transition to shape by default, because it might result in\n *      performance issue (especially `points` of polygon) and do not necessary in most cases.\n *\n * @return if `isMorphTo`, return `allPropsFinal`.\n */\n\n\nfunction updateElNormal( // Can be null/undefined\napi, el, // Whether be a morph target.\nisMorphTo, dataIndex, elOption, styleOpt, attachedTxInfo, seriesModel, isInit, isTextContent) {\n  var transFromProps = {};\n  var allPropsFinal = {};\n  var elDisplayable = el.isGroup ? null : el; // If be \"morph to\", delay the `updateElNormal` when all of the els in\n  // this data item processed. Because at that time we can get all of the\n  // \"morph from\" and make correct separate/combine.\n\n  !isMorphTo && prepareShapeOrExtraTransitionFrom('shape', el, null, elOption, transFromProps, isInit);\n  prepareShapeOrExtraAllPropsFinal('shape', elOption, allPropsFinal);\n  !isMorphTo && prepareShapeOrExtraTransitionFrom('extra', el, null, elOption, transFromProps, isInit);\n  prepareShapeOrExtraAllPropsFinal('extra', elOption, allPropsFinal);\n  !isMorphTo && prepareTransformTransitionFrom(el, null, elOption, transFromProps, isInit);\n  prepareTransformAllPropsFinal(elOption, allPropsFinal);\n  var txCfgOpt = attachedTxInfo && attachedTxInfo.normal.cfg;\n\n  if (txCfgOpt) {\n    // PENDING: whether use user object directly rather than clone?\n    // TODO:5.0 textConfig transition animation?\n    el.setTextConfig(txCfgOpt);\n  }\n\n  if (el.type === 'text' && styleOpt) {\n    var textOptionStyle = styleOpt; // Compatible with ec4: if `textFill` or `textStroke` exists use them.\n\n    hasOwn(textOptionStyle, 'textFill') && (textOptionStyle.fill = textOptionStyle.textFill);\n    hasOwn(textOptionStyle, 'textStroke') && (textOptionStyle.stroke = textOptionStyle.textStroke);\n  }\n\n  if (styleOpt) {\n    var decalPattern = void 0;\n    var decalObj = isPath(el) ? styleOpt.decal : null;\n\n    if (api && decalObj) {\n      decalObj.dirty = true;\n      decalPattern = createOrUpdatePatternFromDecal(decalObj, api);\n    } // Always overwrite in case user specify this prop.\n\n\n    styleOpt.__decalPattern = decalPattern;\n  }\n\n  !isMorphTo && prepareStyleTransitionFrom(el, null, elOption, styleOpt, transFromProps, isInit);\n\n  if (elDisplayable) {\n    hasOwn(elOption, 'invisible') && (elDisplayable.invisible = elOption.invisible);\n  } // If `isMorphTo`, we should not update these props to el directly, otherwise,\n  // when applying morph finally, the original prop are missing for making \"animation from\".\n\n\n  if (!isMorphTo) {\n    applyPropsFinal(el, allPropsFinal, styleOpt);\n    applyTransitionFrom(el, dataIndex, elOption, seriesModel, transFromProps, isInit);\n  } // Merge by default.\n\n\n  hasOwn(elOption, 'silent') && (el.silent = elOption.silent);\n  hasOwn(elOption, 'ignore') && (el.ignore = elOption.ignore);\n\n  if (!isTextContent) {\n    // `elOption.info` enables user to mount some info on\n    // elements and use them in event handlers.\n    // Update them only when user specified, otherwise, remain.\n    hasOwn(elOption, 'info') && (inner(el).info = elOption.info);\n  }\n\n  styleOpt ? el.dirty() : el.markRedraw();\n  return isMorphTo ? allPropsFinal : null;\n}\n\nfunction applyPropsFinal(el, // Can be null/undefined\nallPropsFinal, styleOpt) {\n  var elDisplayable = el.isGroup ? null : el;\n\n  if (elDisplayable && styleOpt) {\n    var decalPattern = styleOpt.__decalPattern;\n    var originalDecalObj = void 0;\n\n    if (decalPattern) {\n      originalDecalObj = styleOpt.decal;\n      styleOpt.decal = decalPattern;\n    } // PENDING: here the input style object is used directly.\n    // Good for performance but bad for compatibility control.\n\n\n    elDisplayable.useStyle(styleOpt);\n\n    if (decalPattern) {\n      styleOpt.decal = originalDecalObj;\n    } // When style object changed, how to trade the existing animation?\n    // It is probably conplicated and not needed to cover all the cases.\n    // But still need consider the case:\n    // (1) When using init animation on `style.opacity`, and before the animation\n    //     ended users triggers an update by mousewhell. At that time the init\n    //     animation should better be continued rather than terminated.\n    //     So after `useStyle` called, we should change the animation target manually\n    //     to continue the effect of the init animation.\n    // (2) PENDING: If the previous animation targeted at a `val1`, and currently we need\n    //     to update the value to `val2` and no animation declared, should be terminate\n    //     the previous animation or just modify the target of the animation?\n    //     Therotically That will happen not only on `style` but also on `shape` and\n    //     `transfrom` props. But we haven't handle this case at present yet.\n    // (3) PENDING: Is it proper to visit `animators` and `targetName`?\n\n\n    var animators = elDisplayable.animators;\n\n    for (var i = 0; i < animators.length; i++) {\n      var animator = animators[i]; // targetName is the \"topKey\".\n\n      if (animator.targetName === 'style') {\n        animator.changeTarget(elDisplayable.style);\n      }\n    }\n  } // Set el to the final state firstly.\n\n\n  allPropsFinal && el.attr(allPropsFinal);\n}\n\nfunction applyTransitionFrom(el, dataIndex, elOption, seriesModel, // Can be null/undefined\ntransFromProps, isInit) {\n  if (transFromProps) {\n    // Do not use `el.updateDuringAnimation` here becuase `el.updateDuringAnimation` will\n    // be called mutiple time in each animation frame. For example, if both \"transform\" props\n    // and shape props and style props changed, it will generate three animator and called\n    // one-by-one in each animation frame.\n    // We use the during in `animateTo/From` params.\n    var userDuring = elOption.during; // For simplicity, if during not specified, the previous during will not work any more.\n\n    inner(el).userDuring = userDuring;\n    var cfgDuringCall = userDuring ? bind(duringCall, {\n      el: el,\n      userDuring: userDuring\n    }) : null;\n    var cfg = {\n      dataIndex: dataIndex,\n      isFrom: true,\n      during: cfgDuringCall\n    };\n    isInit ? graphicUtil.initProps(el, transFromProps, seriesModel, cfg) : graphicUtil.updateProps(el, transFromProps, seriesModel, cfg);\n  }\n} // See [STRATEGY_TRANSITION]\n\n\nfunction prepareShapeOrExtraTransitionFrom(mainAttr, el, morphFromEl, elOption, transFromProps, isInit) {\n  var attrOpt = elOption[mainAttr];\n\n  if (!attrOpt) {\n    return;\n  }\n\n  var elPropsInAttr = el[mainAttr];\n  var transFromPropsInAttr;\n  var enterFrom = attrOpt.enterFrom;\n\n  if (isInit && enterFrom) {\n    !transFromPropsInAttr && (transFromPropsInAttr = transFromProps[mainAttr] = {});\n    var enterFromKeys = keys(enterFrom);\n\n    for (var i = 0; i < enterFromKeys.length; i++) {\n      // `enterFrom` props are not necessarily also declared in `shape`/`style`/...,\n      // for example, `opacity` can only declared in `enterFrom` but not in `style`.\n      var key = enterFromKeys[i]; // Do not clone, animator will perform that clone.\n\n      transFromPropsInAttr[key] = enterFrom[key];\n    }\n  }\n\n  if (!isInit && elPropsInAttr // Just ignore shape animation in morphing.\n  && !(morphFromEl != null && mainAttr === 'shape')) {\n    if (attrOpt.transition) {\n      !transFromPropsInAttr && (transFromPropsInAttr = transFromProps[mainAttr] = {});\n      var transitionKeys = normalizeToArray(attrOpt.transition);\n\n      for (var i = 0; i < transitionKeys.length; i++) {\n        var key = transitionKeys[i];\n        var elVal = elPropsInAttr[key];\n\n        if (process.env.NODE_ENV !== 'production') {\n          checkNonStyleTansitionRefer(key, attrOpt[key], elVal);\n        } // Do not clone, see `checkNonStyleTansitionRefer`.\n\n\n        transFromPropsInAttr[key] = elVal;\n      }\n    } else if (indexOf(elOption.transition, mainAttr) >= 0) {\n      !transFromPropsInAttr && (transFromPropsInAttr = transFromProps[mainAttr] = {});\n      var elPropsInAttrKeys = keys(elPropsInAttr);\n\n      for (var i = 0; i < elPropsInAttrKeys.length; i++) {\n        var key = elPropsInAttrKeys[i];\n        var elVal = elPropsInAttr[key];\n\n        if (isNonStyleTransitionEnabled(attrOpt[key], elVal)) {\n          transFromPropsInAttr[key] = elVal;\n        }\n      }\n    }\n  }\n\n  var leaveTo = attrOpt.leaveTo;\n\n  if (leaveTo) {\n    var leaveToProps = getOrCreateLeaveToPropsFromEl(el);\n    var leaveToPropsInAttr = leaveToProps[mainAttr] || (leaveToProps[mainAttr] = {});\n    var leaveToKeys = keys(leaveTo);\n\n    for (var i = 0; i < leaveToKeys.length; i++) {\n      var key = leaveToKeys[i];\n      leaveToPropsInAttr[key] = leaveTo[key];\n    }\n  }\n}\n\nfunction prepareShapeOrExtraAllPropsFinal(mainAttr, elOption, allProps) {\n  var attrOpt = elOption[mainAttr];\n\n  if (!attrOpt) {\n    return;\n  }\n\n  var allPropsInAttr = allProps[mainAttr] = {};\n  var keysInAttr = keys(attrOpt);\n\n  for (var i = 0; i < keysInAttr.length; i++) {\n    var key = keysInAttr[i]; // To avoid share one object with different element, and\n    // to avoid user modify the object inexpectedly, have to clone.\n\n    allPropsInAttr[key] = cloneValue(attrOpt[key]);\n  }\n} // See [STRATEGY_TRANSITION].\n\n\nfunction prepareTransformTransitionFrom(el, morphFromEl, elOption, transFromProps, isInit) {\n  var enterFrom = elOption.enterFrom;\n\n  if (isInit && enterFrom) {\n    var enterFromKeys = keys(enterFrom);\n\n    for (var i = 0; i < enterFromKeys.length; i++) {\n      var key = enterFromKeys[i];\n\n      if (process.env.NODE_ENV !== 'production') {\n        checkTransformPropRefer(key, 'el.enterFrom');\n      } // Do not clone, animator will perform that clone.\n\n\n      transFromProps[key] = enterFrom[key];\n    }\n  }\n\n  if (!isInit) {\n    // If morphing, force transition all transform props.\n    // otherwise might have incorrect morphing animation.\n    if (morphFromEl) {\n      var fromTransformable = calcOldElLocalTransformBasedOnNewElParent(morphFromEl, el);\n      setTransformPropToTransitionFrom(transFromProps, 'x', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'y', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'scaleX', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'scaleY', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'originX', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'originY', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'rotation', fromTransformable);\n    } else if (elOption.transition) {\n      var transitionKeys = normalizeToArray(elOption.transition);\n\n      for (var i = 0; i < transitionKeys.length; i++) {\n        var key = transitionKeys[i];\n\n        if (key === 'style' || key === 'shape' || key === 'extra') {\n          continue;\n        }\n\n        var elVal = el[key];\n\n        if (process.env.NODE_ENV !== 'production') {\n          checkTransformPropRefer(key, 'el.transition');\n          checkNonStyleTansitionRefer(key, elOption[key], elVal);\n        } // Do not clone, see `checkNonStyleTansitionRefer`.\n\n\n        transFromProps[key] = elVal;\n      }\n    } // This default transition see [STRATEGY_TRANSITION]\n    else {\n        setTransformPropToTransitionFrom(transFromProps, 'x', el);\n        setTransformPropToTransitionFrom(transFromProps, 'y', el);\n      }\n  }\n\n  var leaveTo = elOption.leaveTo;\n\n  if (leaveTo) {\n    var leaveToProps = getOrCreateLeaveToPropsFromEl(el);\n    var leaveToKeys = keys(leaveTo);\n\n    for (var i = 0; i < leaveToKeys.length; i++) {\n      var key = leaveToKeys[i];\n\n      if (process.env.NODE_ENV !== 'production') {\n        checkTransformPropRefer(key, 'el.leaveTo');\n      }\n\n      leaveToProps[key] = leaveTo[key];\n    }\n  }\n}\n\nfunction prepareTransformAllPropsFinal(elOption, allProps) {\n  setLagecyTransformProp(elOption, allProps, 'position');\n  setLagecyTransformProp(elOption, allProps, 'scale');\n  setLagecyTransformProp(elOption, allProps, 'origin');\n  setTransformProp(elOption, allProps, 'x');\n  setTransformProp(elOption, allProps, 'y');\n  setTransformProp(elOption, allProps, 'scaleX');\n  setTransformProp(elOption, allProps, 'scaleY');\n  setTransformProp(elOption, allProps, 'originX');\n  setTransformProp(elOption, allProps, 'originY');\n  setTransformProp(elOption, allProps, 'rotation');\n} // See [STRATEGY_TRANSITION].\n\n\nfunction prepareStyleTransitionFrom(el, morphFromEl, elOption, styleOpt, transFromProps, isInit) {\n  if (!styleOpt) {\n    return;\n  } // At present in \"many-to-one\"/\"one-to-many\" case, to not support \"many\" have\n  // different styles and make style transitions. That might be a rare case.\n\n\n  var fromEl = morphFromEl || el;\n  var fromElStyle = fromEl.style;\n  var transFromStyleProps;\n  var enterFrom = styleOpt.enterFrom;\n\n  if (isInit && enterFrom) {\n    var enterFromKeys = keys(enterFrom);\n    !transFromStyleProps && (transFromStyleProps = transFromProps.style = {});\n\n    for (var i = 0; i < enterFromKeys.length; i++) {\n      var key = enterFromKeys[i]; // Do not clone, animator will perform that clone.\n\n      transFromStyleProps[key] = enterFrom[key];\n    }\n  }\n\n  if (!isInit && fromElStyle) {\n    if (styleOpt.transition) {\n      var transitionKeys = normalizeToArray(styleOpt.transition);\n      !transFromStyleProps && (transFromStyleProps = transFromProps.style = {});\n\n      for (var i = 0; i < transitionKeys.length; i++) {\n        var key = transitionKeys[i];\n        var elVal = fromElStyle[key]; // Do not clone, see `checkNonStyleTansitionRefer`.\n\n        transFromStyleProps[key] = elVal;\n      }\n    } else if (el.getAnimationStyleProps && indexOf(elOption.transition, 'style') >= 0) {\n      var animationProps = el.getAnimationStyleProps();\n      var animationStyleProps = animationProps ? animationProps.style : null;\n\n      if (animationStyleProps) {\n        !transFromStyleProps && (transFromStyleProps = transFromProps.style = {});\n        var styleKeys = keys(styleOpt);\n\n        for (var i = 0; i < styleKeys.length; i++) {\n          var key = styleKeys[i];\n\n          if (animationStyleProps[key]) {\n            var elVal = fromElStyle[key];\n            transFromStyleProps[key] = elVal;\n          }\n        }\n      }\n    }\n  }\n\n  var leaveTo = styleOpt.leaveTo;\n\n  if (leaveTo) {\n    var leaveToKeys = keys(leaveTo);\n    var leaveToProps = getOrCreateLeaveToPropsFromEl(el);\n    var leaveToStyleProps = leaveToProps.style || (leaveToProps.style = {});\n\n    for (var i = 0; i < leaveToKeys.length; i++) {\n      var key = leaveToKeys[i];\n      leaveToStyleProps[key] = leaveTo[key];\n    }\n  }\n}\n/**\n * If make \"transform\"(x/y/scaleX/scaleY/orient/originX/originY) transition between\n * two path elements that have different hierarchy, before we retrieve the \"from\" props,\n * we have to calculate the local transition of the \"oldPath\" based on the parent of\n * the \"newPath\".\n * At present, the case only happend in \"morphing\". Without morphing, the transform\n * transition are all between elements in the same hierarchy, where this kind of process\n * is not needed.\n *\n * [CAVEAT]:\n * This method makes sense only if: (very tricky)\n * (1) \"newEl\" has been added to its final parent.\n * (2) Local transform props of \"newPath.parent\" are not at their final value but already\n * have been at the \"from value\".\n *     This is currently ensured by:\n *     (2.1) \"graphicUtil.animationFrom\", which will set the element to the \"from value\"\n *     immediately.\n *     (2.2) \"morph\" option is not allowed to be set on Group, so all of the groups have\n *     been finished their \"updateElNormal\" when calling this method in morphing process.\n */\n\n\nfunction calcOldElLocalTransformBasedOnNewElParent(oldEl, newEl) {\n  if (!oldEl || oldEl === newEl || oldEl.parent === newEl.parent) {\n    return oldEl;\n  } // Not sure oldEl is rendered (may have \"lazyUpdate\"),\n  // so always call `getComputedTransform`.\n\n\n  var tmpM = tmpTransformable.transform || (tmpTransformable.transform = matrix.identity([]));\n  var oldGlobalTransform = oldEl.getComputedTransform();\n  oldGlobalTransform ? matrix.copy(tmpM, oldGlobalTransform) : matrix.identity(tmpM);\n  var newParent = newEl.parent;\n\n  if (newParent) {\n    newParent.getComputedTransform();\n  }\n\n  tmpTransformable.originX = oldEl.originX;\n  tmpTransformable.originY = oldEl.originY;\n  tmpTransformable.parent = newParent;\n  tmpTransformable.decomposeTransform();\n  return tmpTransformable;\n}\n\nvar checkNonStyleTansitionRefer;\n\nif (process.env.NODE_ENV !== 'production') {\n  checkNonStyleTansitionRefer = function (propName, optVal, elVal) {\n    if (!isArrayLike(optVal)) {\n      assert(optVal != null && isFinite(optVal), 'Prop `' + propName + '` must refer to a finite number or ArrayLike for transition.');\n    } else {\n      // Try not to copy array for performance, but if user use the same object in different\n      // call of `renderItem`, it will casue animation transition fail.\n      assert(optVal !== elVal, 'Prop `' + propName + '` must use different Array object each time for transition.');\n    }\n  };\n}\n\nfunction isNonStyleTransitionEnabled(optVal, elVal) {\n  // The same as `checkNonStyleTansitionRefer`.\n  return !isArrayLike(optVal) ? optVal != null && isFinite(optVal) : optVal !== elVal;\n}\n\nvar checkTransformPropRefer;\n\nif (process.env.NODE_ENV !== 'production') {\n  checkTransformPropRefer = function (key, usedIn) {\n    assert(hasOwn(TRANSFORM_PROPS, key), 'Prop `' + key + '` is not a permitted in `' + usedIn + '`. ' + 'Only `' + keys(TRANSFORM_PROPS).join('`, `') + '` are permitted.');\n  };\n}\n\nfunction getOrCreateLeaveToPropsFromEl(el) {\n  var innerEl = inner(el);\n  return innerEl.leaveToProps || (innerEl.leaveToProps = {});\n} // Use it to avoid it be exposed to user.\n\n\nvar tmpDuringScope = {};\nvar customDuringAPI = {\n  // Usually other props do not need to be changed in animation during.\n  setTransform: function (key, val) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(hasOwn(TRANSFORM_PROPS, key), 'Only ' + transformPropNamesStr + ' available in `setTransform`.');\n    }\n\n    tmpDuringScope.el[key] = val;\n    return this;\n  },\n  getTransform: function (key) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(hasOwn(TRANSFORM_PROPS, key), 'Only ' + transformPropNamesStr + ' available in `getTransform`.');\n    }\n\n    return tmpDuringScope.el[key];\n  },\n  setShape: function (key, val) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var shape = tmpDuringScope.el.shape || (tmpDuringScope.el.shape = {});\n    shape[key] = val;\n    tmpDuringScope.isShapeDirty = true;\n    return this;\n  },\n  getShape: function (key) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var shape = tmpDuringScope.el.shape;\n\n    if (shape) {\n      return shape[key];\n    }\n  },\n  setStyle: function (key, val) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var style = tmpDuringScope.el.style;\n\n    if (style) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (eqNaN(val)) {\n          warn('style.' + key + ' must not be assigned with NaN.');\n        }\n      }\n\n      style[key] = val;\n      tmpDuringScope.isStyleDirty = true;\n    }\n\n    return this;\n  },\n  getStyle: function (key) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var style = tmpDuringScope.el.style;\n\n    if (style) {\n      return style[key];\n    }\n  },\n  setExtra: function (key, val) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var extra = tmpDuringScope.el.extra || (tmpDuringScope.el.extra = {});\n    extra[key] = val;\n    return this;\n  },\n  getExtra: function (key) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var extra = tmpDuringScope.el.extra;\n\n    if (extra) {\n      return extra[key];\n    }\n  }\n};\n\nfunction assertNotReserved(key) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (key === 'transition' || key === 'enterFrom' || key === 'leaveTo') {\n      throw new Error('key must not be \"' + key + '\"');\n    }\n  }\n}\n\nfunction duringCall() {\n  // Do not provide \"percent\" until some requirements come.\n  // Because consider thies case:\n  // enterFrom: {x: 100, y: 30}, transition: 'x'.\n  // And enter duration is different from update duration.\n  // Thus it might be confused about the meaning of \"percent\" in during callback.\n  var scope = this;\n  var el = scope.el;\n\n  if (!el) {\n    return;\n  } // If el is remove from zr by reason like legend, during still need to called,\n  // becuase el will be added back to zr and the prop value should not be incorrect.\n\n\n  var newstUserDuring = inner(el).userDuring;\n  var scopeUserDuring = scope.userDuring; // Ensured a during is only called once in each animation frame.\n  // If a during is called multiple times in one frame, maybe some users' calulation logic\n  // might be wrong (not sure whether this usage exists).\n  // The case of a during might be called twice can be: by default there is a animator for\n  // 'x', 'y' when init. Before the init animation finished, call `setOption` to start\n  // another animators for 'style'/'shape'/'extra'.\n\n  if (newstUserDuring !== scopeUserDuring) {\n    // release\n    scope.el = scope.userDuring = null;\n    return;\n  }\n\n  tmpDuringScope.el = el;\n  tmpDuringScope.isShapeDirty = false;\n  tmpDuringScope.isStyleDirty = false; // Give no `this` to user in \"during\" calling.\n\n  scopeUserDuring(customDuringAPI);\n\n  if (tmpDuringScope.isShapeDirty && el.dirtyShape) {\n    el.dirtyShape();\n  }\n\n  if (tmpDuringScope.isStyleDirty && el.dirtyStyle) {\n    el.dirtyStyle();\n  } // markRedraw() will be called by default in during.\n  // FIXME `this.markRedraw();` directly ?\n  // FIXME: if in future meet the case that some prop will be both modified in `during` and `state`,\n  // consider the issue that the prop might be incorrect when return to \"normal\" state.\n\n}\n\nfunction updateElOnState(state, el, elStateOpt, styleOpt, attachedTxInfo, isRoot, isTextContent) {\n  var elDisplayable = el.isGroup ? null : el;\n  var txCfgOpt = attachedTxInfo && attachedTxInfo[state].cfg; // PENDING:5.0 support customize scale change and transition animation?\n\n  if (elDisplayable) {\n    // By default support auto lift color when hover whether `emphasis` specified.\n    var stateObj = elDisplayable.ensureState(state);\n\n    if (styleOpt === false) {\n      var existingEmphasisState = elDisplayable.getState(state);\n\n      if (existingEmphasisState) {\n        existingEmphasisState.style = null;\n      }\n    } else {\n      // style is needed to enable defaut emphasis.\n      stateObj.style = styleOpt || null;\n    } // If `elOption.styleEmphasis` or `elOption.emphasis.style` is `false`,\n    // remove hover style.\n    // If `elOption.textConfig` or `elOption.emphasis.textConfig` is null/undefined, it does not\n    // make sense. So for simplicity, we do not ditinguish `hasOwnProperty` and null/undefined.\n\n\n    if (txCfgOpt) {\n      stateObj.textConfig = txCfgOpt;\n    }\n\n    setDefaultStateProxy(elDisplayable);\n  }\n}\n\nfunction updateZ(el, elOption, seriesModel, attachedTxInfo) {\n  // Group not support textContent and not support z yet.\n  if (el.isGroup) {\n    return;\n  }\n\n  var elDisplayable = el;\n  var currentZ = seriesModel.currentZ;\n  var currentZLevel = seriesModel.currentZLevel; // Always erase.\n\n  elDisplayable.z = currentZ;\n  elDisplayable.zlevel = currentZLevel; // z2 must not be null/undefined, otherwise sort error may occur.\n\n  var optZ2 = elOption.z2;\n  optZ2 != null && (elDisplayable.z2 = optZ2 || 0);\n\n  for (var i = 0; i < STATES.length; i++) {\n    updateZForEachState(elDisplayable, elOption, STATES[i]);\n  }\n}\n\nfunction updateZForEachState(elDisplayable, elOption, state) {\n  var isNormal = state === NORMAL;\n  var elStateOpt = isNormal ? elOption : retrieveStateOption(elOption, state);\n  var optZ2 = elStateOpt ? elStateOpt.z2 : null;\n  var stateObj;\n\n  if (optZ2 != null) {\n    // Do not `ensureState` until required.\n    stateObj = isNormal ? elDisplayable : elDisplayable.ensureState(state);\n    stateObj.z2 = optZ2 || 0;\n  }\n}\n\nfunction setLagecyTransformProp(elOption, targetProps, legacyName, fromTransformable // If provided, retrieve from the element.\n) {\n  var legacyArr = elOption[legacyName];\n  var xyName = LEGACY_TRANSFORM_PROPS[legacyName];\n\n  if (legacyArr) {\n    if (fromTransformable) {\n      targetProps[xyName[0]] = fromTransformable[xyName[0]];\n      targetProps[xyName[1]] = fromTransformable[xyName[1]];\n    } else {\n      targetProps[xyName[0]] = legacyArr[0];\n      targetProps[xyName[1]] = legacyArr[1];\n    }\n  }\n}\n\nfunction setTransformProp(elOption, allProps, name, fromTransformable // If provided, retrieve from the element.\n) {\n  if (elOption[name] != null) {\n    allProps[name] = fromTransformable ? fromTransformable[name] : elOption[name];\n  }\n}\n\nfunction setTransformPropToTransitionFrom(transitionFrom, name, fromTransformable // If provided, retrieve from the element.\n) {\n  if (fromTransformable) {\n    transitionFrom[name] = fromTransformable[name];\n  }\n}\n\nfunction makeRenderItem(customSeries, data, ecModel, api) {\n  var renderItem = customSeries.get('renderItem');\n  var coordSys = customSeries.coordinateSystem;\n  var prepareResult = {};\n\n  if (coordSys) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(renderItem, 'series.render is required.');\n      assert(coordSys.prepareCustoms || prepareCustoms[coordSys.type], 'This coordSys does not support custom series.');\n    } // `coordSys.prepareCustoms` is used for external coord sys like bmap.\n\n\n    prepareResult = coordSys.prepareCustoms ? coordSys.prepareCustoms(coordSys) : prepareCustoms[coordSys.type](coordSys);\n  }\n\n  var userAPI = defaults({\n    getWidth: api.getWidth,\n    getHeight: api.getHeight,\n    getZr: api.getZr,\n    getDevicePixelRatio: api.getDevicePixelRatio,\n    value: value,\n    style: style,\n    ordinalRawValue: ordinalRawValue,\n    styleEmphasis: styleEmphasis,\n    visual: visual,\n    barLayout: barLayout,\n    currentSeriesIndices: currentSeriesIndices,\n    font: font\n  }, prepareResult.api || {});\n  var userParams = {\n    // The life cycle of context: current round of rendering.\n    // The global life cycle is probably not necessary, because\n    // user can store global status by themselves.\n    context: {},\n    seriesId: customSeries.id,\n    seriesName: customSeries.name,\n    seriesIndex: customSeries.seriesIndex,\n    coordSys: prepareResult.coordSys,\n    dataInsideLength: data.count(),\n    encode: wrapEncodeDef(customSeries.getData())\n  }; // If someday intending to refactor them to a class, should consider do not\n  // break change: currently these attribute member are encapsulated in a closure\n  // so that do not need to force user to call these method with a scope.\n  // Do not support call `api` asynchronously without dataIndexInside input.\n\n  var currDataIndexInside;\n  var currItemModel;\n  var currItemStyleModels = {};\n  var currLabelModels = {};\n  var seriesItemStyleModels = {};\n  var seriesLabelModels = {};\n\n  for (var i = 0; i < STATES.length; i++) {\n    var stateName = STATES[i];\n    seriesItemStyleModels[stateName] = customSeries.getModel(PATH_ITEM_STYLE[stateName]);\n    seriesLabelModels[stateName] = customSeries.getModel(PATH_LABEL[stateName]);\n  }\n\n  function getItemModel(dataIndexInside) {\n    return dataIndexInside === currDataIndexInside ? currItemModel || (currItemModel = data.getItemModel(dataIndexInside)) : data.getItemModel(dataIndexInside);\n  }\n\n  function getItemStyleModel(dataIndexInside, state) {\n    return !data.hasItemOption ? seriesItemStyleModels[state] : dataIndexInside === currDataIndexInside ? currItemStyleModels[state] || (currItemStyleModels[state] = getItemModel(dataIndexInside).getModel(PATH_ITEM_STYLE[state])) : getItemModel(dataIndexInside).getModel(PATH_ITEM_STYLE[state]);\n  }\n\n  function getLabelModel(dataIndexInside, state) {\n    return !data.hasItemOption ? seriesLabelModels[state] : dataIndexInside === currDataIndexInside ? currLabelModels[state] || (currLabelModels[state] = getItemModel(dataIndexInside).getModel(PATH_LABEL[state])) : getItemModel(dataIndexInside).getModel(PATH_LABEL[state]);\n  }\n\n  return function (dataIndexInside, payload) {\n    currDataIndexInside = dataIndexInside;\n    currItemModel = null;\n    currItemStyleModels = {};\n    currLabelModels = {};\n    return renderItem && renderItem(defaults({\n      dataIndexInside: dataIndexInside,\n      dataIndex: data.getRawIndex(dataIndexInside),\n      // Can be used for optimization when zoom or roam.\n      actionType: payload ? payload.type : null\n    }, userParams), userAPI);\n  };\n  /**\n   * @public\n   * @param dim by default 0.\n   * @param dataIndexInside by default `currDataIndexInside`.\n   */\n\n  function value(dim, dataIndexInside) {\n    dataIndexInside == null && (dataIndexInside = currDataIndexInside);\n    return data.get(data.getDimension(dim || 0), dataIndexInside);\n  }\n  /**\n   * @public\n   * @param dim by default 0.\n   * @param dataIndexInside by default `currDataIndexInside`.\n   */\n\n\n  function ordinalRawValue(dim, dataIndexInside) {\n    dataIndexInside == null && (dataIndexInside = currDataIndexInside);\n    var dimInfo = data.getDimensionInfo(dim || 0);\n\n    if (!dimInfo) {\n      return;\n    }\n\n    var val = data.get(dimInfo.name, dataIndexInside);\n    var ordinalMeta = dimInfo && dimInfo.ordinalMeta;\n    return ordinalMeta ? ordinalMeta.categories[val] : val;\n  }\n  /**\n   * @deprecated The orgininal intention of `api.style` is enable to set itemStyle\n   * like other series. But it not necessary and not easy to give a strict definition\n   * of what it return. And since echarts5 it needs to be make compat work. So\n   * deprecates it since echarts5.\n   *\n   * By default, `visual` is applied to style (to support visualMap).\n   * `visual.color` is applied at `fill`. If user want apply visual.color on `stroke`,\n   * it can be implemented as:\n   * `api.style({stroke: api.visual('color'), fill: null})`;\n   *\n   * [Compat]: since ec5, RectText has been separated from its hosts el.\n   * so `api.style()` will only return the style from `itemStyle` but not handle `label`\n   * any more. But `series.label` config is never published in doc.\n   * We still compat it in `api.style()`. But not encourage to use it and will still not\n   * to pulish it to doc.\n   * @public\n   * @param dataIndexInside by default `currDataIndexInside`.\n   */\n\n\n  function style(userProps, dataIndexInside) {\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecated('api.style', 'Please write literal style directly instead.');\n    }\n\n    dataIndexInside == null && (dataIndexInside = currDataIndexInside);\n    var style = data.getItemVisual(dataIndexInside, 'style');\n    var visualColor = style && style.fill;\n    var opacity = style && style.opacity;\n    var itemStyle = getItemStyleModel(dataIndexInside, NORMAL).getItemStyle();\n    visualColor != null && (itemStyle.fill = visualColor);\n    opacity != null && (itemStyle.opacity = opacity);\n    var opt = {\n      inheritColor: isString(visualColor) ? visualColor : '#000'\n    };\n    var labelModel = getLabelModel(dataIndexInside, NORMAL); // Now that the feture of \"auto adjust text fill/stroke\" has been migrated to zrender\n    // since ec5, we should set `isAttached` as `false` here and make compat in\n    // `convertToEC4StyleForCustomSerise`.\n\n    var textStyle = labelStyleHelper.createTextStyle(labelModel, null, opt, false, true);\n    textStyle.text = labelModel.getShallow('show') ? retrieve2(customSeries.getFormattedLabel(dataIndexInside, NORMAL), getDefaultLabel(data, dataIndexInside)) : null;\n    var textConfig = labelStyleHelper.createTextConfig(labelModel, opt, false);\n    preFetchFromExtra(userProps, itemStyle);\n    itemStyle = convertToEC4StyleForCustomSerise(itemStyle, textStyle, textConfig);\n    userProps && applyUserPropsAfter(itemStyle, userProps);\n    itemStyle.legacy = true;\n    return itemStyle;\n  }\n  /**\n   * @deprecated The reason see `api.style()`\n   * @public\n   * @param dataIndexInside by default `currDataIndexInside`.\n   */\n\n\n  function styleEmphasis(userProps, dataIndexInside) {\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecated('api.styleEmphasis', 'Please write literal style directly instead.');\n    }\n\n    dataIndexInside == null && (dataIndexInside = currDataIndexInside);\n    var itemStyle = getItemStyleModel(dataIndexInside, EMPHASIS).getItemStyle();\n    var labelModel = getLabelModel(dataIndexInside, EMPHASIS);\n    var textStyle = labelStyleHelper.createTextStyle(labelModel, null, null, true, true);\n    textStyle.text = labelModel.getShallow('show') ? retrieve3(customSeries.getFormattedLabel(dataIndexInside, EMPHASIS), customSeries.getFormattedLabel(dataIndexInside, NORMAL), getDefaultLabel(data, dataIndexInside)) : null;\n    var textConfig = labelStyleHelper.createTextConfig(labelModel, null, true);\n    preFetchFromExtra(userProps, itemStyle);\n    itemStyle = convertToEC4StyleForCustomSerise(itemStyle, textStyle, textConfig);\n    userProps && applyUserPropsAfter(itemStyle, userProps);\n    itemStyle.legacy = true;\n    return itemStyle;\n  }\n\n  function applyUserPropsAfter(itemStyle, extra) {\n    for (var key in extra) {\n      if (hasOwn(extra, key)) {\n        itemStyle[key] = extra[key];\n      }\n    }\n  }\n\n  function preFetchFromExtra(extra, itemStyle) {\n    // A trick to retrieve those props firstly, which are used to\n    // apply auto inside fill/stroke in `convertToEC4StyleForCustomSerise`.\n    // (It's not reasonable but only for a degree of compat)\n    if (extra) {\n      extra.textFill && (itemStyle.textFill = extra.textFill);\n      extra.textPosition && (itemStyle.textPosition = extra.textPosition);\n    }\n  }\n  /**\n   * @public\n   * @param dataIndexInside by default `currDataIndexInside`.\n   */\n\n\n  function visual(visualType, dataIndexInside) {\n    dataIndexInside == null && (dataIndexInside = currDataIndexInside);\n\n    if (hasOwn(STYLE_VISUAL_TYPE, visualType)) {\n      var style_1 = data.getItemVisual(dataIndexInside, 'style');\n      return style_1 ? style_1[STYLE_VISUAL_TYPE[visualType]] : null;\n    } // Only support these visuals. Other visual might be inner tricky\n    // for performance (like `style`), do not expose to users.\n\n\n    if (hasOwn(NON_STYLE_VISUAL_PROPS, visualType)) {\n      return data.getItemVisual(dataIndexInside, visualType);\n    }\n  }\n  /**\n   * @public\n   * @return If not support, return undefined.\n   */\n\n\n  function barLayout(opt) {\n    if (coordSys.type === 'cartesian2d') {\n      var baseAxis = coordSys.getBaseAxis();\n      return getLayoutOnAxis(defaults({\n        axis: baseAxis\n      }, opt));\n    }\n  }\n  /**\n   * @public\n   */\n\n\n  function currentSeriesIndices() {\n    return ecModel.getCurrentSeriesIndices();\n  }\n  /**\n   * @public\n   * @return font string\n   */\n\n\n  function font(opt) {\n    return labelStyleHelper.getFont(opt, ecModel);\n  }\n}\n\nfunction wrapEncodeDef(data) {\n  var encodeDef = {};\n  each(data.dimensions, function (dimName, dataDimIndex) {\n    var dimInfo = data.getDimensionInfo(dimName);\n\n    if (!dimInfo.isExtraCoord) {\n      var coordDim = dimInfo.coordDim;\n      var dataDims = encodeDef[coordDim] = encodeDef[coordDim] || [];\n      dataDims[dimInfo.coordDimIndex] = dataDimIndex;\n    }\n  });\n  return encodeDef;\n}\n\nfunction createOrUpdateItem(api, el, dataIndex, elOption, seriesModel, group, data, morphPreparation) {\n  // [Rule]\n  // If `renderItem` returns `null`/`undefined`/`false`, remove the previous el if existing.\n  //     (It seems that violate the \"merge\" principle, but most of users probably intuitively\n  //     regard \"return;\" as \"show nothing element whatever\", so make a exception to meet the\n  //     most cases.)\n  // The rule or \"merge\" see [STRATEGY_MERGE].\n  // If `elOption` is `null`/`undefined`/`false` (when `renderItem` returns nothing).\n  if (!elOption) {\n    removeElementDirectly(el, group);\n    return;\n  }\n\n  el = doCreateOrUpdateEl(api, el, dataIndex, elOption, seriesModel, group, true, morphPreparation);\n  el && data.setItemGraphicEl(dataIndex, el);\n  enableHoverEmphasis(el, elOption.focus, elOption.blurScope);\n  return el;\n}\n\nfunction doCreateOrUpdateEl(api, el, dataIndex, elOption, seriesModel, group, isRoot, morphPreparation) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(elOption, 'should not have an null/undefined element setting');\n  }\n\n  var toBeReplacedIdx = -1;\n\n  if (el && doesElNeedRecreate(el, elOption) // || (\n  //     // PENDING: even in one-to-one mapping case, if el is marked as morph,\n  //     // do not sure whether the el will be mapped to another el with different\n  //     // hierarchy in Group tree. So always recreate el rather than reuse the el.\n  //     morphPreparation && morphPreparation.isOneToOneFrom(el)\n  // )\n  ) {\n    // Should keep at the original index, otherwise \"merge by index\" will be incorrect.\n    toBeReplacedIdx = group.childrenRef().indexOf(el);\n    el = null;\n  }\n\n  var elIsNewCreated = !el;\n\n  if (!el) {\n    el = createEl(elOption);\n  } else {\n    // FIMXE:NEXT unified clearState?\n    // If in some case the performance issue arised, consider\n    // do not clearState but update cached normal state directly.\n    el.clearStates();\n  }\n\n  var canMorph = inner(el).canMorph = elOption.morph && isPath(el);\n  var thisElIsMorphTo = canMorph && morphPreparation && morphPreparation.hasFrom(); // Use update animation when morph is enabled.\n\n  var isInit = elIsNewCreated && !thisElIsMorphTo;\n  attachedTxInfoTmp.normal.cfg = attachedTxInfoTmp.normal.conOpt = attachedTxInfoTmp.emphasis.cfg = attachedTxInfoTmp.emphasis.conOpt = attachedTxInfoTmp.blur.cfg = attachedTxInfoTmp.blur.conOpt = attachedTxInfoTmp.select.cfg = attachedTxInfoTmp.select.conOpt = null;\n  attachedTxInfoTmp.isLegacy = false;\n  doCreateOrUpdateAttachedTx(el, dataIndex, elOption, seriesModel, isInit, attachedTxInfoTmp);\n  doCreateOrUpdateClipPath(el, dataIndex, elOption, seriesModel, isInit);\n  var pendingAllPropsFinal = updateElNormal(api, el, thisElIsMorphTo, dataIndex, elOption, elOption.style, attachedTxInfoTmp, seriesModel, isInit, false);\n\n  if (thisElIsMorphTo) {\n    morphPreparation.addTo(el, elOption, dataIndex, pendingAllPropsFinal);\n  }\n\n  for (var i = 0; i < STATES.length; i++) {\n    var stateName = STATES[i];\n\n    if (stateName !== NORMAL) {\n      var otherStateOpt = retrieveStateOption(elOption, stateName);\n      var otherStyleOpt = retrieveStyleOptionOnState(elOption, otherStateOpt, stateName);\n      updateElOnState(stateName, el, otherStateOpt, otherStyleOpt, attachedTxInfoTmp, isRoot, false);\n    }\n  }\n\n  updateZ(el, elOption, seriesModel, attachedTxInfoTmp);\n\n  if (elOption.type === 'group') {\n    mergeChildren(api, el, dataIndex, elOption, seriesModel, morphPreparation);\n  }\n\n  if (toBeReplacedIdx >= 0) {\n    group.replaceAt(el, toBeReplacedIdx);\n  } else {\n    group.add(el);\n  }\n\n  return el;\n} // `el` must not be null/undefined.\n\n\nfunction doesElNeedRecreate(el, elOption) {\n  var elInner = inner(el);\n  var elOptionType = elOption.type;\n  var elOptionShape = elOption.shape;\n  var elOptionStyle = elOption.style;\n  return (// If `elOptionType` is `null`, follow the merge principle.\n    elOptionType != null && elOptionType !== elInner.customGraphicType || elOptionType === 'path' && hasOwnPathData(elOptionShape) && getPathData(elOptionShape) !== elInner.customPathData || elOptionType === 'image' && hasOwn(elOptionStyle, 'image') && elOptionStyle.image !== elInner.customImagePath // // FIXME test and remove this restriction?\n    // || (elOptionType === 'text'\n    //     && hasOwn(elOptionStyle, 'text')\n    //     && (elOptionStyle as TextStyleProps).text !== elInner.customText\n    // )\n\n  );\n}\n\nfunction doCreateOrUpdateClipPath(el, dataIndex, elOption, seriesModel, isInit) {\n  // Based on the \"merge\" principle, if no clipPath provided,\n  // do nothing. The exists clip will be totally removed only if\n  // `el.clipPath` is `false`. Otherwise it will be merged/replaced.\n  var clipPathOpt = elOption.clipPath;\n\n  if (clipPathOpt === false) {\n    if (el && el.getClipPath()) {\n      el.removeClipPath();\n    }\n  } else if (clipPathOpt) {\n    var clipPath = el.getClipPath();\n\n    if (clipPath && doesElNeedRecreate(clipPath, clipPathOpt)) {\n      clipPath = null;\n    }\n\n    if (!clipPath) {\n      clipPath = createEl(clipPathOpt);\n\n      if (process.env.NODE_ENV !== 'production') {\n        assert(clipPath instanceof graphicUtil.Path, 'Only any type of `path` can be used in `clipPath`, rather than ' + clipPath.type + '.');\n      }\n\n      el.setClipPath(clipPath);\n    }\n\n    updateElNormal(null, clipPath, null, dataIndex, clipPathOpt, null, null, seriesModel, isInit, false);\n  } // If not define `clipPath` in option, do nothing unnecessary.\n\n}\n\nfunction doCreateOrUpdateAttachedTx(el, dataIndex, elOption, seriesModel, isInit, attachedTxInfo) {\n  // group do not support textContent temporarily untill necessary.\n  if (el.isGroup) {\n    return;\n  } // Normal must be called before emphasis, for `isLegacy` detection.\n\n\n  processTxInfo(elOption, null, attachedTxInfo);\n  processTxInfo(elOption, EMPHASIS, attachedTxInfo); // If `elOption.textConfig` or `elOption.textContent` is null/undefined, it does not make sence.\n  // So for simplicity, if \"elOption hasOwnProperty of them but be null/undefined\", we do not\n  // trade them as set to null to el.\n  // Especially:\n  // `elOption.textContent: false` means remove textContent.\n  // `elOption.textContent.emphasis.style: false` means remove the style from emphasis state.\n\n  var txConOptNormal = attachedTxInfo.normal.conOpt;\n  var txConOptEmphasis = attachedTxInfo.emphasis.conOpt;\n  var txConOptBlur = attachedTxInfo.blur.conOpt;\n  var txConOptSelect = attachedTxInfo.select.conOpt;\n\n  if (txConOptNormal != null || txConOptEmphasis != null || txConOptSelect != null || txConOptBlur != null) {\n    var textContent = el.getTextContent();\n\n    if (txConOptNormal === false) {\n      textContent && el.removeTextContent();\n    } else {\n      txConOptNormal = attachedTxInfo.normal.conOpt = txConOptNormal || {\n        type: 'text'\n      };\n\n      if (!textContent) {\n        textContent = createEl(txConOptNormal);\n        el.setTextContent(textContent);\n      } else {\n        // If in some case the performance issue arised, consider\n        // do not clearState but update cached normal state directly.\n        textContent.clearStates();\n      }\n\n      var txConStlOptNormal = txConOptNormal && txConOptNormal.style;\n      updateElNormal(null, textContent, null, dataIndex, txConOptNormal, txConStlOptNormal, null, seriesModel, isInit, true);\n\n      for (var i = 0; i < STATES.length; i++) {\n        var stateName = STATES[i];\n\n        if (stateName !== NORMAL) {\n          var txConOptOtherState = attachedTxInfo[stateName].conOpt;\n          updateElOnState(stateName, textContent, txConOptOtherState, retrieveStyleOptionOnState(txConOptNormal, txConOptOtherState, stateName), null, false, true);\n        }\n      }\n\n      txConStlOptNormal ? textContent.dirty() : textContent.markRedraw();\n    }\n  }\n}\n\nfunction processTxInfo(elOption, state, attachedTxInfo) {\n  var stateOpt = !state ? elOption : retrieveStateOption(elOption, state);\n  var styleOpt = !state ? elOption.style : retrieveStyleOptionOnState(elOption, stateOpt, EMPHASIS);\n  var elType = elOption.type;\n  var txCfg = stateOpt ? stateOpt.textConfig : null;\n  var txConOptNormal = elOption.textContent;\n  var txConOpt = !txConOptNormal ? null : !state ? txConOptNormal : retrieveStateOption(txConOptNormal, state);\n\n  if (styleOpt && ( // Because emphasis style has little info to detect legacy,\n  // if normal is legacy, emphasis is trade as legacy.\n  attachedTxInfo.isLegacy || isEC4CompatibleStyle(styleOpt, elType, !!txCfg, !!txConOpt))) {\n    attachedTxInfo.isLegacy = true;\n    var convertResult = convertFromEC4CompatibleStyle(styleOpt, elType, !state); // Explicitly specified `textConfig` and `textContent` has higher priority than\n    // the ones generated by legacy style. Otherwise if users use them and `api.style`\n    // at the same time, they not both work and hardly to known why.\n\n    if (!txCfg && convertResult.textConfig) {\n      txCfg = convertResult.textConfig;\n    }\n\n    if (!txConOpt && convertResult.textContent) {\n      txConOpt = convertResult.textContent;\n    }\n  }\n\n  if (!state && txConOpt) {\n    var txConOptNormal_1 = txConOpt; // `textContent: {type: 'text'}`, the \"type\" is easy to be missing. So we tolerate it.\n\n    !txConOptNormal_1.type && (txConOptNormal_1.type = 'text');\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Do not tolerate incorret type for forward compat.\n      txConOptNormal_1.type !== 'text' && assert(txConOptNormal_1.type === 'text', 'textContent.type must be \"text\"');\n    }\n  }\n\n  var info = !state ? attachedTxInfo.normal : attachedTxInfo[state];\n  info.cfg = txCfg;\n  info.conOpt = txConOpt;\n}\n\nfunction retrieveStateOption(elOption, state) {\n  return !state ? elOption : elOption ? elOption[state] : null;\n}\n\nfunction retrieveStyleOptionOnState(stateOptionNormal, stateOption, state) {\n  var style = stateOption && stateOption.style;\n\n  if (style == null && state === EMPHASIS && stateOptionNormal) {\n    style = stateOptionNormal.styleEmphasis;\n  }\n\n  return style;\n} // Usage:\n// (1) By default, `elOption.$mergeChildren` is `'byIndex'`, which indicates that\n//     the existing children will not be removed, and enables the feature that\n//     update some of the props of some of the children simply by construct\n//     the returned children of `renderItem` like:\n//     `var children = group.children = []; children[3] = {opacity: 0.5};`\n// (2) If `elOption.$mergeChildren` is `'byName'`, add/update/remove children\n//     by child.name. But that might be lower performance.\n// (3) If `elOption.$mergeChildren` is `false`, the existing children will be\n//     replaced totally.\n// (4) If `!elOption.children`, following the \"merge\" principle, nothing will happen.\n//\n// For implementation simpleness, do not provide a direct way to remove sinlge\n// child (otherwise the total indicies of the children array have to be modified).\n// User can remove a single child by set its `ignore` as `true`.\n\n\nfunction mergeChildren(api, el, dataIndex, elOption, seriesModel, morphPreparation) {\n  var newChildren = elOption.children;\n  var newLen = newChildren ? newChildren.length : 0;\n  var mergeChildren = elOption.$mergeChildren; // `diffChildrenByName` has been deprecated.\n\n  var byName = mergeChildren === 'byName' || elOption.diffChildrenByName;\n  var notMerge = mergeChildren === false; // For better performance on roam update, only enter if necessary.\n\n  if (!newLen && !byName && !notMerge) {\n    return;\n  }\n\n  if (byName) {\n    diffGroupChildren({\n      api: api,\n      oldChildren: el.children() || [],\n      newChildren: newChildren || [],\n      dataIndex: dataIndex,\n      seriesModel: seriesModel,\n      group: el,\n      morphPreparation: morphPreparation\n    });\n    return;\n  }\n\n  notMerge && el.removeAll(); // Mapping children of a group simply by index, which\n  // might be better performance.\n\n  var index = 0;\n\n  for (; index < newLen; index++) {\n    newChildren[index] && doCreateOrUpdateEl(api, el.childAt(index), dataIndex, newChildren[index], seriesModel, el, false, morphPreparation);\n  }\n\n  for (var i = el.childCount() - 1; i >= index; i--) {\n    // Do not supprot leave elements that are not mentioned in the latest\n    // `renderItem` return. Otherwise users may not have a clear and simple\n    // concept that how to contorl all of the elements.\n    doRemoveEl(el.childAt(i), seriesModel, el);\n  }\n}\n\nfunction diffGroupChildren(context) {\n  new DataDiffer(context.oldChildren, context.newChildren, getKey, getKey, context).add(processAddUpdate).update(processAddUpdate).remove(processRemove).execute();\n}\n\nfunction getKey(item, idx) {\n  var name = item && item.name;\n  return name != null ? name : GROUP_DIFF_PREFIX + idx;\n}\n\nfunction processAddUpdate(newIndex, oldIndex) {\n  var context = this.context;\n  var childOption = newIndex != null ? context.newChildren[newIndex] : null;\n  var child = oldIndex != null ? context.oldChildren[oldIndex] : null;\n  doCreateOrUpdateEl(context.api, child, context.dataIndex, childOption, context.seriesModel, context.group, false, context.morphPreparation);\n}\n\nfunction processRemove(oldIndex) {\n  var context = this.context;\n  var child = context.oldChildren[oldIndex];\n  doRemoveEl(child, context.seriesModel, context.group);\n}\n\nfunction doRemoveEl(el, seriesModel, group) {\n  if (el) {\n    var leaveToProps = inner(el).leaveToProps;\n    leaveToProps ? graphicUtil.updateProps(el, leaveToProps, seriesModel, {\n      cb: function () {\n        group.remove(el);\n      }\n    }) : group.remove(el);\n  }\n}\n/**\n * @return SVG Path data.\n */\n\n\nfunction getPathData(shape) {\n  // \"d\" follows the SVG convention.\n  return shape && (shape.pathData || shape.d);\n}\n\nfunction hasOwnPathData(shape) {\n  return shape && (hasOwn(shape, 'pathData') || hasOwn(shape, 'd'));\n}\n\nfunction isPath(el) {\n  return el && el instanceof graphicUtil.Path;\n}\n\nfunction removeElementDirectly(el, group) {\n  el && group.remove(el);\n}\n/**\n * Any morph-potential el should added by `morphPreparation.addTo(el)`.\n * And they may apply morph or not when `morphPreparation.applyMorphing()`.\n * But at least, all of the \"to\" elements will apply all of the updates\n * as `doCreateOrUpdateItem` did.\n */\n\n\nvar MorphPreparation =\n/** @class */\nfunction () {\n  function MorphPreparation(seriesModel, transOpt) {\n    this._fromList = [];\n    this._toList = [];\n    this._toElOptionList = [];\n    this._allPropsFinalList = [];\n    this._toDataIndices = []; // Key: `toDataIndex`, not `toIdx`\n\n    this._morphConfigList = [];\n    this._seriesModel = seriesModel;\n    this._transOpt = transOpt;\n  }\n\n  MorphPreparation.prototype.hasFrom = function () {\n    return !!this._fromList.length;\n  }; // isOneToOneFrom(el: Element): boolean {\n  //     if (el && inner(el).canMorph) {\n  //         const fromList = this._fromList;\n  //         for (let i = 0; i < fromList.length; i++) {\n  //             if (fromList[i] === el) {\n  //                 return true;\n  //             }\n  //         }\n  //     }\n  // }\n\n\n  MorphPreparation.prototype.findAndAddFrom = function (el) {\n    if (!el) {\n      return;\n    }\n\n    if (inner(el).canMorph) {\n      this._fromList.push(el);\n    }\n\n    if (el.isGroup) {\n      var children = el.childrenRef();\n\n      for (var i = 0; i < children.length; i++) {\n        this.findAndAddFrom(children[i]);\n      }\n    }\n  };\n\n  MorphPreparation.prototype.addTo = function (path, elOption, dataIndex, allPropsFinal) {\n    if (path) {\n      this._toList.push(path);\n\n      this._toElOptionList.push(elOption);\n\n      this._toDataIndices.push(dataIndex);\n\n      this._allPropsFinalList.push(allPropsFinal);\n    }\n  };\n\n  MorphPreparation.prototype.applyMorphing = function () {\n    // [MORPHING_LOGIC_HINT]\n    // Pay attention to the order:\n    // (A) Apply `allPropsFinal` and `styleOption` to \"to\".\n    //     (Then \"to\" becomes to the final state.)\n    // (B) Apply `morphPath`/`combine`/`separate`.\n    //     (Based on the current state of \"from\" and the final state of \"to\".)\n    //     (Then we may get \"from.subList\" or \"to.subList\".)\n    // (C) Copy the related props from \"from\" to \"from.subList\", from \"to\" to \"to.subList\".\n    // (D) Collect `transitionFromProps` for \"to\" and \"to.subList\"\n    //     (Based on \"from\" or \"from.subList\".)\n    // (E) Apply `transitionFromProps` to \"to\" and \"to.subList\"\n    //     (It might change the prop values to the first frame value.)\n    // Case_I:\n    //     If (D) should be after (C), we use sequence: A - B - C - D - E\n    // Case_II:\n    //     If (A) should be after (D), we use sequence: D - A - B - C - E\n    // [MORPHING_LOGIC_HINT]\n    // zrender `morphPath`/`combine`/`separate` only manages the shape animation.\n    // Other props (like transfrom, style transition) will handled in echarts).\n    // [MORPHING_LOGIC_HINT]\n    // Make sure `applyPropsFinal` always be called for \"to\".\n    var type = this._type;\n    var fromList = this._fromList;\n    var toList = this._toList;\n    var toListLen = toList.length;\n    var fromListLen = fromList.length;\n\n    if (!fromListLen || !toListLen) {\n      return;\n    }\n\n    if (type === 'oneToOne') {\n      // In one-to-one case, we by default apply a simple rule:\n      // map \"from\" and \"to\" one by one.\n      // For this case: old_data_item_el and new_data_item_el\n      // has the same hierarchy of group tree but only some path type changed.\n      for (var toIdx = 0; toIdx < toListLen; toIdx++) {\n        this._oneToOneForSingleTo(toIdx, toIdx);\n      }\n    } else if (type === 'manyToOne') {\n      // A rough strategy: if there are more than one \"to\", we simply divide \"fromList\" equally.\n      var fromSingleSegLen = Math.max(1, Math.floor(fromListLen / toListLen));\n\n      for (var toIdx = 0, fromIdxStart = 0; toIdx < toListLen; toIdx++, fromIdxStart += fromSingleSegLen) {\n        var fromCount = toIdx + 1 >= toListLen ? fromListLen - fromIdxStart : fromSingleSegLen;\n\n        this._manyToOneForSingleTo(toIdx, fromIdxStart >= fromListLen ? null : fromIdxStart, fromCount);\n      }\n    } else if (type === 'oneToMany') {\n      // A rough strategy: if there are more than one \"from\", we simply divide \"toList\" equally.\n      var toSingleSegLen = Math.max(1, Math.floor(toListLen / fromListLen));\n\n      for (var toIdxStart = 0, fromIdx = 0; toIdxStart < toListLen; toIdxStart += toSingleSegLen, fromIdx++) {\n        var toCount = toIdxStart + toSingleSegLen >= toListLen ? toListLen - toIdxStart : toSingleSegLen;\n\n        this._oneToManyForSingleFrom(toIdxStart, toCount, fromIdx >= fromListLen ? null : fromIdx);\n      }\n    }\n  };\n\n  MorphPreparation.prototype._oneToOneForSingleTo = function ( // \"to\" must NOT be null/undefined.\n  toIdx, // May `fromIdx >= this._fromList.length`\n  fromIdx) {\n    var to = this._toList[toIdx];\n    var toElOption = this._toElOptionList[toIdx];\n    var toDataIndex = this._toDataIndices[toIdx];\n    var allPropsFinal = this._allPropsFinalList[toIdx];\n    var from = this._fromList[fromIdx];\n\n    var elAnimationConfig = this._getOrCreateMorphConfig(toDataIndex);\n\n    var morphDuration = elAnimationConfig.duration;\n\n    if (from && isCombiningPath(from)) {\n      applyPropsFinal(to, allPropsFinal, toElOption.style);\n\n      if (morphDuration) {\n        var combineResult = combine([from], to, elAnimationConfig, copyPropsWhenDivided);\n\n        this._processResultIndividuals(combineResult, toIdx, null);\n      } // The target el will not be displayed and transition from multiple path.\n      // transition on the target el does not make sense.\n\n    } else {\n      var morphFrom = morphDuration // from === to usually happen in scenarios where internal update like\n      // \"dataZoom\", \"legendToggle\" happen. If from is not in any morphing,\n      // we do not need to call `morphPath`.\n      && from && (from !== to || isInAnyMorphing(from)) ? from : null; // See [Case_II] above.\n      // In this case, there is probably `from === to`. And the `transitionFromProps` collecting\n      // does not depends on morphing. So we collect `transitionFromProps` first.\n\n      var transFromProps = {};\n      prepareShapeOrExtraTransitionFrom('shape', to, morphFrom, toElOption, transFromProps, false);\n      prepareShapeOrExtraTransitionFrom('extra', to, morphFrom, toElOption, transFromProps, false);\n      prepareTransformTransitionFrom(to, morphFrom, toElOption, transFromProps, false);\n      prepareStyleTransitionFrom(to, morphFrom, toElOption, toElOption.style, transFromProps, false);\n      applyPropsFinal(to, allPropsFinal, toElOption.style);\n\n      if (morphFrom) {\n        morphPath(morphFrom, to, elAnimationConfig);\n      }\n\n      applyTransitionFrom(to, toDataIndex, toElOption, this._seriesModel, transFromProps, false);\n    }\n  };\n\n  MorphPreparation.prototype._manyToOneForSingleTo = function ( // \"to\" must NOT be null/undefined.\n  toIdx, // May be null.\n  fromIdxStart, fromCount) {\n    var to = this._toList[toIdx];\n    var toElOption = this._toElOptionList[toIdx];\n    var allPropsFinal = this._allPropsFinalList[toIdx];\n    applyPropsFinal(to, allPropsFinal, toElOption.style);\n\n    var elAnimationConfig = this._getOrCreateMorphConfig(this._toDataIndices[toIdx]);\n\n    if (elAnimationConfig.duration && fromIdxStart != null) {\n      var combineFromList = [];\n\n      for (var fromIdx = fromIdxStart; fromIdx < fromCount; fromIdx++) {\n        combineFromList.push(this._fromList[fromIdx]);\n      }\n\n      var combineResult = combine(combineFromList, to, elAnimationConfig, copyPropsWhenDivided);\n\n      this._processResultIndividuals(combineResult, toIdx, null);\n    }\n  };\n\n  MorphPreparation.prototype._oneToManyForSingleFrom = function ( // \"to\" must NOT be null/undefined.\n  toIdxStart, toCount, // May be null\n  fromIdx) {\n    var from = fromIdx == null ? null : this._fromList[fromIdx];\n    var toList = this._toList;\n    var separateToList = [];\n\n    for (var toIdx = toIdxStart; toIdx < toCount; toIdx++) {\n      var to = toList[toIdx];\n      applyPropsFinal(to, this._allPropsFinalList[toIdx], this._toElOptionList[toIdx].style);\n      separateToList.push(to);\n    }\n\n    var elAnimationConfig = this._getOrCreateMorphConfig(this._toDataIndices[toIdxStart]);\n\n    if (elAnimationConfig.duration && from) {\n      var separateResult = separate(from, separateToList, elAnimationConfig, copyPropsWhenDivided);\n\n      this._processResultIndividuals(separateResult, toIdxStart, toCount);\n    }\n  };\n\n  MorphPreparation.prototype._processResultIndividuals = function (combineSeparateResult, toIdxStart, toCount) {\n    var isSeparate = toCount != null;\n\n    for (var i = 0; i < combineSeparateResult.count; i++) {\n      var fromIndividual = combineSeparateResult.fromIndividuals[i];\n      var toIndividual = combineSeparateResult.toIndividuals[i]; // Here it's a trick:\n      // For \"combine\" case, all of the `toIndividuals` map to the same `toIdx`.\n      // For \"separate\" case, the `toIndividuals` map to some certain segment of `_toList` accurately.\n\n      var toIdx = toIdxStart + (isSeparate ? i : 0);\n      var toElOption = this._toElOptionList[toIdx];\n      var dataIndex = this._toDataIndices[toIdx];\n      var transFromProps = {};\n      prepareTransformTransitionFrom(toIndividual, fromIndividual, toElOption, transFromProps, false);\n      prepareStyleTransitionFrom(toIndividual, fromIndividual, toElOption, toElOption.style, transFromProps, false);\n      applyTransitionFrom(toIndividual, dataIndex, toElOption, this._seriesModel, transFromProps, false);\n    }\n  };\n\n  MorphPreparation.prototype._getOrCreateMorphConfig = function (dataIndex) {\n    var morphConfigList = this._morphConfigList;\n    var config = morphConfigList[dataIndex];\n\n    if (config) {\n      return config;\n    }\n\n    var duration;\n    var easing;\n    var delay;\n    var seriesModel = this._seriesModel;\n    var transOpt = this._transOpt;\n\n    if (seriesModel.isAnimationEnabled()) {\n      // PENDING: refactor? this is the same logic as `src/util/graphic.ts#animateOrSetProps`.\n      var animationPayload = void 0;\n\n      if (seriesModel && seriesModel.ecModel) {\n        var updatePayload = seriesModel.ecModel.getUpdatePayload();\n        animationPayload = updatePayload && updatePayload.animation;\n      }\n\n      if (animationPayload) {\n        duration = animationPayload.duration || 0;\n        easing = animationPayload.easing || 'cubicOut';\n        delay = animationPayload.delay || 0;\n      } else {\n        easing = seriesModel.get('animationEasingUpdate');\n        var delayOption = seriesModel.get('animationDelayUpdate');\n        delay = isFunction(delayOption) ? delayOption(dataIndex) : delayOption;\n        var durationOption = seriesModel.get('animationDurationUpdate');\n        duration = isFunction(durationOption) ? durationOption(dataIndex) : durationOption;\n      }\n    }\n\n    config = {\n      duration: duration || 0,\n      delay: delay,\n      easing: easing,\n      dividingMethod: transOpt ? transOpt.dividingMethod : null\n    };\n    morphConfigList[dataIndex] = config;\n    return config;\n  };\n\n  MorphPreparation.prototype.reset = function (type) {\n    // `this._morphConfigList` can be kept. It only related to `dataIndex`.\n    this._type = type;\n    this._fromList.length = this._toList.length = this._toElOptionList.length = this._allPropsFinalList.length = this._toDataIndices.length = 0;\n  };\n\n  return MorphPreparation;\n}();\n\nfunction copyPropsWhenDivided(srcPath, tarPath, willClone) {\n  // Do not copy transform props.\n  // Sub paths are transfrom based on their host path.\n  // tarPath.x = srcPath.x;\n  // tarPath.y = srcPath.y;\n  // tarPath.scaleX = srcPath.scaleX;\n  // tarPath.scaleY = srcPath.scaleY;\n  // tarPath.originX = srcPath.originX;\n  // tarPath.originY = srcPath.originY;\n  // If just carry the style, will not be modifed, so do not copy.\n  tarPath.style = willClone ? clone(srcPath.style) : srcPath.style;\n  tarPath.zlevel = srcPath.zlevel;\n  tarPath.z = srcPath.z;\n  tarPath.z2 = srcPath.z2;\n}\n\nexport function install(registers) {\n  registers.registerChartView(CustomSeriesView);\n  registers.registerSeriesModel(CustomSeriesModel);\n}"]},"metadata":{},"sourceType":"module"}