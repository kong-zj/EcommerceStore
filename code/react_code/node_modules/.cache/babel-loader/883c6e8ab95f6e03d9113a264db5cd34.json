{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // Unknown Error\n\nexports.UNKNOWN_ERROR = 'UNKNOWN_ERROR'; // Not implemented\n\nexports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED'; // Missing new operator to an object\n//  - name: The name of the class\n\nexports.MISSING_NEW = 'MISSING_NEW'; // Call exception\n//  - transaction: the transaction\n//  - address?: the contract address\n//  - args?: The arguments passed into the function\n//  - method?: The Solidity method signature\n//  - errorSignature?: The EIP848 error signature\n//  - errorArgs?: The EIP848 error parameters\n//  - reason: The reason (only for EIP848 \"Error(string)\")\n\nexports.CALL_EXCEPTION = 'CALL_EXCEPTION'; // Response from a server was invalid\n//   - response: The body of the response\n//'BAD_RESPONSE',\n// Invalid argument (e.g. value is incompatible with type) to a function:\n//   - arg: The argument name that was invalid\n//   - value: The value of the argument\n\nexports.INVALID_ARGUMENT = 'INVALID_ARGUMENT'; // Missing argument to a function:\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\n\nexports.MISSING_ARGUMENT = 'MISSING_ARGUMENT'; // Too many arguments\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\n\nexports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT'; // Numeric Fault\n//   - operation: the operation being executed\n//   - fault: the reason this faulted\n\nexports.NUMERIC_FAULT = 'NUMERIC_FAULT'; // Unsupported operation\n//   - operation\n\nexports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';\nvar _permanentCensorErrors = false;\nvar _censorErrors = false; // @TODO: Enum\n\nfunction throwError(message, code, params) {\n  if (_censorErrors) {\n    throw new Error('unknown error');\n  }\n\n  if (!code) {\n    code = exports.UNKNOWN_ERROR;\n  }\n\n  if (!params) {\n    params = {};\n  }\n\n  var messageDetails = [];\n  Object.keys(params).forEach(function (key) {\n    try {\n      messageDetails.push(key + '=' + JSON.stringify(params[key]));\n    } catch (error) {\n      messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));\n    }\n  });\n  var reason = message;\n\n  if (messageDetails.length) {\n    message += ' (' + messageDetails.join(', ') + ')';\n  } // @TODO: Any??\n\n\n  var error = new Error(message);\n  error.reason = reason;\n  error.code = code;\n  Object.keys(params).forEach(function (key) {\n    error[key] = params[key];\n  });\n  throw error;\n}\n\nexports.throwError = throwError;\n\nfunction checkNew(self, kind) {\n  if (!(self instanceof kind)) {\n    throwError('missing new', exports.MISSING_NEW, {\n      name: kind.name\n    });\n  }\n}\n\nexports.checkNew = checkNew;\n\nfunction checkArgumentCount(count, expectedCount, suffix) {\n  if (!suffix) {\n    suffix = '';\n  }\n\n  if (count < expectedCount) {\n    throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, {\n      count: count,\n      expectedCount: expectedCount\n    });\n  }\n\n  if (count > expectedCount) {\n    throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, {\n      count: count,\n      expectedCount: expectedCount\n    });\n  }\n}\n\nexports.checkArgumentCount = checkArgumentCount;\n\nfunction setCensorship(censorship, permanent) {\n  if (_permanentCensorErrors) {\n    throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, {\n      operation: 'setCersorship'\n    });\n  }\n\n  _censorErrors = !!censorship;\n  _permanentCensorErrors = !!permanent;\n}\n\nexports.setCensorship = setCensorship;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/node_modules/web3-eth-abi/node_modules/ethers/utils/errors.js"],"names":["Object","defineProperty","exports","value","UNKNOWN_ERROR","NOT_IMPLEMENTED","MISSING_NEW","CALL_EXCEPTION","INVALID_ARGUMENT","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","NUMERIC_FAULT","UNSUPPORTED_OPERATION","_permanentCensorErrors","_censorErrors","throwError","message","code","params","Error","messageDetails","keys","forEach","key","push","JSON","stringify","error","toString","reason","length","join","checkNew","self","kind","name","checkArgumentCount","count","expectedCount","suffix","setCensorship","censorship","permanent","operation"],"mappings":"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","sourcesContent":["'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Unknown Error\nexports.UNKNOWN_ERROR = 'UNKNOWN_ERROR';\n// Not implemented\nexports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';\n// Missing new operator to an object\n//  - name: The name of the class\nexports.MISSING_NEW = 'MISSING_NEW';\n// Call exception\n//  - transaction: the transaction\n//  - address?: the contract address\n//  - args?: The arguments passed into the function\n//  - method?: The Solidity method signature\n//  - errorSignature?: The EIP848 error signature\n//  - errorArgs?: The EIP848 error parameters\n//  - reason: The reason (only for EIP848 \"Error(string)\")\nexports.CALL_EXCEPTION = 'CALL_EXCEPTION';\n// Response from a server was invalid\n//   - response: The body of the response\n//'BAD_RESPONSE',\n// Invalid argument (e.g. value is incompatible with type) to a function:\n//   - arg: The argument name that was invalid\n//   - value: The value of the argument\nexports.INVALID_ARGUMENT = 'INVALID_ARGUMENT';\n// Missing argument to a function:\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\nexports.MISSING_ARGUMENT = 'MISSING_ARGUMENT';\n// Too many arguments\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\nexports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT';\n// Numeric Fault\n//   - operation: the operation being executed\n//   - fault: the reason this faulted\nexports.NUMERIC_FAULT = 'NUMERIC_FAULT';\n// Unsupported operation\n//   - operation\nexports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';\nvar _permanentCensorErrors = false;\nvar _censorErrors = false;\n// @TODO: Enum\nfunction throwError(message, code, params) {\n    if (_censorErrors) {\n        throw new Error('unknown error');\n    }\n    if (!code) {\n        code = exports.UNKNOWN_ERROR;\n    }\n    if (!params) {\n        params = {};\n    }\n    var messageDetails = [];\n    Object.keys(params).forEach(function (key) {\n        try {\n            messageDetails.push(key + '=' + JSON.stringify(params[key]));\n        }\n        catch (error) {\n            messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));\n        }\n    });\n    var reason = message;\n    if (messageDetails.length) {\n        message += ' (' + messageDetails.join(', ') + ')';\n    }\n    // @TODO: Any??\n    var error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n        error[key] = params[key];\n    });\n    throw error;\n}\nexports.throwError = throwError;\nfunction checkNew(self, kind) {\n    if (!(self instanceof kind)) {\n        throwError('missing new', exports.MISSING_NEW, { name: kind.name });\n    }\n}\nexports.checkNew = checkNew;\nfunction checkArgumentCount(count, expectedCount, suffix) {\n    if (!suffix) {\n        suffix = '';\n    }\n    if (count < expectedCount) {\n        throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, { count: count, expectedCount: expectedCount });\n    }\n    if (count > expectedCount) {\n        throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, { count: count, expectedCount: expectedCount });\n    }\n}\nexports.checkArgumentCount = checkArgumentCount;\nfunction setCensorship(censorship, permanent) {\n    if (_permanentCensorErrors) {\n        throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, { operation: 'setCersorship' });\n    }\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n}\nexports.setCensorship = setCensorship;\n"]},"metadata":{},"sourceType":"script"}