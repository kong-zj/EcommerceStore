{"ast":null,"code":"import \"antd/es/descriptions/style\";\nimport _Descriptions from \"antd/es/descriptions\";\nvar _jsxFileName = \"/home/kzj/project/finalize/final/code/react_code/src/pages/Market/Shopping/index.jsx\";\nimport React, { Component } from 'react';\nimport cookie from 'react-cookies';\nimport renderGoods from '../../../utils/renderGoods'; //商品列表组件，需要传数据进去\n\nimport GoodsList from '../../../components/GoodsList'; //从IPFS读取\n\nimport ipfsReadUrlBefore from '../../../config/ipfsReadUrl';\nimport ipfsAddAndCatConfig from '../../../config/ipfsAddAndCat';\nimport ipfsAPI from 'ipfs-api'; //不需要接入合约\n//价格格式化\n\nimport handlePrice from '../../../utils/handlePrice'; //ipfs实例\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ipfs = ipfsAPI({\n  host: ipfsAddAndCatConfig.host,\n  port: ipfsAddAndCatConfig.port,\n  protocol: ipfsAddAndCatConfig.protocol\n}); //从数据库拿商品信息\n\nclass Shopping extends Component {\n  // state = {\n  // productInSell: [],\n  // productInReveal: [],\n  // productInFinalize: []\n  // }\n  constructor(props) {\n    super(props);\n\n    this.getGoodsList = async process => {\n      //process 可能的值为\n      //\"open\"\n      //\"sold\"\n      //New，从后台的mongoDB拿数据\n      let productInProcess = await renderGoods({\n        goodsProcess: process\n      });\n      console.log(\"getGoodsList, process = \" + process + \" 请求到的数据为 : \");\n      console.dir(productInProcess.data); //从数据库里拿到的信息是这样的 productArray[0]\n      //结构为\n      // _id: ObjectId(\"62449a3b32aff27585ce7b15\"),\n      // name: '商品名称2111',\n      // category: '艺术品,画作',\n      // ipfsImageHashArray: [ 'QmcSe6Vt9SfvXuz1gFbtb8gnvYmL4bp4oYVdTtzyFHvVnH' ],\n      // ipfsDescHash: 'QmewtY21Ufyqa166AWXrSC3Y3FMqKMhpRRPH2tqTNMUALE',\n      // price: 1000000000000000000,\n      // shippingTime: 3,\n      // productStatus: 0,\n      // inStockNum: 111,\n      // originPlace: [ 1, 72 ],\n      // __v: 0\n      //要传给 GoodsList 用来显示的信息是这样的\n      //blockchainId (int)\n      //name (String)\n      //category (String)\n      //ipfsDescHash (String)\n      //ipfsImageHashArray (String数组)\n      //price (String) 大于1ETH 用 ETH 做单位，小于时用 wei\n      //productStatus (int) 是否售空\n      //shippingTime (int) 发货时效，单位是天\n      //inStockNum (int) 库存\n      //productAddress (string) 发货地\n      // let arrayLength = productInProcess.data.length;\n\n      let array = await productInProcess.data.map(async (item, index) => {\n        //item 是数组的大元素\n        //价格使用合适单位\n        // priceString 是字符串\n        let priceString = handlePrice(item.price); //注意异步的执行先后顺序问题\n        // 将商品介绍从 ipfs 下载，存为descString\n\n        let descString = \"商品介绍占位\";\n        await ipfs.cat(item.ipfsDescHash).then(file => {\n          descString = file.toString();\n        }); //只要第一张图片\n\n        let ipfsFirstImageHash = item.ipfsImageHashArray[0];\n        return {\n          //key从1开始\n          key: index + 1,\n          blockchainId: item.blockchainId,\n          //用于用户点击时，用区块链中的ID查询商品详细信息\n          name: item.name,\n          category: item.category,\n          //过长就截断\n          descString: descString.length > 150 ? descString.slice(0, 150) + \"......\" : descString,\n          imageUrl: ipfsReadUrlBefore + ipfsFirstImageHash,\n          productCondition: item.condition === 0 ? \"全新\" : \"二手\",\n          price: priceString\n        };\n      });\n      console.log(\"格式化后, 即将传入 GoodsList 的数据为 : \");\n      console.log(array);\n      return array;\n    };\n\n    this.componentDidMount = () => {\n      console.log(\"生成Shopping模块\");\n    };\n  } //注意同步，不然还没得到结果，就把null返回了\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(_Descriptions, {\n        title: \"\\u6B63\\u5728\\u51FA\\u552E\",\n        bordered: true,\n        column: {\n          xxl: 4,\n          xl: 3,\n          lg: 3,\n          md: 3,\n          sm: 2,\n          xs: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GoodsList, {\n        productArray: this.getGoodsList(\"open\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(_Descriptions, {\n        title: \"\\u5DF2\\u552E\\u7A7A\",\n        bordered: true,\n        column: {\n          xxl: 4,\n          xl: 3,\n          lg: 3,\n          md: 3,\n          sm: 2,\n          xs: 1\n        },\n        style: {\n          marginTop: '50px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GoodsList, {\n        productArray: this.getGoodsList(\"sold\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Shopping;","map":{"version":3,"sources":["/home/kzj/project/finalize/final/code/react_code/src/pages/Market/Shopping/index.jsx"],"names":["React","Component","cookie","renderGoods","GoodsList","ipfsReadUrlBefore","ipfsAddAndCatConfig","ipfsAPI","handlePrice","ipfs","host","port","protocol","Shopping","constructor","props","getGoodsList","process","productInProcess","goodsProcess","console","log","dir","data","array","map","item","index","priceString","price","descString","cat","ipfsDescHash","then","file","toString","ipfsFirstImageHash","ipfsImageHashArray","key","blockchainId","name","category","length","slice","imageUrl","productCondition","condition","componentDidMount","render","xxl","xl","lg","md","sm","xs","marginTop"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport cookie from 'react-cookies'\nimport {Descriptions, message, Spin, Table, Tag} from \"antd\";\nimport renderGoods from '../../../utils/renderGoods';\n\n//商品列表组件，需要传数据进去\nimport GoodsList from '../../../components/GoodsList';\n\n//从IPFS读取\nimport ipfsReadUrlBefore from '../../../config/ipfsReadUrl';\nimport ipfsAddAndCatConfig from '../../../config/ipfsAddAndCat';\nimport ipfsAPI from 'ipfs-api';\n\n//不需要接入合约\n\n//价格格式化\nimport handlePrice from '../../../utils/handlePrice';\n\n//ipfs实例\nconst ipfs = ipfsAPI({ host: ipfsAddAndCatConfig.host, port: ipfsAddAndCatConfig.port, protocol: ipfsAddAndCatConfig.protocol });\n\n//从数据库拿商品信息\nclass Shopping extends Component {\n\n    // state = {\n        // productInSell: [],\n        // productInReveal: [],\n        // productInFinalize: []\n    // }\n\n    constructor (props) {\n        super(props);\n    }\n\n\n    //注意同步，不然还没得到结果，就把null返回了\n    getGoodsList = async(process) => {\n        //process 可能的值为\n        //\"open\"\n        //\"sold\"\n\n        \n\n        //New，从后台的mongoDB拿数据\n        let productInProcess = await renderGoods({ goodsProcess: process });\n        console.log(\"getGoodsList, process = \" + process + \" 请求到的数据为 : \");\n        console.dir(productInProcess.data);\n\n        //从数据库里拿到的信息是这样的 productArray[0]\n        //结构为\n        // _id: ObjectId(\"62449a3b32aff27585ce7b15\"),\n        // name: '商品名称2111',\n        // category: '艺术品,画作',\n        // ipfsImageHashArray: [ 'QmcSe6Vt9SfvXuz1gFbtb8gnvYmL4bp4oYVdTtzyFHvVnH' ],\n        // ipfsDescHash: 'QmewtY21Ufyqa166AWXrSC3Y3FMqKMhpRRPH2tqTNMUALE',\n        // price: 1000000000000000000,\n        // shippingTime: 3,\n        // productStatus: 0,\n        // inStockNum: 111,\n        // originPlace: [ 1, 72 ],\n        // __v: 0\n\n\n        //要传给 GoodsList 用来显示的信息是这样的\n        //blockchainId (int)\n        //name (String)\n        //category (String)\n        //ipfsDescHash (String)\n        //ipfsImageHashArray (String数组)\n        //price (String) 大于1ETH 用 ETH 做单位，小于时用 wei\n        //productStatus (int) 是否售空\n        //shippingTime (int) 发货时效，单位是天\n        //inStockNum (int) 库存\n        //productAddress (string) 发货地\n\n        // let arrayLength = productInProcess.data.length;\n\n        \n        let array = await productInProcess.data.map(async (item, index) => {\n            //item 是数组的大元素\n\n            //价格使用合适单位\n            // priceString 是字符串\n            let priceString = handlePrice(item.price);\n\n            //注意异步的执行先后顺序问题\n            // 将商品介绍从 ipfs 下载，存为descString\n            let descString = \"商品介绍占位\";\n            await ipfs.cat(item.ipfsDescHash).then(file => {\n                descString = file.toString();\n            })\n\n            //只要第一张图片\n            let ipfsFirstImageHash = item.ipfsImageHashArray[0];\n                    \n            return {\n                //key从1开始\n                key: index + 1,\n                blockchainId : item.blockchainId, //用于用户点击时，用区块链中的ID查询商品详细信息\n                name : item.name,\n                category : item.category,\n                //过长就截断\n                descString : (descString.length > 150) ? descString.slice(0,150)+\"......\"  : descString,\n                imageUrl : ipfsReadUrlBefore + ipfsFirstImageHash,\n                productCondition : (item.condition === 0) ? \"全新\" : \"二手\",\n                price : priceString,\n            }\n        });\n\n        console.log(\"格式化后, 即将传入 GoodsList 的数据为 : \");\n        console.log(array);\n\n        return array;\n    }\n\n    //注意同步，不然还没得到结果，就把null返回了\n    componentDidMount  = () => {\n        console.log(\"生成Shopping模块\");\n    }\n\n\n\n    \n    render () {\n\n        return (\n\n            <div>\n                <Descriptions\n                    title=\"正在出售\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                />\n                <GoodsList productArray={this.getGoodsList(\"open\")}></GoodsList>\n\n                <Descriptions\n                    title=\"已售空\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                    style={{marginTop:'50px'}}\n                />\n                <GoodsList productArray={this.getGoodsList(\"sold\")}></GoodsList>\n\n            </div>\n        );\n    }\n}\n\nexport default Shopping;\n"]},"metadata":{},"sourceType":"module"}