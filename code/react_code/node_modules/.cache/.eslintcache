[{"/home/kzj/project/finalize/final/code/react_code/src/index.js":"1","/home/kzj/project/finalize/final/code/react_code/src/App.js":"2","/home/kzj/project/finalize/final/code/react_code/src/reportWebVitals.js":"3","/home/kzj/project/finalize/final/code/react_code/src/serviceWorker.js":"4","/home/kzj/project/finalize/final/code/react_code/src/components/Header/index.jsx":"5","/home/kzj/project/finalize/final/code/react_code/src/pages/Index/index.jsx":"6","/home/kzj/project/finalize/final/code/react_code/src/utils/getWeb3.js":"7","/home/kzj/project/finalize/final/code/react_code/src/components/Footer/index.jsx":"8","/home/kzj/project/finalize/final/code/react_code/src/components/LeftMenu/index.jsx":"9","/home/kzj/project/finalize/final/code/react_code/src/components/OnlineChart/index.jsx":"10","/home/kzj/project/finalize/final/code/react_code/src/components/CityChart/index.jsx":"11","/home/kzj/project/finalize/final/code/react_code/src/utils/getEcommerceStore.js":"12","/home/kzj/project/finalize/final/code/react_code/src/utils/timeDuration.js":"13","/home/kzj/project/finalize/final/code/react_code/src/pages/UserOrAccount/PersonalInfo/index.jsx":"14","/home/kzj/project/finalize/final/code/react_code/src/pages/Market/AuctionInto/index.jsx":"15","/home/kzj/project/finalize/final/code/react_code/src/pages/UserOrAccount/AlterPwd/index.jsx":"16","/home/kzj/project/finalize/final/code/react_code/src/pages/Publish/Selling/index.jsx":"17","/home/kzj/project/finalize/final/code/react_code/src/pages/Market/Shopping/index.jsx":"18","/home/kzj/project/finalize/final/code/react_code/src/pages/Publish/AuctionOut/index.jsx":"19","/home/kzj/project/finalize/final/code/react_code/src/pages/UserOrAccount/Login/index.jsx":"20","/home/kzj/project/finalize/final/code/react_code/src/pages/UserOrAccount/Register/index.jsx":"21","/home/kzj/project/finalize/final/code/react_code/src/pages/UserOrAccount/ForgetPwd/index.jsx":"22","/home/kzj/project/finalize/final/code/react_code/src/utils/saveAccountString.js":"23","/home/kzj/project/finalize/final/code/react_code/src/static/ProductClass.js":"24","/home/kzj/project/finalize/final/code/react_code/src/static/ProductOrigin.js":"25","/home/kzj/project/finalize/final/code/react_code/src/utils/renderProducts.js":"26","/home/kzj/project/finalize/final/code/react_code/src/components/ProductList/index.jsx":"27","/home/kzj/project/finalize/final/code/react_code/src/config/ipfsAddAndCat.js":"28","/home/kzj/project/finalize/final/code/react_code/src/config/ipfsReadUrl.js":"29","/home/kzj/project/finalize/final/code/react_code/src/pages/Market/ProductInfo/index.jsx":"30","/home/kzj/project/finalize/final/code/react_code/src/utils/handlePrice.js":"31","/home/kzj/project/finalize/final/code/react_code/src/utils/handleTimeString.js":"32","/home/kzj/project/finalize/final/code/react_code/src/pages/HelpInfo/index.jsx":"33","/home/kzj/project/finalize/final/code/react_code/src/components/Notification/index.jsx":"34","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/Bid/index.jsx":"35","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/Reveal/index.jsx":"36","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/Finalize/index.jsx":"37","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/ReleaseFunds/index.jsx":"38","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/RefundFunds/index.jsx":"39","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/HighestBidderInfo/index.jsx":"40","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/EscrowInfo/index.jsx":"41","/home/kzj/project/finalize/final/code/react_code/src/pages/TotalChart/index.jsx":"42","/home/kzj/project/finalize/final/code/react_code/src/components/ProductsChart/index.jsx":"43","/home/kzj/project/finalize/final/code/react_code/src/utils/getShopping.js":"44","/home/kzj/project/finalize/final/code/react_code/src/utils/renderGoods.js":"45","/home/kzj/project/finalize/final/code/react_code/src/components/GoodsList/index.jsx":"46","/home/kzj/project/finalize/final/code/react_code/src/pages/Market/GoodsInfo/index.jsx":"47","/home/kzj/project/finalize/final/code/react_code/src/utils/handleAddress.js":"48","/home/kzj/project/finalize/final/code/react_code/src/components/Tracing/index.jsx":"49","/home/kzj/project/finalize/final/code/react_code/src/utils/getTracing.js":"50","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/Resell/index.jsx":"51","/home/kzj/project/finalize/final/code/react_code/src/utils/renderStatistics.js":"52","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/Buy/index.jsx":"53","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/Sell/index.jsx":"54"},{"size":806,"mtime":1646485512141,"results":"55","hashOfConfig":"56"},{"size":1641,"mtime":1646831188551,"results":"57","hashOfConfig":"56"},{"size":443,"mtime":1646463156071,"results":"58","hashOfConfig":"56"},{"size":5774,"mtime":1646463175221,"results":"59","hashOfConfig":"56"},{"size":629,"mtime":1646394950298,"results":"60","hashOfConfig":"56"},{"size":8247,"mtime":1652708107769,"results":"61","hashOfConfig":"56"},{"size":1451,"mtime":1646811905162,"results":"62","hashOfConfig":"56"},{"size":340,"mtime":1646395354798,"results":"63","hashOfConfig":"56"},{"size":6183,"mtime":1652709134189,"results":"64","hashOfConfig":"56"},{"size":4780,"mtime":1646490696161,"results":"65","hashOfConfig":"56"},{"size":2431,"mtime":1646387917858,"results":"66","hashOfConfig":"56"},{"size":1089,"mtime":1646815264461,"results":"67","hashOfConfig":"56"},{"size":1263,"mtime":1647680983457,"results":"68","hashOfConfig":"56"},{"size":9344,"mtime":1646911880862,"results":"69","hashOfConfig":"56"},{"size":8433,"mtime":1647689793377,"results":"70","hashOfConfig":"56"},{"size":15788,"mtime":1646577547229,"results":"71","hashOfConfig":"56"},{"size":18603,"mtime":1648662599323,"results":"72","hashOfConfig":"56"},{"size":5218,"mtime":1652856105624,"results":"73","hashOfConfig":"56"},{"size":19489,"mtime":1648660056393,"results":"74","hashOfConfig":"56"},{"size":5908,"mtime":1646642625973,"results":"75","hashOfConfig":"56"},{"size":10742,"mtime":1646576572159,"results":"76","hashOfConfig":"56"},{"size":694,"mtime":1646387917858,"results":"77","hashOfConfig":"56"},{"size":1168,"mtime":1651385486635,"results":"78","hashOfConfig":"56"},{"size":3382,"mtime":1651749327300,"results":"79","hashOfConfig":"56"},{"size":18705,"mtime":1648713055603,"results":"80","hashOfConfig":"56"},{"size":781,"mtime":1647689518317,"results":"81","hashOfConfig":"56"},{"size":4670,"mtime":1648712109823,"results":"82","hashOfConfig":"56"},{"size":134,"mtime":1646907139162,"results":"83","hashOfConfig":"56"},{"size":307,"mtime":1646907141382,"results":"84","hashOfConfig":"56"},{"size":35219,"mtime":1652854264124,"results":"85","hashOfConfig":"56"},{"size":431,"mtime":1648663978083,"results":"86","hashOfConfig":"56"},{"size":1004,"mtime":1647680842577,"results":"87","hashOfConfig":"56"},{"size":1266,"mtime":1652708772839,"results":"88","hashOfConfig":"56"},{"size":291,"mtime":1647436545635,"results":"89","hashOfConfig":"56"},{"size":8756,"mtime":1647694070347,"results":"90","hashOfConfig":"56"},{"size":7126,"mtime":1651141601988,"results":"91","hashOfConfig":"56"},{"size":9454,"mtime":1651296450000,"results":"92","hashOfConfig":"56"},{"size":5824,"mtime":1651293222200,"results":"93","hashOfConfig":"56"},{"size":5687,"mtime":1651293183110,"results":"94","hashOfConfig":"56"},{"size":3371,"mtime":1651216886396,"results":"95","hashOfConfig":"56"},{"size":5204,"mtime":1651211484466,"results":"96","hashOfConfig":"56"},{"size":3706,"mtime":1651604100452,"results":"97","hashOfConfig":"56"},{"size":3378,"mtime":1651605042122,"results":"98","hashOfConfig":"56"},{"size":463,"mtime":1648660251683,"results":"99","hashOfConfig":"56"},{"size":763,"mtime":1648663433703,"results":"100","hashOfConfig":"56"},{"size":4502,"mtime":1648714769303,"results":"101","hashOfConfig":"56"},{"size":21181,"mtime":1652854227864,"results":"102","hashOfConfig":"56"},{"size":744,"mtime":1648714487963,"results":"103","hashOfConfig":"56"},{"size":5154,"mtime":1651154811748,"results":"104","hashOfConfig":"56"},{"size":457,"mtime":1650667075526,"results":"105","hashOfConfig":"56"},{"size":7835,"mtime":1651052482562,"results":"106","hashOfConfig":"56"},{"size":802,"mtime":1651592915302,"results":"107","hashOfConfig":"56"},{"size":5730,"mtime":1652721491629,"results":"108","hashOfConfig":"56"},{"size":5873,"mtime":1652865394204,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"1umkf8j",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"112"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"112"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"112"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"112"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"112"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"112"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"112"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"112"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"112"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"112"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"112"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"112"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"112"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"112"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"112"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"112"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"112"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"112"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"112"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"112"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243"},"/home/kzj/project/finalize/final/code/react_code/src/index.js",[],["244","245"],"/home/kzj/project/finalize/final/code/react_code/src/App.js",[],"/home/kzj/project/finalize/final/code/react_code/src/reportWebVitals.js",[],"/home/kzj/project/finalize/final/code/react_code/src/serviceWorker.js",[],"/home/kzj/project/finalize/final/code/react_code/src/components/Header/index.jsx",[],"/home/kzj/project/finalize/final/code/react_code/src/pages/Index/index.jsx",[],"/home/kzj/project/finalize/final/code/react_code/src/utils/getWeb3.js",[],"/home/kzj/project/finalize/final/code/react_code/src/components/Footer/index.jsx",[],"/home/kzj/project/finalize/final/code/react_code/src/components/LeftMenu/index.jsx",["246"],"import React, {Component} from \"react\";\nimport { Menu, Layout, message } from 'antd';\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, UploadOutlined, AppstoreOutlined } from '@ant-design/icons';\nimport {Link} from \"react-router-dom\";\nimport axios from \"axios\";\nimport cookie from \"react-cookies\";\n//接入web3\nimport getWeb3 from \"../../utils/getWeb3\";\nimport getEcommerceStore from \"../../utils/getEcommerceStore\";\n\nimport saveAccountString from \"../../utils/saveAccountString\";\n\nconst { Sider } = Layout;\nconst { SubMenu } = Menu;\n\n\n\nclass LeftMenu extends Component {\n\n    state = {\n        username:cookie.load('username'),\n        //web3 与 truffleContract 不能作为参数传递到其他路由\n        //BUG\n        web3 : null,\n        truffleContract : null\n    }\n\n    constructor (props) {\n        super (props);\n        this.changePage = this.changePage.bind(this);\n    }\n\n    changePage = page =>{\n        console.log(\"从LeftMenu到主页的反向数据流 changePage，参数为 : \" + page);\n        //数据向上传递\n        this.props.changePag(page);\n    }\n\n\n    componentDidMount () {\n        console.log(\"生成左侧边栏\");\n        //将 getBlockChainInfo 推迟到 LeftMenu 中\n        if(this.getBlockChainInfo()){\n            console.log(\"成功获得地址信息\");\n        }else{\n            console.log(\"获得地址信息失败\");\n        }\n    }\n\n    //拿取 web3 实例\n    getBlockChainInfo = async() => {\n        try {\n            //使用 await，等待上一步的结果\n            // Get network provider and web3 instance. \n            //动态获取\n            const web3 = await getWeb3();\n            console.log(\"运行 getWeb3() 成功\");\n\n            // Use web3 to get the user's accounts.\n            let accounts = await web3.eth.getAccounts();\n            //保存用户地址到数据库\n            saveAccountString(this.state.username, accounts);\n\n            // Get the contract instance.\n            const networkId = await web3.eth.net.getId();\n            console.log(\"当前 networkId 为: \" + networkId);\n\n            //由truffle生成合约实例\n            //动态获取\n            const EcommerceStore = await getEcommerceStore(web3);\n\n            //不能保存在cookie里，格式不符合\n            // cookie.save('web3', web3, {path:'/'});\n            // cookie.save('truffleContract', EcommerceStore, {path:'/'});\n            //保存在 state 里，传给 render 中包含的模块用 props 调用\n            this.setState({\n                web3: web3,\n                currentContract:EcommerceStore\n            });\n\n            console.log(\"用户名 : \"+this.state.username);\n            console.log(\"LeftMenu 的 web3 : \");\n            console.dir(this.state.web3);\n            console.log(\"LeftMenu 的当前 EcommerceStore 为: \");\n            console.dir(this.state.currentContract);\n            message.success(\"接入web3成功\", 2);\n            return true;\n  \n          } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n              `[ERROR]接入web3失败.`,\n            );\n            console.error(error);\n            return false;\n          }\n    }\n\n    \n    render () {\n        return (\n            <Sider width={200} className=\"site-layout-background\">\n                <Menu\n                    mode=\"inline\"\n                    defaultSelectedKeys={['1']}\n                    defaultOpenKeys={['sub1']}\n                    style={{ height: '100%', borderRight: 0 }}\n                    theme={'light'}\n                >\n                    <Menu.Item key=\"1\" icon={<HomeOutlined />} onClick={e => this.changePage(\"\")}><Link to={{pathname:'/index'}}>首页</Link></Menu.Item>\n                    <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"用户\">\n                        <Menu.Item key=\"2\" onClick={e => this.changePage(\"地址管理\")}><Link to={{pathname:'/index/personalInfo'}}>地址管理</Link></Menu.Item>\n                        <Menu.Item key=\"3\" onClick={e => this.changePage(\"修改密码\")}><Link to={{pathname:'/index/alterPwd'}}>修改密码</Link></Menu.Item>\n                    </SubMenu>\n                    <SubMenu key=\"sub2\" icon={<AppstoreOutlined />} title=\"市场\">\n                        <Menu.Item key=\"4\" onClick={e => this.changePage(\"购物\")}><Link to={{pathname:'/index/shopping'}}>购物</Link></Menu.Item>\n                        <Menu.Item key=\"5\" onClick={e => this.changePage(\"拍卖\")}><Link to={{pathname:'/index/auctionInto'}}>拍卖</Link></Menu.Item>\n                    </SubMenu>\n                    <SubMenu key=\"sub5\" icon={<FileSearchOutlined />} title=\"查询\">\n                        <Menu.Item key=\"13\" onClick={e => this.changePage(\"普通商品\")}><Link to={{pathname:'/index/goodsInfo'}}>普通商品</Link></Menu.Item>\n                        <Menu.Item key=\"12\" onClick={e => this.changePage(\"拍卖商品\")}><Link to={{pathname:'/index/productInfo'}}>拍卖商品</Link></Menu.Item>\n                    </SubMenu>\n                    <SubMenu key=\"sub3\" icon={<UploadOutlined />} title=\"发布\">\n                        <Menu.Item key=\"6\" onClick={e => this.changePage(\"出售\")}><Link to={{pathname:'/index/selling'}}>出售</Link></Menu.Item>\n                        <Menu.Item key=\"7\" onClick={e => this.changePage(\"拍卖\")}><Link to={{pathname:'/index/auctionOut'}}>拍卖</Link></Menu.Item>\n                    </SubMenu>\n                    {/* <SubMenu key=\"sub4\" icon={<UserOutlined />} title=\"溯源\">\n                        <Menu.Item key=\"8\" onClick={e => this.changePage(\"信息上链\")}><Link to={{pathname:'/index/uploadInfo'}}>信息上链</Link></Menu.Item>\n                        <Menu.Item key=\"9\" onClick={e => this.changePage(\"追踪溯源\")}><Link to={{pathname:'/index/downloadInfo'}}>追踪溯源</Link></Menu.Item>\n                    </SubMenu> */}\n                    <Menu.Item key=\"10\" icon={<LaptopOutlined />} onClick={e => this.changePage(\"帮助\")}><Link to={{pathname:'/index/helpInfo'}}>帮助</Link></Menu.Item>\n                </Menu>\n            </Sider>\n        );\n    }\n}\n\nexport default LeftMenu;\n","/home/kzj/project/finalize/final/code/react_code/src/components/OnlineChart/index.jsx",[],["247","248"],"/home/kzj/project/finalize/final/code/react_code/src/components/CityChart/index.jsx",[],"/home/kzj/project/finalize/final/code/react_code/src/utils/getEcommerceStore.js",[],"/home/kzj/project/finalize/final/code/react_code/src/utils/timeDuration.js",["249"],"//将以毫秒为单位的时间段长度，转化为易于理解的字符串\n\n\nfunction simpleDuration(duration) {\n    // if (type === 's') {\n    //     duration = duration * 1000;\n    // }\n\n    if (duration < 0) {\n        return \"0秒\";\n    }\n    //参数为正\n    else {\n        let str = '';\n        let days = '',\n            hours = '',\n            minutes = '',\n            seconds = '';\n        let day = 24 * 60 * 60 * 1000,\n            hour = 60 * 60 * 1000,\n            minute = 60 * 1000,\n            second = 1000;\n        if (duration >= day) {\n            days = Math.floor(duration / day) + '天';\n            hours = Math.floor(duration % day / hour) + '小时';\n        } else if (duration >= hour && duration < day) {\n            hours = Math.floor(duration / hour) + '小时';\n            minutes = Math.floor(duration % hour / minute) + '分钟';\n        } else if (duration > minute && duration < hour) {\n            minutes = Math.floor(duration / minute) + '分钟';\n            seconds = Math.floor(duration % minute / second) + '秒';\n        } else if (duration <= minute) {\n            seconds = Math.floor(duration / second) + '秒';\n        }\n        return days + hours + minutes + seconds;\n    }\n\n}\n\nexport default simpleDuration;","/home/kzj/project/finalize/final/code/react_code/src/pages/UserOrAccount/PersonalInfo/index.jsx",["250","251","252"],"import React, {Component} from 'react';\nimport {Descriptions, message, Button} from 'antd';\nimport axios from \"axios\";\nimport cookie from \"react-cookies\";\nimport { Table, Tag } from 'antd';\nimport {Link} from \"react-router-dom\";\nimport timeDuration from \"../../../utils/timeDuration\";\nimport moment from 'moment';\n\n\nclass PersonalInfo extends Component {\n\n    state = {\n        username:cookie.load('username'),\n        email:cookie.load('email'),\n        accountAndLastTimeArray: [],\n        //记录被选中的地址\n        //selectedRowKeys 中的索引下标对应 accountAndLastTimeArray 中的key值，但比index大1，注意拿数据时是用index拿的\n        selectedRowKeys: [], \n        //删除操作进行中\n        loading: false\n        }\n    columns = [\n        // {\n        //     title: '设备ID',\n        //     dataIndex: 'deviceID',\n        //     key: 'id',\n        //     render: text => <Link to={{pathname:'/index/editDevice', state:{deviceID:text}}} >{text}</Link>,\n        // },\n        {\n            title: '地址',\n            dataIndex: 'accountString',\n            key: 'accountString',\n        },\n        {\n            title: '最后上线时间',\n            dataIndex: 'lastTime',\n            key: 'lastTime',\n        },\n        {\n            title: '状态',\n            key: 'accountStatus',\n            dataIndex: 'accountStatus',\n            render: tag => <Tag color={tag === 0 ? 'red' : 'green'} key={tag}>{tag === 0 ? '非活跃' : '活跃'}</Tag>\n        }\n    ];\n\n    \n    //数据库操作和清空待操作的索引，有先后关系，用同步，避免异步导致bug\n    deleteAccount = async() => {\n        this.setState({ loading: true });\n        //判断deleteOne 还是 deleteAll\n        const allNumber = this.state.accountAndLastTimeArray.length;\n        const deleteNumber = this.state.selectedRowKeys.length;\n        console.log(\"该用户总地址数为 : \" + allNumber);\n        console.log(\"用户要删除的地址数为 : \" + deleteNumber);\n        const isAll = (allNumber === deleteNumber) ? true : false;\n        //记录数据库是否有变化\n        let isChange = false;\n        \n        if(isAll) {\n            //删除全部\n            await axios.post(\"/account/deleteAll\", {\n                username:this.state.username\n            }).then(response => {\n                const data =  response.data;\n                if(data.status === \"success\"){\n                    isChange = true;\n                    console.log(\"删除该用户所有曾用地址成功\");\n                    message.success(\"删除成功\");\n                }else{\n                    console.log(\"删除该用户所有曾用地址出错\");\n                    message.error(\"删除失败\");\n                }\n            }).catch( err => {\n                console.log(\"数据库操作失败, ERR : \" + err);\n                message.error(\"接入数据库失败\");\n            })\n\n        }else{\n            //一个一个删\n            let selectIndex;\n            let isSuccess = true;\n            //用这种方法遍历出的值总是从0递增，不满足需要\n            // for(accountKey in this.state.selectedRowKeys) {\n            for(selectIndex = 0; selectIndex < deleteNumber; selectIndex += 1) {\n                let accountIndex = this.state.selectedRowKeys[selectIndex] -1;\n                let accountStringWillDelete = this.state.accountAndLastTimeArray[accountIndex].accountString;\n                console.log(\"正在删除 key = \" + (accountIndex+1) + \", account = \" + accountStringWillDelete);\n\n                await axios.post(\"/account/deleteOne\", {\n                    username: this.state.username,\n                    accountString: accountStringWillDelete\n                }).then(response => {\n                    const data =  response.data;\n                    if(data.status === \"success\"){\n                        isChange = true;\n                        console.log(\"删除该用户的一个地址成功\");\n                    }else{\n                        console.log(\"删除该用户的一个地址出错\");\n                        isSuccess = false;\n                    }\n                }).catch( err => {\n                    console.log(\"数据库操作失败, ERR : \" + err);\n                    isSuccess = false;\n                })\n            }\n\n            //message 显示成功或失败\n            if(isSuccess){\n                message.success(\"删除成功\");\n            }else{\n                message.error(\"删除失败或接入数据库失败\");\n            }\n        }\n\n        //如果删除成功，数据库发生变化，别忘了更新表格\n        if(isChange){\n            this.componentDidMount();\n        }\n        \n        //注意 selectedRowKeys 里保存的数据，在数据库操作完成后，才能清空，以为异步执行\n        //要把异步操作转化为顺序操作\n        setTimeout(async () => {\n          await this.setState({\n            selectedRowKeys: [],\n            loading: false,\n          });\n        }, 1000);\n\n    };\n\n    onSelectChange = selectedRowKeys => {\n        console.log('选中项目的编号 : ', selectedRowKeys);\n        this.setState({ selectedRowKeys });\n    };\n\n    //accountAndLastTimeArray 的数据在 componentDidMount 格式化好后，直接传入 render\n    componentDidMount () {\n        const deleteSuccess = cookie.load('deleteSuccess');\n        if(deleteSuccess !== undefined){\n            cookie.remove('deleteSuccess', {path:'/'});\n            message.success('删除地址成功',2);\n        }\n        console.log(\"向后端发起获取所有曾用地址的请求\");\n        axios.post(\"/account/showAll\", {\n            username:this.state.username\n        }).then(response => {\n            const data =  response.data;\n            if(data.status === \"success\"){\n                console.log(\"获取该用户所有曾用地址成功\");\n                //data.accountAndLastTime 是外层是数组，每个数组元素是字典类型\n                //map 方法，数组映射\n                let array = data.accountAndLastTime.map((item, index) => {\n                    //计算时间差，判断是否活跃\n                    //注意mysql返回的 timestamp 与js中的 Date 的区别，以及相互转换\n                    let timeDifference = new Date() - new Date(item.lastTime);\n                    console.log(\"这个日期距离现在已经 \" + timeDuration(timeDifference));\n                    //小于一天时间的是活跃账户\n                    let tag = ( timeDifference> 24*60*60*1000) ? true : false;\n                    return {\n                        //key从1开始\n                        key: index + 1,\n                        accountString: item.accountString,\n                        accountStatus: tag ? 0:1,\n                        //moment库，格式化时间\n                        lastTime: moment(item.lastTime).format('yy年M月D日, h:mm:ss a')\n                    }\n                });\n                console.log(\"map映射后的要放到列表中的数据 array 为 : \");\n                console.dir(array);\n                this.setState({accountAndLastTimeArray:array});\n\n            }\n            else{\n                console.log(\"获取该用户所有曾用地址出错\");\n                message.warning (\"获取地址信息出错\").then (r  => console.log(r));\n            }\n        }).catch( err => {\n            console.log(\"发起获取所有曾用地址的请求失败, ERR : \" + err);\n        });\n    }\n\n    //第一次渲染时，数据还没处理好\n    //等待数据处理好后，马上会自动重新渲染\n    //数据像水一样灌进来\n    render () {\n        const {username, email, accountAndLastTimeArray, loading, selectedRowKeys} = this.state;\n        const rowSelection = {\n            selectedRowKeys,\n            onChange: this.onSelectChange,\n        };\n        const hasSelected = selectedRowKeys.length > 0;\n        return (\n            <div>\n                <Descriptions\n                    title=\"个人信息\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                >\n                    <Descriptions.Item label=\"用户名\">{username}</Descriptions.Item>\n                    <Descriptions.Item label=\"邮箱\">{email}</Descriptions.Item>\n                </Descriptions>\n                <Descriptions\n                    title=\"曾用地址信息\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                    style={{marginTop:'30px'}}\n                />\n                \n\n                <div>\n                    <Table rowSelection={rowSelection} columns={this.columns} dataSource={accountAndLastTimeArray} />\n                    <div style={{ marginBottom: 16 }}>\n                        <Button type=\"primary\" onClick={this.deleteAccount} disabled={!hasSelected} loading={loading}>\n                            删除\n                        </Button>\n                        <span style={{ marginLeft: 8 }}>\n                            {hasSelected ? `选中 ${selectedRowKeys.length} 项` : ''}\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PersonalInfo;\n\n\n\n","/home/kzj/project/finalize/final/code/react_code/src/pages/Market/AuctionInto/index.jsx",["253","254","255","256","257","258"],"import React, {Component} from 'react';\nimport cookie from 'react-cookies'\nimport {Descriptions, message, Spin, Table, Tag} from \"antd\";\nimport renderProducts from '../../../utils/renderProducts';\n\n//商品列表组件，需要传数据进去\nimport ProductList from '../../../components/ProductList';\n\n//从IPFS读取\nimport ipfsReadUrlBefore from '../../../config/ipfsReadUrl';\nimport ipfsAddAndCatConfig from '../../../config/ipfsAddAndCat';\nimport ipfsAPI from 'ipfs-api';\n\n//不需要接入合约\n\n//价格格式化\nimport handlePrice from '../../../utils/handlePrice';\n//时间格式化\nimport handleTimeString from '../../../utils/handleTimeString';\n\n//ipfs实例\nconst ipfs = ipfsAPI({ host: ipfsAddAndCatConfig.host, port: ipfsAddAndCatConfig.port, protocol: ipfsAddAndCatConfig.protocol });\n\n//从数据库拿商品信息\nclass AuctionInto extends Component {\n\n    // state = {\n        // productInSell: [],\n        // productInReveal: [],\n        // productInFinalize: []\n    // }\n\n    constructor (props) {\n        super(props);\n    }\n\n\n    //注意同步，不然还没得到结果，就把null返回了\n    getProductList = async(process) => {\n        //process 可能的值为\n        //\"sell\"\n        //\"reveal\"\n        //\"finalize\"\n        \n\n        //New，从后台的mongoDB拿数据\n        let productInProcess = await renderProducts({ productProcess: process });\n        console.log(\"getProductList, process = \" + process + \" 请求到的数据为 : \");\n        console.dir(productInProcess.data);\n\n        //从数据库里拿到的信息是这样的 productArray[0]\n        //结构为\n        // auctionEndTime: 1646381747\n        // auctionStartTime: 1646381347\n        // blockchainId: 1\n        // category: \"Cell Phones & Accessories\"\n        // condition: 0 (全新还是二手)\n        // ipfsDescHash: \"QmRa3BnvMUU6DxnLzxymAd7dweyWAYLzW3R99KkGCJAgRn\"\n        // ipfsImageHashArray: 字符串数组\n        // name: \"iphone 5\"\n        // price: 2000000000000000000\n        // productStatus: 0 (卖没卖出去)\n        // __v: 0\n        // _id: \"6221c928b1126364e456764e\"\n\n\n        //要传给 ProductList 用来显示的信息是这样的\n        //blockchainId (int)\n        //name (String)\n        //category (String)\n        //ipfsDescHash (String)\n        //ipfsImageHashArray (String数组)\n        //processTime (String) 已结束 或者 距离结束的时间\n        //price (String) 大于1ETH 用 ETH 做单位，小于时用 wei\n        //productCondition (String) 新旧\n\n        // let arrayLength = productInProcess.data.length;\n\n        \n        let array = await productInProcess.data.map(async (item, index) => {\n            //item 是数组的大元素\n\n            //价格使用合适单位\n            let priceString = handlePrice(item.price);\n\n            //计算 processTime, 与最外层函数的参数 process 有关\n            let processTimeString = handleTimeString(item.auctionEndTime, process);\n\n            //注意异步的执行先后顺序问题\n            // 将商品介绍从 ipfs 下载，存为descString\n            let descString = \"商品介绍占位\";\n            await ipfs.cat(item.ipfsDescHash).then(file => {\n                descString = file.toString();\n            })\n\n            //只要第一张图片\n            let ipfsFirstImageHash = item.ipfsImageHashArray[0];\n                    \n            return {\n                //key从1开始\n                key: index + 1,\n                blockchainId : item.blockchainId, //用于用户点击时，用区块链中的ID查询商品详细信息\n                name : item.name,\n                category : item.category,\n                //过长就截断\n                descString : (descString.length > 150) ? descString.slice(0,150)+\"......\"  : descString,\n                imageUrl : ipfsReadUrlBefore + ipfsFirstImageHash,\n                productCondition : (item.condition === 0) ? \"全新\" : \"二手\",\n                price : priceString,\n                processTime : processTimeString\n            }\n        });\n\n        console.log(\"格式化后, 即将传入 ProductList 的数据为 : \");\n        console.log(array);\n\n        return array;\n    }\n\n    //注意同步，不然还没得到结果，就把null返回了\n    componentDidMount  = () => {\n        console.log(\"生成AuctionInto模块\");\n\n        // //注意，不能这样更新，错误写法\n        // this.state.productInSell = await this.getProductList(\"sell\");\n        // this.state.productInReveal = await this.getProductList(\"reveal\");\n        // this.state.productInFinalize = await this.getProductList(\"finalize\");\n\n        // let productInSell =  this.getProductList(\"sell\");\n        // let productInReveal =  this.getProductList(\"reveal\");\n        // let productInFinalize =  this.getProductList(\"finalize\");\n\n        // //学习 PersonalInfo 的处理方式\n        // //这里是异步的，在下面的 render 中调用，显示为 null\n        // this.setState({\n        //     productInSell : productInSell,\n        //     productInReveal : productInReveal,\n        //     productInFinalize : productInFinalize\n        // }, () =>{\n        //     console.log(\"this.setState 执行完毕\");\n        // }\n        // )\n\n\n\n\n        // axios.post(\"/account/showAll\", {\n        //     username:this.state.username\n        // }).then(response => {\n        //     const data =  response.data;\n        //     if(data.status === \"success\"){\n        //         console.log(\"获取该用户所有曾用地址成功\");\n        //         //data.accountAndLastTime 是外层是数组，每个数组元素是字典类型\n        //         //map 方法，数组映射\n                // let array = data.accountAndLastTime.map((item, index) => {\n                //     //计算时间差，判断是否活跃\n                //     //注意mysql返回的 timestamp 与js中的 Date 的区别，以及相互转换\n                //     let timeDifference = new Date() - new Date(item.lastTime);\n                //     console.log(\"这个日期距离现在已经 \" + timeDuration(timeDifference));\n                //     //小于一天时间的是活跃账户\n                //     let tag = ( timeDifference> 24*60*60*1000) ? true : false;\n                //     return {\n                //         //key从1开始\n                //         key: index + 1,\n                //         accountString: item.accountString,\n                //         accountStatus: tag ? 0:1,\n                //         //moment库，格式化时间\n                //         lastTime: moment(item.lastTime).format('yy年M月D日, h:mm:ss a')\n                //     }\n                // });\n        //         console.log(\"map映射后的要放到列表中的数据 array 为 : \");\n        //         console.dir(array);\n        //         this.setState({accountAndLastTimeArray:array});\n\n        //     }\n        //     else{\n        //         console.log(\"获取该用户所有曾用地址出错\");\n        //         message.warning (\"获取地址信息出错\").then (r  => console.log(r));\n        //     }\n        // }).catch( err => {\n        //     console.log(\"发起获取所有曾用地址的请求失败, ERR : \" + err);\n        // });\n    }\n\n\n\n\n\n    \n    render () {\n        // const {productInSell,\n        //     productInReveal,\n        //     productInFinalize} = this.state;\n\n\n        return (\n\n            <div>\n                <Descriptions\n                    title=\"出示报价\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                />\n                <ProductList productArray={this.getProductList(\"sell\")}></ProductList>\n\n                <Descriptions\n                    title=\"揭示报价\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                    style={{marginTop:'50px'}}\n                />\n                <ProductList productArray={this.getProductList(\"reveal\")}></ProductList>\n\n                <Descriptions\n                    title=\"结束拍卖\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                    style={{marginTop:'50px'}}\n                />\n                <ProductList productArray={this.getProductList(\"finalize\")}></ProductList>\n\n            </div>\n        );\n    }\n}\n\nexport default AuctionInto;\n","/home/kzj/project/finalize/final/code/react_code/src/pages/UserOrAccount/AlterPwd/index.jsx",[],"/home/kzj/project/finalize/final/code/react_code/src/pages/Publish/Selling/index.jsx",["259","260","261","262","263","264","265","266","267","268","269"],"import React, {Component} from 'react';\nimport axios from \"axios\";\nimport cookie from 'react-cookies';\nimport ipfsAPI from 'ipfs-api';\nimport { message, Card, Radio} from 'antd';\nimport {\n    Form,\n    Input,\n    InputNumber,\n    Cascader,\n    Select,\n    Row,\n    Col,\n    Checkbox,\n    Button,\n    Upload,\n    AutoComplete,\n    DatePicker,\n    Slider,\n  } from 'antd';\n// import axios from \"axios\";\n// import cookie from \"react-cookies\";\n\nimport { UploadOutlined, InboxOutlined } from '@ant-design/icons';\n\n//显眼的提示\nimport openNotification from '../../../components/Notification';\n//时间格式化\n\n\n//接入合约\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getShopping from \"../../../utils/getShopping\";\n\n//静态资源\nimport ProductClass from '../../../static/ProductClass';\nimport ProductOrigin from '../../../static/ProductOrigin';\n\n//ipfs配置文件\nimport ipfsAddAndCatConfig from '../../../config/ipfsAddAndCat';\nimport moment from 'moment';\n\nconst { Option } = Select;\nconst { RangePicker } = DatePicker;\n\n//ipfs实例\nconst ipfs = ipfsAPI({ host: ipfsAddAndCatConfig.host, port: ipfsAddAndCatConfig.port, protocol: ipfsAddAndCatConfig.protocol });\n\n\nconst suffixSelector = (\n    <Form.Item name=\"PriceUnit\" noStyle>\n      <Select\n        style={{\n          width: 70,\n        }}\n      >\n        <Option selected=\"selected\" value=\"ETH\">ETH</Option>\n        <Option value=\"wei\">wei</Option>\n      </Select>\n    </Form.Item>\n);\n\n\n//向区块链写入商品信息\nclass Selling extends Component {\n\n    state = {\n        username:cookie.load('username'),\n        web3 : null,\n        truffleContract : null,\n        //读取上传的图片\n        picReader : []\n    }\n\n    constructor (props) {\n        super(props);\n    }\n\n    //当文件选择变化时\n    //getValueFromEvent调用它\n    normFile = (e) => {\n        console.log(\"上传图片的 getValueFromEvent 调用\");\n        console.log(e);\n        let reader = [];\n\n        //清空，防止重复上传\n        this.setState({\n            picReader: null\n        });\n\n        //如果列表里至少有一张图片的话\n        let fileLength = e.fileList.length;\n        if(fileLength !== 0){\n            //用下标索引可以拿到更多张\n            for(let index=0; index<fileLength; index++){\n                const file = e.fileList[index].originFileObj;\n                reader[index] = new window.FileReader();\n                reader[index].readAsArrayBuffer(file);\n                console.log(\"读取第 \" + (index+1) + \" 张图片\");\n            }  \n        }else{\n            //清空，防止上传已经取消的\n            reader = null;\n            console.log(\"图片列表为空\");\n        } \n        //在方法的最外层使用 this.setState 更新值，不然组件会一直处于uploading状态\n        this.setState({\n            picReader: reader\n        });\n        console.log(\"this.state.picReader : \");\n        console.log(this.state.picReader);\n    }\n\n\n    //customRequest调用它\n    uploadFile = (e) => {\n        message.info(\"正在上传图片\", 2);\n        console.log(\"上传图片的 customRequest 调用\");\n        console.log(e);\n        //判断是否上传完成\n        if(this.state.picReader !== null){\n            //告诉组件成功了，不要一直 uploading\n            e.onSuccess(200,this.state.picReader);\n        }\n      }\n\n    \n\n    getBlockChainInfo = async() => {\n        try{\n            const web3 = await getWeb3();\n            const Shopping = await getShopping(web3);\n            this.setState({\n                web3: web3,\n                truffleContract:Shopping\n            });\n            message.success(\"接入智能合约成功\", 2);\n            console.log(\"Selling 的 web3 : \");\n            console.dir(web3);\n            console.log(\"Selling 的 Shopping : \");\n            console.dir(this.state.truffleContract);\n            return true;\n        }catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n              `[ERROR]接入智能合约失败.`,\n            );\n            console.error(error);\n            return false;\n          }\n        \n    }\n\n    componentDidMount () {\n        console.log(\"生成Selling模块\");\n        if(this.getBlockChainInfo()){\n            //注意，这里打印 this.state.truffleContract 为 null，因为异步执行\n            // console.log(\"成功获得合约信息, this.state.truffleContract : \");\n            // console.dir(this.state.truffleContract);\n            console.log(\"获得合约信息成功\");\n        }else{\n            console.log(\"获得合约信息失败\");\n        }\n    }\n\n    //点击提交按钮，表单可以提交时\n    onFinish = (values) => {\n        console.log(\"提交的数据为 : \");\n        console.dir(values);\n        //传过来的数据为\n        // FinishTime: \"7\"\n        // PriceUnit: \"ETH\"\n        // ProduceAmount: 3\n        // ProductPrice: 1\n        // ProductAddress: (2) [4, 48202]\n        // ProductClass: (2) ['艺术品', '画作']\n        // ProductDesc: \"111\"\n        // ProductName: \"11\"\n\n        //如果数据不合法，阻止上链\n        if(values.PriceUnit === undefined){\n            message.error(\"未选择价格单位\", 2);\n            return;\n        }\n        \n        values.address0 = values.ProductAddress[0];\n        values.address1 = values.ProductAddress[1];\n        //UploadPic用不到，从字典中删掉\n        //优化传参大小\n        delete values.UploadPic;\n        delete values.ProductAddress;\n        \n        // console.log('onFinish 的 values : ', values);\n\n        //保证安全，防注入\n        let decodedParams = {};\n        Object.keys(values).forEach(key => {\n            decodedParams[key] = decodeURIComponent(decodeURI(values[key]));\n        });\n        console.log('onFinish 的 values 解析为 decodedParams : ', decodedParams);\n\n        //decodedParams 进一步格式化\n        //参数全都变成String\n\n        message.info(\"正在提交拍卖商品数据\",2);\n        try{\n            this.saveProduct(this.state.picReader, decodedParams);\n        }catch(err){\n            // message.error(\"向链上提交商品数据出错\",2);\n            return;\n        }\n        // message.success(\"向链上提交商品数据成功\",2);\n\n    }\n\n\n    //点击提交按钮，表单不能提交时\n    onFinishFailed = (errorInfo) => {\n        message.warning(\"请正确填写商品信息\",2);\n    }\n\n\n    //向区块链保存商品入口函数\n    saveProduct = (reader, decodedParams) => {\n        //注意这里的各个函数里的this，已经不再是最外层的this，如果在内层用this，就调用不到外层的函数\n        //想办法用that将外层的this传进去\n        let that = this;\n        let imageIdArray, descId;\n        this.saveImageOnIpfs(reader).then(function(idArray) {\n            imageIdArray = idArray;\n            that.saveTextBlobOnIpfs(decodedParams[\"ProductDesc\"]).then(function(id) {\n                descId = id;\n                //ProductDesc用不到，从字典中删掉\n                //优化传参大小\n                delete decodedParams.ProductDesc;\n                //只传过去要上区块链的\n                that.saveProductToBlockchain(decodedParams, imageIdArray, descId);\n            });\n        });\n    }\n    \n    //图片上传ipfs并获取hash\n    //一个商品对应多张图片\n    saveImageOnIpfs = (reader) => {\n        return new Promise((resolve, reject) => {\n            //一共几张图片\n            let readerLength = reader.length;\n            //有图片传过来\n            if(readerLength >0){\n                //存放结果数组\n                let hashArray = [];\n                let isSuccess = true;\n                for(let index=0; index < readerLength; index++){\n                    let buffer = Buffer.from(reader[index].result);\n                    //一次IPFS上传\n                    ipfs.add(buffer).then(res => {\n                        console.log(\"ImgRes: \", res);\n                        hashArray[index] = res[0].hash;\n                    }).catch(err => {\n                        console.error(err);\n                        isSuccess = false;\n                        message.error(\"图片保存失败\",2);\n                        reject(err);\n                    });\n\n                }\n                if(isSuccess){\n                    message.success(\"图片保存成功\", 2);\n                }\n                resolve(hashArray);\n            //没传图片\n            } else{\n                message.info(\"未上传商品图片\");\n                resolve(\"\");\n            }\n            \n            \n        });\n    }\n    \n    //简介上传ipfs并获取hash\n    saveTextBlobOnIpfs = (blob) => {\n        return new Promise((resolve, reject) => {\n            let buffer = Buffer.from(blob, 'utf-8');\n            ipfs.add(buffer).then(res => {\n                console.log(\"TextRes: \", res);\n                message.success(\"简介文字保存成功\",2);\n                resolve(res[0].hash);\n            }).catch(err => {\n                console.error(err);\n                message.error(\"简介文字保存失败\",2);\n                reject(err);\n            });\n        });\n    }\n\n    //调用区块链方法\n    //由 imageId 改为 imageIdArray，图片由一张变多张\n    saveProductToBlockchain = (params, imageIdArray, descId) => {\n        // console.log(\"params in save product: \", params);\n\n        if(this.state.truffleContract === null || this.state.web3 === null){\n            message.error(\"连接合约失败\",2);\n            console.log(\"[ERROR]web3 或者 truffleContract 为 null\");\n            return;\n        }\n\n        //处理价格，把单位转为 wei\n        let price = -1;\n        if(params.PriceUnit === \"ETH\"){\n            price = this.state.web3.utils.toWei(params.ProductPrice, 'ether');\n        }else if(params.PriceUnit === \"wei\"){\n            price = parseInt(params.ProductPrice);\n        }\n        //处理库存数量，从String变成int\n        let produceAmount = parseInt(params.ProduceAmount);\n        //处理发货时效，从String变成int，单位为天\n        let finishTime = parseInt(params.FinishTime);\n        let productOrigin = [params.address0, params.address1];\n\n        //传来的数据已格式化为\n        // finishTime: (int)\n        // produceAmount: (int)\n        // price: (int)\n        // params.ProductClass: (string)\n        // params.ProductName: (string)\n        // productOrigin: [int, int]\n\n\n        console.log(\"最终上传区块链的数据为 : \");\n        console.log(params.ProductName);\n        console.log(descId);\n        console.log(imageIdArray);\n        console.log(params.ProductClass);\n        console.log(price);\n        console.log(produceAmount);\n        console.log(finishTime);\n        console.log(productOrigin);\n\n        console.log(\"合约为 : \");\n        console.dir(this.state.truffleContract);\n        \n    \n        //注意回调函数中的this，和外界的this不同，如果向使用外界的this，要赋值成that传过去\n        //注意要使用async，确保先拿到地址，用await关键字确保运行的先后顺序，再用这个地址调用合约方法\n        let that = this;\n        console.dir(this.state.truffleContract.deployed());\n        this.state.truffleContract.deployed().then(async (i) => {\n            console.log(\"进入 this.state.truffleContract.deployed() 的回调函数\");\n            //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n            //即时获取当前地址，用该地址发交易\n            let currentAccount = await that.state.web3.eth.getAccounts();\n            message.info(\"交易发起地址为: \"+currentAccount, 2);\n            console.log(\"交易发起地址为: \"+currentAccount);\n\n            // string memory _name, string memory _category, string[] memory _imageLinkArray, string memory _descLink, uint _shippingTime,\n            //                     uint _inStockNum, uint _price, uint[] memory _originPlace)\n\n            try{\n                //由 imageId 改为 imageIdArray，图片由一张变多张\n                //合约中实现事件event NewProduct监听\n                await i.addGoodsToStore(params.ProductName, params.ProductClass, imageIdArray, descId, finishTime,\n                    produceAmount, price, productOrigin, { from: currentAccount.toString()}).then(function(f) {\n                    //注意这里调用合约方法使用的地址，必须是字符串形式，要用 toString() 转化为字符串\n\n                    message.success(\"向链上提交商品数据成功\",2);\n                    //强提醒\n                    openNotification(\"商品上链成功\",\n                    \"商品名: \" + params.ProductName  + \", 价格: \" + params.ProductPrice + params.PriceUnit + \", 总量: \" + produceAmount,\n                    'bottomLeft');\n                    console.log(\"成功调用合约的addProductToStore方法\");\n                    console.log(f);\n                });  \n            }catch(err) {\n                message.error(\"向链上提交商品数据失败\",2);\n                console.log(\"调用合约的addProductToStore方法失败, err =\");\n                console.dir(err);\n            }\n\n            \n        });\n    }\n\n    \n    render () {\n        return (\n            <div style={{display:'flex', justifyContent:'center'}}>\n            <Card title=\"上架待出售商品\" bordered={false} style={{ width: '80%' }} headStyle={{display:'flex', justifyContent:'center'}}>\n                <Form\n                    initialValues={{\n                        remember: true,\n                    }}\n                    onFinish={this.onFinish}\n                    onFinishFailed={this.onFinishFailed}\n                    style={{margin:\"auto\", width:\"60%\", marginTop:\"15px\"}}\n                >\n                    <Form.Item\n                        name=\"ProductName\"\n                        rules={[\n                            {\n                                required: true,\n                                message: '请输入商品名称',\n                            },\n                        ]}\n                    >\n                        <Input placeholder=\"商品名称\"/>\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"ProductDesc\"\n                        label=\"商品介绍\"\n                        rules={[\n                                {\n                                    required: true,\n                                    message: '请输入商品介绍',\n                                },\n                        ]}\n                    >\n                        <Input.TextArea showCount maxLength={100} />\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"UploadPic\"\n                        label=\"上传图片\"\n                        valuePropName=\"fileList\"\n                        getValueFromEvent={this.normFile}\n                        extra=\"\"\n                    >\n                        <Upload name=\"logo\" customRequest={this.uploadFile} listType=\"picture\">\n                            <Button icon={<UploadOutlined />}>点击上传</Button>\n                        </Upload>\n                    </Form.Item>\n                    \n                    <Form.Item\n                        name=\"ProductClass\"\n                        label=\"商品种类\"\n                        rules={[\n                                {\n                                    type: 'array',\n                                    required: true,\n                                    message: '请选择商品种类',\n                                },\n                            ]}\n                    >\n                        <Cascader placeholder=\"请选择\" options={ProductClass} />\n                    </Form.Item>\n\n\n                    <Form.Item\n                        name=\"ProductPrice\"\n                        label=\"商品价格\"\n                        rules={[\n                                {\n                                    required: true,\n                                    message: '请输入商品价格',\n                                },\n                            ]}\n                    >\n                    <InputNumber\n                        addonAfter={suffixSelector}\n                        style={{\n                            width: '100%',\n                        }}\n                    />\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"ProduceAmount\"\n                        label=\"商品库存\"\n                        rules={[\n                                {\n                                    required: true,\n                                    message: '请输入商品库存',\n                                },\n                            ]}\n                    >\n                    <InputNumber\n                        style={{\n                            width: '100%',\n                        }}\n                    />\n                    </Form.Item>\n\n                    <Form.Item name=\"FinishTime\" label=\"发货时效\">\n                        <Radio.Group>\n                            <Radio value=\"1\">1天</Radio>\n                            <Radio value=\"3\">3天</Radio>\n                            <Radio value=\"7\">7天</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"ProductAddress\"\n                        label=\"发货地\"\n                        rules={[\n                                {\n                                    type: 'array',\n                                    required: true,\n                                    message: '请选择发货地',\n                                },\n                            ]}\n                    >\n                        <Cascader placeholder=\"请选择\" options={ProductOrigin} />\n                    </Form.Item>\n\n\n                    <Form.Item\n                        wrapperCol={{\n                            offset: 10,\n                            span: 16,\n                        }}\n                    >\n                        <Button type=\"primary\" htmlType=\"submit\">\n                            发布商品\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Card>\n        </div>\n        );\n    }\n}\n\nexport default Selling;\n\n","/home/kzj/project/finalize/final/code/react_code/src/pages/Market/Shopping/index.jsx",["270","271","272","273","274","275"],"import React, {Component} from 'react';\nimport cookie from 'react-cookies'\nimport {Descriptions, message, Spin, Table, Tag} from \"antd\";\nimport renderGoods from '../../../utils/renderGoods';\n\n//商品列表组件，需要传数据进去\nimport GoodsList from '../../../components/GoodsList';\n\n//从IPFS读取\nimport ipfsReadUrlBefore from '../../../config/ipfsReadUrl';\nimport ipfsAddAndCatConfig from '../../../config/ipfsAddAndCat';\nimport ipfsAPI from 'ipfs-api';\n\n//不需要接入合约\n\n//价格格式化\nimport handlePrice from '../../../utils/handlePrice';\n//地址解析\nimport handleAddress from '../../../utils/handleAddress';\n\n//ipfs实例\nconst ipfs = ipfsAPI({ host: ipfsAddAndCatConfig.host, port: ipfsAddAndCatConfig.port, protocol: ipfsAddAndCatConfig.protocol });\n\n//从数据库拿商品信息\nclass Shopping extends Component {\n\n    // state = {\n        // productInSell: [],\n        // productInReveal: [],\n        // productInFinalize: []\n    // }\n\n    constructor (props) {\n        super(props);\n    }\n\n\n    //注意同步，不然还没得到结果，就把null返回了\n    getGoodsList = async(process) => {\n        //process 可能的值为\n        //\"open\"\n        //\"sold\"\n        console.log(\"getGoodsList 的参数为 : \" + process);\n        \n\n        //New，从后台的mongoDB拿数据\n        let productInProcess = await renderGoods({ goodsProcess: process });\n        console.log(\"getGoodsList, process = \" + process + \" 请求到的数据为 : \");\n        console.dir(productInProcess.data);\n\n        //从数据库里拿到的信息是这样的 productArray[0]\n        //结构为\n        // _id: ObjectId(\"62449a3b32aff27585ce7b15\"),\n        // name: '商品名称2111',\n        // category: '艺术品,画作',\n        // ipfsImageHashArray: [ 'QmcSe6Vt9SfvXuz1gFbtb8gnvYmL4bp4oYVdTtzyFHvVnH' ],\n        // ipfsDescHash: 'QmewtY21Ufyqa166AWXrSC3Y3FMqKMhpRRPH2tqTNMUALE',\n        // price: 1000000000000000000,\n        // shippingTime: 3,\n        // productStatus: 0,\n        // inStockNum: 111,\n        // originPlace: [ 1, 72 ],\n        // __v: 0\n\n\n        //要传给 GoodsList 用来显示的信息是这样的\n        //blockchainId (int)\n        //name (String)\n        //category (String)\n        //ipfsDescHash (String)\n        //ipfsImageHashArray (String数组)\n        //price (String) 大于1ETH 用 ETH 做单位，小于时用 wei\n        //productStatus (int) 是否售空\n        //shippingTime (int) 发货时效，单位是天\n        //inStockNum (int) 库存\n        //productAddress (string) 发货地\n\n        // let arrayLength = productInProcess.data.length;\n\n        \n        let array = await productInProcess.data.map(async (item, index) => {\n            //item 是数组的大元素\n\n            //价格使用合适单位\n            // priceString 是字符串\n            let priceString = handlePrice(item.price);\n\n            //注意异步的执行先后顺序问题\n            // 将商品介绍从 ipfs 下载，存为descString\n            let descString = \"商品介绍占位\";\n            await ipfs.cat(item.ipfsDescHash).then(file => {\n                descString = file.toString();\n            })\n\n            //把发货地址的 [int,int] 解析成 string\n            let addressString = handleAddress(item.originPlace);\n            console.log(\"地址解析为 : \");\n            console.dir(addressString);\n\n            //只要第一张图片\n            let ipfsFirstImageHash = item.ipfsImageHashArray[0];\n                    \n            return {\n                //key从1开始\n                key: index + 1,\n                blockchainId : item.blockchainId, //用于用户点击时，用区块链中的ID查询商品详细信息\n                name : item.name,\n                category : item.category,\n                //过长就截断\n                descString : (descString.length > 150) ? descString.slice(0,150)+\"......\"  : descString,\n                imageUrl : ipfsReadUrlBefore + ipfsFirstImageHash,\n                inStockNum : item.inStockNum,\n                price : priceString,\n                addressString : addressString,\n                shippingTime : item.shippingTime,\n            }\n        });\n\n        console.log(\"格式化后, 即将传入 GoodsList 的数据为 : \");\n        console.log(array);\n\n        return array;\n    }\n\n    //注意同步，不然还没得到结果，就把null返回了\n    componentDidMount  = () => {\n        console.log(\"生成Shopping模块\");\n    }\n\n\n\n    \n    render () {\n\n        return (\n\n            <div>\n                <Descriptions\n                    title=\"正在出售\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                />\n                <GoodsList productArray={this.getGoodsList(\"open\")}></GoodsList>\n\n                <Descriptions\n                    title=\"已售空\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                    style={{marginTop:'50px'}}\n                />\n                <GoodsList productArray={this.getGoodsList(\"sold\")}></GoodsList>\n\n            </div>\n        );\n    }\n}\n\nexport default Shopping;\n","/home/kzj/project/finalize/final/code/react_code/src/pages/Publish/AuctionOut/index.jsx",["276","277","278","279","280","281","282","283"],"import React, {Component} from 'react';\nimport axios from \"axios\";\nimport cookie from 'react-cookies';\nimport ipfsAPI from 'ipfs-api';\nimport { message, Card} from 'antd';\nimport {\n    Form,\n    Input,\n    InputNumber,\n    Cascader,\n    Select,\n    Row,\n    Col,\n    Checkbox,\n    Button,\n    Upload,\n    AutoComplete,\n    DatePicker,\n    Slider,\n  } from 'antd';\n// import axios from \"axios\";\n// import cookie from \"react-cookies\";\n\nimport { UploadOutlined, InboxOutlined } from '@ant-design/icons';\n\n//显眼的提示\nimport openNotification from '../../../components/Notification';\n//时间格式化\n\n\n//接入合约\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getEcommerceStore from \"../../../utils/getEcommerceStore\";\n\n//静态资源\nimport ProductClass from '../../../static/ProductClass';\n\n//ipfs配置文件\nimport ipfsAddAndCatConfig from '../../../config/ipfsAddAndCat';\nimport moment from 'moment';\n\nconst { Option } = Select;\nconst { RangePicker } = DatePicker;\n\n//ipfs实例\nconst ipfs = ipfsAPI({ host: ipfsAddAndCatConfig.host, port: ipfsAddAndCatConfig.port, protocol: ipfsAddAndCatConfig.protocol });\n\n\nconst suffixSelector = (\n    <Form.Item name=\"PriceUnit\" noStyle>\n      <Select\n        style={{\n          width: 70,\n        }}\n      >\n        <Option selected=\"selected\" value=\"ETH\">ETH</Option>\n        <Option value=\"wei\">wei</Option>\n      </Select>\n    </Form.Item>\n);\n\n  const rangeConfig = {\n    rules: [\n      {\n        type: 'array',\n        required: true,\n        message: '请选择时间',\n      },\n    ],\n  };\n\n\n\n\n//向区块链写入商品信息\nclass AuctionOut extends Component {\n\n    state = {\n        username:cookie.load('username'),\n        web3 : null,\n        truffleContract : null,\n        //读取上传的图片\n        picReader : []\n    }\n\n    constructor (props) {\n        super(props);\n    }\n\n    //当文件选择变化时\n    //getValueFromEvent调用它\n    normFile = (e) => {\n        console.log(\"上传图片的 getValueFromEvent 调用\");\n        console.log(e);\n        let reader = [];\n\n        //清空，防止重复上传\n        this.setState({\n            picReader: null\n        });\n\n        //如果列表里至少有一张图片的话\n        let fileLength = e.fileList.length;\n        if(fileLength !== 0){\n            //用下标索引可以拿到更多张\n            for(let index=0; index<fileLength; index++){\n                const file = e.fileList[index].originFileObj;\n                reader[index] = new window.FileReader();\n                reader[index].readAsArrayBuffer(file);\n                console.log(\"读取第 \" + (index+1) + \" 张图片\");\n            }  \n        }else{\n            //清空，防止上传已经取消的\n            reader = null;\n            console.log(\"图片列表为空\");\n        } \n        //在方法的最外层使用 this.setState 更新值，不然组件会一直处于uploading状态\n        this.setState({\n            picReader: reader\n        });\n        console.log(\"this.state.picReader : \");\n        console.log(this.state.picReader);\n    }\n\n\n    //customRequest调用它\n    uploadFile = (e) => {\n        message.info(\"正在上传图片\", 2);\n        console.log(\"上传图片的 customRequest 调用\");\n        console.log(e);\n        //判断是否上传完成\n        if(this.state.picReader !== null){\n            //告诉组件成功了，不要一直 uploading\n            e.onSuccess(200,this.state.picReader);\n        }\n      }\n\n    \n\n    getBlockChainInfo = async() => {\n        try{\n            const web3 = await getWeb3();\n            const EcommerceStore = await getEcommerceStore(web3);\n            this.setState({\n                web3: web3,\n                truffleContract:EcommerceStore\n            });\n            message.success(\"接入智能合约成功\", 2);\n            console.log(\"AuctionOut 的 web3 : \");\n            console.dir(web3);\n            console.log(\"AuctionOut 的 EcommerceStore : \");\n            console.dir(this.state.truffleContract);\n            return true;\n        }catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n              `[ERROR]接入智能合约失败.`,\n            );\n            console.error(error);\n            return false;\n          }\n        \n    }\n\n    //componentWillMount在render之前运行\n    //componentDidMount 在render之后运行\n    componentDidMount () {\n    // componentWillMount () {\n        console.log(\"生成AuctionOut模块\");\n        if(this.getBlockChainInfo()){\n            //注意，这里打印 this.state.truffleContract 为 null，因为异步执行\n            // console.log(\"成功获得合约信息, this.state.truffleContract : \");\n            // console.dir(this.state.truffleContract);\n            console.log(\"获得合约信息成功\");\n        }else{\n            console.log(\"获得合约信息失败\");\n        }\n    }\n\n    //点击提交按钮，表单可以提交时\n    onFinish = (values) => {\n        console.log(\"提交的数据为 : \");\n        console.dir(values);\n        //传过来的数据为\n        //values 已经是json格式了\n        //ProductName (String)\n        //ProductDesc (String)\n        //this.state.picReader (数组)\n        //ProductRevealTime (int)\n        //ProductCondition (String)\n        //BeginAndEndTime (长度为2的Moment数组)\n        //ProductClass (字符串数组)\n        //StartPrice (int)\n        //PriceUnit (String)\n        //ProductRevealTime (int) 单位是分钟\n\n        //如果数据不合法，阻止上链\n        if(values.PriceUnit === undefined){\n            message.error(\"未选择价格单位\", 2);\n            return;\n        }\n\n        //UploadPic用不到，从字典中删掉\n        //优化传参大小\n        delete values.UploadPic;\n        //把开始时间和结束时间拆分开，BeginAndEndTime 拆为 AuctionStartTime 和 AuctionEndTime\n        let AuctionStartTime = values.BeginAndEndTime[0]; \n        let AuctionEndTime = values.BeginAndEndTime[1]; \n        values.AuctionStartTime = AuctionStartTime;\n        values.AuctionEndTime = AuctionEndTime;\n        delete values.BeginAndEndTime;\n\n        \n        // console.log('onFinish 的 values : ', values);\n\n        let decodedParams = {};\n        Object.keys(values).forEach(key => {\n            decodedParams[key] = decodeURIComponent(decodeURI(values[key]));\n        });\n        // console.log('onFinish 的 values 解析为 decodedParams : ', decodedParams);\n\n        //decodedParams 进一步格式化\n        //参数全都变成String\n\n        message.info(\"正在提交拍卖商品数据\",2);\n        try{\n            this.saveProduct(this.state.picReader, decodedParams);\n        }catch(err){\n            // message.error(\"向链上提交商品数据出错\",2);\n            return;\n        }\n        // message.success(\"向链上提交商品数据成功\",2);\n\n    }\n\n\n    //点击提交按钮，表单不能提交时\n    onFinishFailed = (errorInfo) => {\n        message.warning(\"请正确填写商品信息\",2);\n    }\n\n\n    //向区块链保存商品入口函数\n    saveProduct = (reader, decodedParams) => {\n        //注意这里的各个函数里的this，已经不再是最外层的this，如果在内层用this，就调用不到外层的函数\n        //想办法用that将外层的this传进去\n        let that = this;\n        let imageIdArray, descId;\n        this.saveImageOnIpfs(reader).then(function(idArray) {\n            imageIdArray = idArray;\n            that.saveTextBlobOnIpfs(decodedParams[\"ProductDesc\"]).then(function(id) {\n                descId = id;\n                //ProductDesc用不到，从字典中删掉\n                //优化传参大小\n                delete decodedParams.ProductDesc;\n                //只传过去要上区块链的\n                that.saveProductToBlockchain(decodedParams, imageIdArray, descId);\n            });\n        });\n    }\n    \n    //图片上传ipfs并获取hash\n    //一个商品对应多张图片\n    saveImageOnIpfs = (reader) => {\n        return new Promise((resolve, reject) => {\n            //一共几张图片\n            let readerLength = reader.length;\n            //有图片传过来\n            if(readerLength >0){\n                //存放结果数组\n                let hashArray = [];\n                let isSuccess = true;\n                for(let index=0; index < readerLength; index++){\n                    let buffer = Buffer.from(reader[index].result);\n                    //一次IPFS上传\n                    ipfs.add(buffer).then(res => {\n                        console.log(\"ImgRes: \", res);\n                        hashArray[index] = res[0].hash;\n                    }).catch(err => {\n                        console.error(err);\n                        isSuccess = false;\n                        message.error(\"图片保存失败\",2);\n                        reject(err);\n                    });\n\n                }\n                if(isSuccess){\n                    message.success(\"图片保存成功\", 2);\n                }\n                resolve(hashArray);\n            //没传图片\n            } else{\n                message.info(\"未上传商品图片\");\n                resolve(\"\");\n            }\n            \n            \n        });\n    }\n    \n    //简介上传ipfs并获取hash\n    saveTextBlobOnIpfs = (blob) => {\n        return new Promise((resolve, reject) => {\n            let buffer = Buffer.from(blob, 'utf-8');\n            ipfs.add(buffer).then(res => {\n                console.log(\"TextRes: \", res);\n                message.success(\"简介文字保存成功\",2);\n                resolve(res[0].hash);\n            }).catch(err => {\n                console.error(err);\n                message.error(\"简介文字保存失败\",2);\n                reject(err);\n            });\n        });\n    }\n\n    //调用区块链方法\n    //由 imageId 改为 imageIdArray，图片由一张变多张\n    saveProductToBlockchain = (params, imageIdArray, descId) => {\n        // console.log(\"params in save product: \", params);\n\n        if(this.state.truffleContract === null || this.state.web3 === null){\n            message.error(\"连接合约失败\",2);\n            console.log(\"[ERROR]web3 或者 truffleContract 为 null\");\n            return;\n        }\n\n        //处理时间\n        let auctionStartTime = Date.parse(params[\"AuctionStartTime\"]) / 1000;\n        let auctionEndTime = Date.parse(params[\"AuctionEndTime\"]) / 1000;\n        //处理价格，把单位转为 wei\n        let startPrice = -1;\n        if(params.PriceUnit === \"ETH\"){\n            startPrice = this.state.web3.utils.toWei(params.StartPrice, 'ether');\n        }else if(params.PriceUnit === \"wei\"){\n            startPrice = parseInt(params.StartPrice);\n        }\n        //处理新旧状态，从String变成int\n        let productCondition = parseInt(params.ProductCondition);\n        //处理揭示报价时间，从String变成int\n        let productRevealTime = parseInt(params.ProductRevealTime);\n\n        //传来的数据已格式化为\n        //params.ProductName (String)\n        //descId (String)\n        //imageIdArray (String数组)\n        //auctionStartTime (int)\n        //auctionEndTime (int)\n        //productCondition (int)\n        //params.ProductClass (String)\n        //startPrice (int)\n        //productRevealTime (int) 单位是分钟\n\n\n        console.log(\"最终上传区块链的数据为 : \");\n        console.log(params.ProductName);\n        console.log(descId);\n        console.log(imageIdArray);\n        console.log(params.ProductClass);\n        console.log(startPrice);\n        console.log(auctionStartTime);\n        console.log(auctionEndTime);\n        console.log(productCondition);\n        console.log(productRevealTime);\n\n        console.log(\"合约为 : \");\n        console.dir(this.state.truffleContract);\n        \n    \n        //注意回调函数中的this，和外界的this不同，如果向使用外界的this，要赋值成that传过去\n        //注意要使用async，确保先拿到地址，用await关键字确保运行的先后顺序，再用这个地址调用合约方法\n        let that = this;\n        console.dir(this.state.truffleContract.deployed());\n        this.state.truffleContract.deployed().then(async (i) => {\n            console.log(\"进入 this.state.truffleContract.deployed() 的回调函数\");\n            //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n            //即时获取当前地址，用该地址发交易\n            let currentAccount = await that.state.web3.eth.getAccounts();\n            message.info(\"交易发起地址为: \"+currentAccount, 2);\n            console.log(\"交易发起地址为: \"+currentAccount);\n\n            try{\n                //由 imageId 改为 imageIdArray，图片由一张变多张\n                //合约中实现事件event NewProduct监听\n                await i.addProductToStore(params.ProductName, params.ProductClass, imageIdArray, descId, auctionStartTime,\n                    auctionEndTime, startPrice, productCondition, productRevealTime, { from: currentAccount.toString()}).then(function(f) {\n                    //注意这里调用合约方法使用的地址，必须是字符串形式，要用 toString() 转化为字符串\n\n                    message.success(\"向链上提交商品数据成功\",2);\n                    //强提醒\n                    openNotification(\"商品上链成功\",\n                    \"商品名: \" + params.ProductName  + \", 起拍价格: \" + params.StartPrice + params.PriceUnit + \", 拍卖开始时间: \" + moment(params.AuctionStartTime).format('yy年M月D日, h:mm:ss a') + \", 拍卖结束时间: \" + moment(params.AuctionEndTime).format('yy年M月D日, h:mm:ss a'),\n                    'bottomLeft');\n                    console.log(\"成功调用合约的addProductToStore方法\");\n                    console.log(f);\n                });  \n            }catch(err) {\n                message.error(\"向链上提交商品数据失败\",2);\n                console.log(\"调用合约的addProductToStore方法失败, err =\");\n                console.dir(err);\n            }\n\n            \n        });\n    }\n\n    \n    render () {\n        return (\n            <div style={{display:'flex', justifyContent:'center'}}>\n            <Card title=\"上架待拍卖商品\" bordered={false} style={{ width: '80%' }} headStyle={{display:'flex', justifyContent:'center'}}>\n                <Form\n                    initialValues={{\n                        remember: true,\n                    }}\n                    onFinish={this.onFinish}\n                    onFinishFailed={this.onFinishFailed}\n                    style={{margin:\"auto\", width:\"60%\", marginTop:\"15px\"}}\n                >\n                    <Form.Item\n                        name=\"ProductName\"\n                        rules={[\n                            {\n                                required: true,\n                                message: '请输入商品名称',\n                            },\n                        ]}\n                    >\n                        <Input placeholder=\"商品名称\"/>\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"ProductDesc\"\n                        label=\"商品介绍\"\n                        rules={[\n                                {\n                                    required: true,\n                                    message: '请输入商品介绍',\n                                },\n                        ]}\n                    >\n                        <Input.TextArea showCount maxLength={500} />\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"UploadPic\"\n                        label=\"上传图片\"\n                        valuePropName=\"fileList\"\n                        getValueFromEvent={this.normFile}\n                        extra=\"\"\n                    >\n                        <Upload name=\"logo\" \n                            customRequest={this.uploadFile} \n                            listType=\"picture\">\n                            <Button icon={<UploadOutlined />}>点击上传</Button>\n                        </Upload>\n                    </Form.Item>\n                    \n                    <Form.Item\n                        name=\"ProductClass\"\n                        label=\"商品种类\"\n                        rules={[\n                                {\n                                    type: 'array',\n                                    required: true,\n                                    message: '请选择商品种类',\n                                },\n                            ]}\n                    >\n                        <Cascader placeholder=\"请选择\" options={ProductClass} />\n                    </Form.Item>\n\n\n                    <Form.Item\n                        name=\"StartPrice\"\n                        label=\"起拍价格\"\n                        rules={[\n                                {\n                                    required: true,\n                                    message: '请输入起拍价格',\n                                },\n                            ]}\n                    >\n                    <InputNumber\n                        min={0}\n                        addonAfter={suffixSelector}\n                        style={{\n                            width: '100%',\n                        }}\n                    />\n                    </Form.Item>\n\n                    <Form.Item name=\"BeginAndEndTime\" label=\"起止时间\" {...rangeConfig}>\n                        <RangePicker showTime format=\"YYYY-MM-DD HH:mm:ss\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"ProductCondition\"\n                        label=\"产品状况\"\n                        rules={[\n                                {\n                                    required: true,\n                                    message: '请选择状况',\n                                },\n                        ]}\n                    >\n                        <Select placeholder=\"请选择\">\n                            <Option value=\"0\">全新</Option>\n                            <Option value=\"1\">二手</Option>\n                        </Select>\n                    </Form.Item>\n\n\n                    <Form.Item name=\"ProductRevealTime\" label=\"揭示报价持续时间\">\n                        <Slider\n                            marks={{\n                                0: '0',\n                                20: '20',\n                                40: '40',\n                                60: '60',\n                                80: '80',\n                                100: '100 分钟',\n                            }}\n                        />\n                    </Form.Item>\n                \n\n                    <Form.Item\n                        wrapperCol={{\n                            offset: 10,\n                            span: 16,\n                        }}\n                    >\n                        <Button disabled={ this.state.truffleContract === null || this.state.web3 === null } type=\"primary\" htmlType=\"submit\">\n                            发布商品\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Card>\n        </div>\n        );\n    }\n}\n\nexport default AuctionOut;\n\n","/home/kzj/project/finalize/final/code/react_code/src/pages/UserOrAccount/Login/index.jsx",[],"/home/kzj/project/finalize/final/code/react_code/src/pages/UserOrAccount/Register/index.jsx",[],"/home/kzj/project/finalize/final/code/react_code/src/pages/UserOrAccount/ForgetPwd/index.jsx",[],"/home/kzj/project/finalize/final/code/react_code/src/utils/saveAccountString.js",[],"/home/kzj/project/finalize/final/code/react_code/src/static/ProductClass.js",[],"/home/kzj/project/finalize/final/code/react_code/src/static/ProductOrigin.js",[],"/home/kzj/project/finalize/final/code/react_code/src/utils/renderProducts.js",[],"/home/kzj/project/finalize/final/code/react_code/src/components/ProductList/index.jsx",["284","285","286","287","288","289"],"import React, {Component} from \"react\";\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\n// import './index.css';\nimport { List, Avatar, Space, message, Tag } from 'antd';\nimport { MessageOutlined, LikeOutlined, StarOutlined, FieldTimeOutlined, StrikethroughOutlined, ShoppingCartOutlined } from '@ant-design/icons';\nimport cookie from 'react-cookies';\nimport {Link} from \"react-router-dom\";\n\nconst IconText = ({ icon, text }) => (\n  <Space>\n    {React.createElement(icon)}\n    {text}\n  </Space>\n);\n\n\n\nclass ProductList extends Component {\n  state = {\n    dataArray : []\n  }\n\n  //////////////////////重要\n  //this.props.productArray 为 promise\n  //promise需要解析才能使用\n  //要用.then拿promise的结果\n  // blockchainId (int)\n  // key\n  // name\n  // category\n  // descString\n  // imageUrl\n  // productCondition\n  // price\n  // processTime\n  \n\n  constructor (props) {\n    super(props);\n  }\n\n  //用来测试的模拟数据\n  // productListData = [];\n\n\n  //应该在调用 ProductList 的函数中，将数据格式化好，在 ProductList 中将传入的promise，用then解析出res，直接将数据放入 render，让 render 自动刷新\n  //传入的是 Promise 的嵌套，所以要用 then 嵌套地解析两次\n  componentWillMount  = () => {\n\n    // console.log(\"promise.then 前拿取的信息为 : \");\n    //这里输出一个 Promise\n    // console.dir(this.props.productArray);\n\n    this.props.productArray.then( res =>{\n\n      // console.log(\"promise.then 后拿取的信息为 : \");\n      //这里输出多个 Promise, 一个 Product 就是一个 Promise\n      // console.dir(res);\n\n      //解析每个Promise\n      let resLen = res.length;\n      for(let promiseIndex = 0; promiseIndex < resLen; promiseIndex++){\n        res[promiseIndex].then(productInfo => {\n\n        console.log(\"其中一个要渲染的信息为 : \");\n        console.dir(productInfo);\n          //得到每一个商品\n          //向 state 中的 dataArray 添加元素的方法\n          this.setState({dataArray : [...this.state.dataArray, productInfo]});\n        })\n      }\n\n    }).catch( err =>{\n      message.error(\"获得产品信息失败\", 2);\n      console.log(\"产品展示列表不能获得产品信息\" + err);\n    })\n    \n\n    //模拟数据，用来测试\n    // for (let i = 0; i < 2; i++) {\n    //   this.productListData.push({\n    //     href: 'https://ant.design',\n    //     name: '商品名称',\n    //     avatar: 'https://joeschmoe.io/api/v1/random',\n    //     category:\n    //       '商品类型',\n    //     descString:\n    //       '商品介绍',\n    //     price:\n    //       '1 ETH',\n    //     processTime:\n    //       '时间',\n    //     productCondition:\n    //       '全新',\n    //   });\n    // }\n\n  }\n              \n\n    render () {\n\n      console.log(\"ProductList 进行了一次渲染\");\n\n        return (\n            <List\n    itemLayout=\"vertical\"\n    size=\"large\"\n    pagination={{\n      onChange: page => {\n        console.log(page);\n      },\n      pageSize: 5,\n    }}\n    dataSource={this.state.dataArray}\n    footer={\n      <div>\n        共 {this.state.dataArray.length} 个\n      </div>\n    }\n    renderItem={item => (\n      <List.Item\n        key={item.index}\n        actions={[\n          <IconText icon={StrikethroughOutlined} text={item.price} key=\"list-vertical-star-o\" />,\n          <IconText icon={ShoppingCartOutlined} text={item.productCondition} key=\"list-vertical-like-o\" />,\n          <IconText icon={FieldTimeOutlined} text={item.processTime} key=\"list-vertical-message\" />,\n        ]}\n        extra={\n          <img\n            width={130}\n            height={130}\n            alt=\"商品图片\"\n            src={item.imageUrl}\n          />\n        }\n        \n      >\n        <List.Item.Meta\n          // avatar={<Avatar src={item.avatar} />}\n          //注意这里的 onClick 要传入回调函数，不然一刷新就疯狂执行\n          // title={<a  onClick={() => cookie.save('searchProductID', item.blockchainId, {path:'/'})} href={'/index/productInfo/'}>{item.name}</a>}\n          //这种使用 react 自带的路由的写法，比硬跳转快多了\n          title={<Link onClick={() => cookie.save('searchProductID', item.blockchainId, {path:'/'})} to={{pathname:'/index/productInfo'}}>{item.name}</Link>}\n          description={\n            <>\n              <Tag>ID: {item.blockchainId}</Tag>\n              <Tag>{item.category}</Tag>\n              <Tag>{item.productCondition}</Tag>\n              <Tag>区块链存证技术</Tag>\n            </>\n          }\n        />\n        {item.descString}\n      </List.Item>\n    )}\n    />\n        );\n    }\n}\n\nexport default ProductList;","/home/kzj/project/finalize/final/code/react_code/src/config/ipfsAddAndCat.js",[],"/home/kzj/project/finalize/final/code/react_code/src/config/ipfsReadUrl.js",[],"/home/kzj/project/finalize/final/code/react_code/src/pages/Market/ProductInfo/index.jsx",["290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312"],"import React, {Component} from 'react';\nimport cookie from 'react-cookies';\nimport ipfsAPI from 'ipfs-api';\n// import EditDeviceModal from \"../../EditDeviceModal\";\nimport { message, Card, Carousel, Drawer, Tag, Progress, Timeline} from 'antd';\nimport {\n    Form,\n    Input,\n    InputNumber,\n    Cascader,\n    Select,\n    Row,\n    Col,\n    Checkbox,\n    Button,\n    Upload,\n    AutoComplete,\n    DatePicker,\n    Slider,\n    Image\n  } from 'antd';\nimport { Typography, Divider } from 'antd';\n// import axios from \"axios\";\n// import cookie from \"react-cookies\";\n\nimport 'antd/dist/antd.css';\n// import './index.css';\nimport { List, Avatar, Space} from 'antd';\n\n//竞拍模块\nimport Bid from '../../../components/Auction/Bid';\n//揭示报价模块\nimport Reveal from '../../../components/Auction/Reveal';\n//成为仲裁者模块\nimport Finalize from '../../../components/Auction/Finalize';\n//释放资金模块\nimport ReleaseFunds from '../../../components/Auction/ReleaseFunds';\n//退还资金模块\nimport RefundFunds from '../../../components/Auction/RefundFunds';\n//最高竞价人信息模块\nimport HighestBidderInfo from '../../../components/Auction/HighestBidderInfo';\n//最终资金流向信息模块\nimport EscrowInfo from '../../../components/Auction/EscrowInfo';\n//转卖模块\nimport Resell from '../../../components/Auction/Resell';\n\n//溯源信息展示模块\nimport Tracing from '../../../components/Tracing'; \n\n//接入合约\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport getTracing from '../../../utils/getTracing';\n\n//从IPFS读取\nimport ipfsReadUrlBefore from '../../../config/ipfsReadUrl';\nimport ipfsAddAndCatConfig from '../../../config/ipfsAddAndCat';\n\n//价格格式化\nimport handlePrice from '../../../utils/handlePrice';\n//时间格式化\nimport handleTimeString from '../../../utils/handleTimeString';\n\nimport Meta from 'antd/lib/card/Meta';\nimport Countdown from 'antd/lib/statistic/Countdown';\nimport moment from 'moment';\nimport { CheckCircleOutlined, ClockCircleOutlined, CloseCircleOutlined, ExclamationCircleOutlined, MinusCircleOutlined, SyncOutlined } from '@ant-design/icons';\n\n\nconst IconText = ({ icon, text }) => (\n    <Space>\n      {React.createElement(icon)}\n      {text}\n    </Space>\n  );\n\n//ipfs实例\nconst ipfs = ipfsAPI({ host: ipfsAddAndCatConfig.host, port: ipfsAddAndCatConfig.port, protocol: ipfsAddAndCatConfig.protocol });\n\n\n//从区块链读出某件商品信息\nclass ProductInfo extends Component {\n\n    state = {\n        web3 : null,\n        truffleContract : null,\n        tracingContract : null,\n        dataArray : [],\n        startTimeVisible : false,\n        //竞拍按钮\n        bidVisible : false,\n        //揭示报价按钮\n        revealVisible : false,\n        //申请成为仲裁人按钮\n        finalizeVisible : false,\n        //最高出价人信息\n        highestBidderInfoVisible : false,\n        //放款按钮和退款按钮\n        releaseAndRefundFundsVisible: false,\n        //最终资金流向信息\n        escrowInfoVisible : false,\n        //转卖按钮\n        resellVisible : false,\n        //未成交进入转卖阶段\n        resellProcess : false,\n        //直接在子部件 EscrowInfo 中控制,这里废弃\n        // //看是否是当前地址，控制一些信息只对相关的人展示\n        // seller : null,\n        // buyer : null, \n        // arbiter : null,\n    }\n\n    constructor (props) {\n        super(props);\n    }\n\n    getCurrentTimeInSeconds = () => {\n        return Math.round(new Date() / 1000);\n    }\n\n    //清除cookie\n    componentWillUnmount () {\n        cookie.remove('searchProductID', { path: '/' });\n    }\n\n    getBlockChainInfo = async() => {\n        try{\n            const web3 = await getWeb3();\n            const EcommerceStore = await getEcommerceStore(web3);\n            const Tracing = await getTracing(web3);\n            this.setState({\n                web3: web3,\n                truffleContract:EcommerceStore,\n                tracingContract:Tracing\n            });\n            message.success(\"接入智能合约成功\", 2);\n            console.log(\"ProductInfo 的 web3 : \");\n            console.dir(web3);\n            console.log(\"ProductInfo 的 EcommerceStore : \");\n            console.dir(this.state.truffleContract);\n            return true;\n        }catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n              `[ERROR]接入智能合约失败.`,\n            );\n            console.error(error);\n            return false;\n          }\n        \n    }\n\n    // refresh = () =>{\n    //     //刷新\n    //     this.componentDidMount();\n    // }\n\n    //componentWillMount在render之前运行\n    //componentDidMount 在render之后运行\n    //注意先后顺序，this.getBlockChainInfo 在前，that.renderProductDetails 在后\n    async componentDidMount () {\n    // componentWillMount () {\n        let that = this;\n        console.log(\"生成ProductInfo模块\");\n        if(await this.getBlockChainInfo()){\n            console.log(\"获得合约信息成功\");\n\n            console.log(\"componentDidMount 中查询 cookie:searchProductID 为 : \" + cookie.load('searchProductID'));\n            console.log(\"componentDidMount 中查询 this.state.dataArray 的长度为 : \" + this.state.dataArray.length);\n            //利用 cookie，如果 cookie 中有商品ID，但是这个商品未显示，那就将它显示出来\n            //有了这个功能，从商品列表跳转到某个商品的详情页，不需要做其他操作\n            if(cookie.load('searchProductID') !==undefined && this.state.dataArray.length === 0) {\n                console.log(\"用 cookie 中包含的商品ID信息，加载商品详情页\");\n                let arg = {};\n                arg.ProductID = cookie.load('searchProductID');\n                that.renderProductDetails(arg);\n            }\n        }else{\n            console.log(\"获得合约信息失败\");\n        }\n    }\n\n\n    //控制显示与隐藏\n    //初始状态都为 false\n    // //竞拍按钮\n    // bidVisible \n    // //揭示报价按钮\n    // revealVisible \n    // //申请成为仲裁人按钮\n    // finalizeVisible \n    // //最高出价人信息\n    // highestBidderInfoVisible \n    // //放款按钮\n    // releaseFundsVisible \n    // //退款按钮\n    // refundFundsVisible \n    // //最终资金流向信息\n    // escrowInfoVisible \n    controlButtonAndInfo = async (p) => {\n        //从区块链里拿到的信息是这样的 res为\n        // 0: BN {negative: 0, words: Array(2), length: 1, red: null}\n        // 1: \"1212\"\n        // 2: \"艺术品,画作\"\n        // 3: \"Qma4Cm8m52QogsfMkZ3SE6dD1rrtcRqEs1zJ69BJT6kFoW\" //product.imageLink\n        // 4: \"Qmbc2XnQMmBjCPaXqWvPii1taM6VpvaWaDCGPMEm6y57nm\" //product.descLink\n        // 5: Array(3)\n            // 0: BN 开始时间(秒)\n            // 1: BN 结束时间(秒)\n            // 2: BN 揭示报价时长(分)\n        // 6: BN  //product.startPrice\n        // 7: BN  //product.status\n        // 8: BN  //product.condition\n\n        let currentTime = this.getCurrentTimeInSeconds();\n        let productStatus = parseInt(p[7]);\n\n        //把三个时间从数组 originInfo[5] 中拿出来，都是以秒为单位，别忘了转化为 int\n        let auctionStartTime = parseInt(p[5][0]);\n        let auctionEndTime = parseInt(p[5][1]);\n        let auctionRevealTime = parseInt(p[5][2]) * 60;\n        //p[7] = Sold\n        if (productStatus == 1) {\n            console.log(\"商品状态为 Sold\");\n            //显示最高竞价者和资金托管信息\n            this.setState({\n                highestBidderInfoVisible : true,\n                escrowInfoVisible : true\n            })\n        }\n        //p[7] = Unsold\n        else if (productStatus == 2) {\n            console.log(\"商品状态为 Unsold\");\n            //显示没有人出示报价\n            this.setState({\n                highestBidderInfoVisible : false,\n            })\n\n            //当时是否是卖家地址，决定是否显示转卖按钮\n            let currentAccount = await this.state.web3.eth.getAccounts();\n            this.state.truffleContract.deployed().then( (i) => {\n                console.log(\"进入 this.state.truffleContract.deployed() 的回调函数\");\n                //异步执行，可能报错\n                // let productId = this.state.dataArray[0].ID;\n                let productId = parseInt(p[0]);\n                try{\n                    //获取卖家地址\n                    i.sellerInfo(productId).then(res => {\n                        console.log(\"sellerInfo return : \");\n                        console.dir(res);\n                        //当时是卖家地址\n                        if(currentAccount == res){\n                            //显示转卖按钮\n                            this.showResellButton();\n                        }\n                        \n                    });  \n                }catch(err) {\n                    message.error(\"id = \" + productId + \"的商品的seller信息查询失败\",2);\n                    console.log(\"调用合约的sellerInfo方法失败 \" + err);\n                }\n    \n                \n            });\n\n        }\n        //p[7] = Open\n        //还未到竞拍时间\n        else if (currentTime < auctionStartTime) {\n            console.log(\"商品状态为 Open ，还未到竞拍时间， 当前时间 : \" + currentTime + \", 竞拍开始时间 : \" + auctionStartTime);\n            //显示开始时间\n            this.setState({\n                startTimeVisible : true,\n            })\n        }\n        //在竞拍时间段内\n        else if (currentTime < auctionEndTime) {\n            console.log(\"商品状态为 Open， 在竞拍时间段内, 当前时间 : \" + currentTime + \", 竞拍结束时间 : \" + auctionEndTime);\n            //显示竞拍按钮\n            this.setState({\n                bidVisible : true,\n                startTimeVisible : false,\n            })\n        }\n        //揭示报价阶段内\n        //控制reveal的持续时间\n        else if (currentTime  < auctionEndTime + auctionRevealTime) {\n            console.log(\"商品状态为 Open， 在揭示报价时间段内， 当前时间 : \" + currentTime + \", 揭示报价结束时间 : \" + (auctionEndTime + auctionRevealTime));\n            //显示揭示报价按钮\n            this.setState({\n                revealVisible : true,\n                startTimeVisible : false,\n                bidVisible : false,\n            })\n        }\n        //等待有人申请成为仲裁人\n        //有了仲裁人之后，商品会变成 Sold 或者 Unsold 状态 \n        else {\n            console.log(\"商品状态为 等待有人成为仲裁人\");\n            //显示成为仲裁人按钮\n            this.setState({\n                finalizeVisible : true,\n                startTimeVisible : false,\n                bidVisible : false,\n            })\n        }\n    }    \n\n\n    //接收子组件到父组件的反向数据流\n    showReleaseAndRefund = () => {\n        this.setState({\n            releaseAndRefundFundsVisible : true,\n\n        });\n    }\n\n    offReleaseAndRefund = () => {\n        this.setState({\n            releaseAndRefundFundsVisible : false,\n\n        });\n    }\n\n    //1、走了一遍拍卖流程后的转卖，2、没人出价，原卖家重新买\n    showResellButton = () => {\n        this.setState({\n            resellVisible : true,\n\n        });\n    }\n\n    setResellProcess = () => {\n        this.setState({resellProcess : true})\n    }\n\n    //点击提交按钮，表单可以提交时\n    onFinish = (values) => {\n        console.log('onFinish 的 values : ', values);\n\n        let decodedParams = {};\n        Object.keys(values).forEach(key => {\n            decodedParams[key] = decodeURIComponent(decodeURI(values[key]));\n        });\n        // console.log('onFinish 的 values 解析为 decodedParams : ', decodedParams);\n\n        //decodedParams 进一步格式化\n        //参数全都变成String\n        message.info(\"正在提交查询数据\",2);\n        try{\n            //调用之前就隐藏\n            // $(\"#bidding, #revealing, #finalize-auction, #escrow-info\").hide();\n            this.renderProductDetails(decodedParams);\n        }catch(err){\n            console.log(\"在区块链中查询失败\" + err);\n            return;\n        }\n    }\n\n\n    //点击提交按钮，表单不能提交时\n    onFinishFailed = (errorInfo) => {\n        message.warning(\"请正确填写商品ID信息\",2);\n    }\n\n\n\n    //调用区块链方法，得到某个具体的商品信息\n    renderProductDetails = (params) => {\n\n        if(this.state.truffleContract === null || this.state.web3 === null){\n            message.error(\"连接合约失败\",2);\n            console.log(\"[ERROR]web3 或者 truffleContract 为 null\");\n            return;\n        }\n\n        //传来的数据已格式化为\n        //params.ProductID (String)\n        let productId = params.ProductID;\n\n        console.log(\"用来查询的信息 : \");\n        console.log(\"productId : \" + productId);\n\n        console.log(\"合约为 : \");\n        console.dir(this.state.truffleContract);\n        \n    \n        //注意回调函数中的this，和外界的this不同，如果向使用外界的this，要赋值成that传过去\n        //注意要使用async，确保先拿到地址，用await关键字确保运行的先后顺序，再用这个地址调用合约方法\n        let that = this;\n        this.state.truffleContract.deployed().then( (i) => {\n            console.log(\"进入 this.state.truffleContract.deployed() 的回调函数\");\n            try{\n                i.getProduct(productId).then(async res => {\n                    //可能返回为空，要判断是否真的取到了数据，如果不判断，直接调用 formatProductInfo(res)，里面的 ipfs 会报错\n                    console.log(\"getProduct 取到的原始数据为 : \");\n                    console.dir(res);\n                    //通过 res[1]，也就是产品的name是否为空来判断\n                    if(res[1]===\"\"){\n                        message.error(\"该ID没有对应的商品\",2);\n                        return;\n                    }\n\n\n                    //格式化数据，便于显示\n                    let oneProductInfo = await this.formatProductInfo(res);\n                    console.log(\"格式化之后的数据 oneProductInfo 为 \");\n                    console.dir(oneProductInfo);\n\n                    this.setState({\n                        dataArray : [...this.state.dataArray, oneProductInfo]\n                    });\n\n                    //设置cookie，不怕刷新\n                    cookie.save('searchProductID', productId, {path:'/'});\n                    message.success(\"商品ID查询成功\",2);\n\n                    //根据当前的 res 和 状况，判断显示什么信息\n                    this.controlButtonAndInfo(res);\n                    \n                });  \n            }catch(err) {\n                message.error(\"商品ID查询失败\",2);\n                console.log(\"调用合约的getProduct方法失败 \" + err);\n            }\n\n            \n        });\n    }\n\n    //格式化商品信息，为渲染界面做准备\n    formatProductInfo = async(originInfo) => {\n        //从区块链里拿到的信息是这样的 res为\n        // 0: BN {negative: 0, words: Array(2), length: 1, red: null}\n        // 1: \"1212\"\n        // 2: \"艺术品,画作\"\n        // 3: 字符串数组 //product.imageLinkHash\n        // 4: \"Qmbc2XnQMmBjCPaXqWvPii1taM6VpvaWaDCGPMEm6y57nm\" //product.descHash\n        // 5: Array(3)\n            // 0: BN 开始时间(秒)\n            // 1: BN 结束时间(秒)\n            // 2: BN 揭示报价时长(分)\n        // 6: BN  //product.startPrice\n        // 7: BN  //product.status\n        // 8: BN  //product.condition\n\n        let oneProductInfo = {};\n        //格式化数据后为\n        // ID\n        // name\n        // category\n        // imageUrlArray URL字符串数组\n        // descString\n        // productCondition 全新 or 二手\n        // price\n        // originPrice\n        // processTime\n        // auctionStartTime\n        // auctionEndTime\n        // auctionRevealTime\n        // sellStatus 正在拍卖 or 卖出 or 未卖出\n\n        oneProductInfo.ID = parseInt(originInfo[0]);\n        oneProductInfo.name = originInfo[1];\n        oneProductInfo.category = originInfo[2];\n\n        //处理图片Url数组\n        let imageHashArray = originInfo[3];\n        let imageLinkArray = [];\n        let arrayLength = imageHashArray.length;\n        console.log(\"在详情页中渲染 \"+ arrayLength + \" 张图片\");\n        for(let index = 0; index < arrayLength; index++){\n            imageLinkArray[index] = ipfsReadUrlBefore + imageHashArray[index];\n        }\n        oneProductInfo.imageUrlArray = imageLinkArray;\n\n        let descString = \"商品介绍占位\";\n         await ipfs.cat(originInfo[4]).then(file => {\n             descString = file.toString();\n         })\n        oneProductInfo.descString = descString;\n        oneProductInfo.descLink = originInfo[4];\n        oneProductInfo.productCondition = (originInfo[8] ===0) ? \"全新\" : \"二手\";\n        oneProductInfo.price = handlePrice(originInfo[6]);\n        oneProductInfo.originPrice = originInfo[6];\n\n        //把三个时间从数组 originInfo[5] 中拿出来\n        //这三个都是 bignumber\n        let auctionStartTime = originInfo[5][0];\n        let auctionEndTime = originInfo[5][1];\n        let auctionRevealTime = originInfo[5][2];\n        oneProductInfo.processTime = handleTimeString(auctionEndTime, \"sell\"); //这里先写死了\n        //这个是原始数据\n        oneProductInfo.auctionOriginEndTime = auctionEndTime;\n        //这三个要格式化\n        oneProductInfo.auctionStartTime = moment(parseInt(auctionStartTime)*1000).format('yy年M月D日, h:mm:ss a');   \n        oneProductInfo.auctionEndTime = moment(parseInt(auctionEndTime)*1000).format('yy年M月D日, h:mm:ss a');\n        oneProductInfo.auctionRevealTime = parseInt(auctionRevealTime);\n        oneProductInfo.auctionRevealEndTime = moment(( parseInt(auctionEndTime) + 60*parseInt(auctionRevealTime) ) *1000).format('yy年M月D日, h:mm:ss a');\n\n        oneProductInfo.sellStatus = (originInfo[7] ==0) ? \"正在拍卖\" : ((originInfo[7] ==1) ? \"已售出\" : \"未售出\");\n        return oneProductInfo;\n    }\n\n    \n    render () {\n        //如果 cookie 中记录了 ID\n        // if(cookie.load('searchProductID') !== undefined){\n        //用 cookie 来判断显示哪个界面，要点两次提交，才能跳转到商品详情界面，并且传入了两个商品，改为使用 this.state.dataArray 是否有数据判断就好了\n        if(this.state.dataArray.length !== 0){\n            let productData = this.state.dataArray[0];\n\n            //竞拍结束时间\n            const bidDeadline = productData.auctionOriginEndTime * 1000; // 以毫秒为单位\n            //揭示报价结束时间\n            const revealDeadline = bidDeadline + productData.auctionRevealTime*60*1000 ; // 以毫秒为单位\n\n            const { Title, Paragraph, Text, Link } = Typography;\n\n            //倒计时结束时触发\n            function onFinish() {\n                console.log(\"finished!\");\n              }\n\n            return (\n                <div>        \n        \n                    <Typography>\n\n                    <Row\n                        align=\"middle\"\n                        justify=\"center\"\n                    >\n                        <Col span={24}>\n                        <Paragraph>\n                    <Carousel \n                        autoplay \n                        afterChange={() => console.log(\"轮番播放\")}\n                    >\n                    {\n                        productData.imageUrlArray.map (item => (\n                            <div>\n                                <Image \n                                    height={400}\n                                    src={item}\n                                    fallback=\"%PUBLIC_URL%/images/nullicon.svg\"\n                                   />\n                            </div>\n                        ))\n                    }  \n                    </Carousel>\n                    </Paragraph>\n                    \n\n                    <Paragraph>\n                    <Image.PreviewGroup>\n                    {\n                        productData.imageUrlArray.map (item => (\n                                <Image height={40} width={40} src={item} fallback=\"%PUBLIC_URL%/images/nullicon.svg\"/>\n                        ))\n                    }\n                    </Image.PreviewGroup>\n                    </Paragraph>\n                        </Col>\n                    </Row>\n                    \n                    <Divider />\n\n\n                    <Row>\n                        <Col span={12}>\n                            \n\n                        <Paragraph>\n                        <p><Title level={3}>{productData.name}</Title> <Tag  color=\"default\">{productData.sellStatus}</Tag></p>\n                        \n                        </Paragraph>\n\n                        <Paragraph>\n                        <span>\n                        <Tag icon={<CheckCircleOutlined />} color=\"success\">\n                            ID: {productData.ID}\n                        </Tag>\n                        <Tag icon={<MinusCircleOutlined />} color=\"default\">\n                            {productData.category}\n                        </Tag>\n                        <Tag icon={<ExclamationCircleOutlined />} color=\"warning\">\n                            {productData.productCondition}\n                        </Tag>\n                        <Tag icon={<ClockCircleOutlined />} color=\"default\">\n                            揭示报价时长 {productData.auctionRevealTime} 分钟\n                        </Tag>\n                        <Tag icon={<CheckCircleOutlined />} color=\"success\">\n                            区块链存证技术\n                        </Tag>\n                        </span>\n                        </Paragraph>\n                        \n\n\n                        <div>\n                        <p> </p>\n                        <p> </p>\n\n                        <Paragraph>\n            \n            <Card\n                hoverable\n                style={{ width: 400 }}\n                \n            >\n                \n    \n\n    <div>\n\n                    \n        {\n            this.state.bidVisible?(\n\n                <div>\n\n                <Col span={18} style={{ marginTop: 4 }}>\n                <Countdown \n                title=\"出示报价剩余时间\" \n                value={bidDeadline} \n                format=\"D 天 H 时 m 分 s 秒\"\n                onFinish={onFinish}\n                 />\n                </Col>\n                <Meta description=\"起拍价\"/>\n                <p> <b>{productData.price}</b></p>\n                <p></p>\n\n                \n                <Bid \n            //web3 和 truffleContract 由父组件传递进去，不用子组件自己生成\n            web3={this.state.web3}\n            truffleContract={this.state.truffleContract}\n            startPrice={productData.price}\n            dataArray={this.state.dataArray}\n                ></Bid>\n\n                </div>\n            ):null\n        }\n    </div>\n\n    <div>\n        {\n            this.state.revealVisible?(\n                <div>\n\n                <Col span={18} style={{ marginTop: 4 }}>\n                <Countdown \n                title=\"揭示报价剩余时间\" \n                value={revealDeadline} \n                format=\"D 天 H 时 m 分 s 秒\"\n                onFinish={onFinish}\n                 />\n                </Col>\n                <Meta description=\"起拍价\"/>\n                <p> <b>{productData.price}</b></p>\n                <p></p>\n                \n                <Reveal \n            web3={this.state.web3}\n            truffleContract={this.state.truffleContract}\n            dataArray={this.state.dataArray}\n                ></Reveal>\n\n                </div>\n            ):null\n        }\n    </div>\n\n    <div>\n        {\n            this.state.finalizeVisible?(\n                <div>\n                    \n                <Col span={18} style={{ marginTop: 4 }}>\n                <Countdown \n                title=\"揭示报价剩余时间\" \n                value={revealDeadline} \n                format=\"D 天 H 时 m 分 s 秒\"\n                onFinish={onFinish}\n                 />\n                </Col>\n                <Meta description=\"起拍价\"/>\n                <p> <b>{productData.price}</b></p>\n                <p></p>\n                \n                <Finalize \n            web3={this.state.web3}\n            truffleContract={this.state.truffleContract}\n            dataArray={this.state.dataArray}\n            onFinish={onFinish}\n            // showResell={this.showResellButton}\n            //向溯源合约写入信息\n            // tracingContract={this.state.tracingContract}\n                ></Finalize>\n\n                </div>\n            ):null\n        }\n    </div>\n\n    <div>\n        {\n            this.state.highestBidderInfoVisible?(\n                <div>\n                \n                <HighestBidderInfo \n            web3={this.state.web3}\n            truffleContract={this.state.truffleContract}\n            dataArray={this.state.dataArray}\n            resellProcess={this.setResellProcess}\n            //向溯源合约写入信息\n            // tracingContract={this.state.tracingContract}\n                ></HighestBidderInfo>\n\n                </div>\n            ):null\n        }\n    </div>\n\n\n    <div>\n        {\n            this.state.escrowInfoVisible?(\n                <div>\n                \n                <EscrowInfo\n            web3={this.state.web3}\n            truffleContract={this.state.truffleContract}\n            offButton ={this.offReleaseAndRefund}\n            showButton={this.showReleaseAndRefund}\n            showResell={this.showResellButton}\n            dataArray={this.state.dataArray}\n            //向溯源合约写入信息\n            // tracingContract={this.state.tracingContract}\n                ></EscrowInfo>\n\n                </div>\n            ):null\n        }\n    </div>\n\n    <div>\n        {\n            this.state.releaseAndRefundFundsVisible?(\n                <div>\n                \n                <ReleaseFunds \n            web3={this.state.web3}\n            truffleContract={this.state.truffleContract}\n            dataArray={this.state.dataArray}\n            //向溯源合约写入信息\n            // tracingContract={this.state.tracingContract}\n                ></ReleaseFunds>\n\n                <RefundFunds \n            web3={this.state.web3}\n            truffleContract={this.state.truffleContract}\n            dataArray={this.state.dataArray}\n            //向溯源合约写入信息\n            // tracingContract={this.state.tracingContract}\n                ></RefundFunds>\n\n                </div>\n            ):null\n        }\n    </div>\n\n    <div>\n\n                    \n        {\n            this.state.resellVisible?(\n\n                <div>\n                \n                <Resell\n            //web3 和 truffleContract 由父组件传递进去，不用子组件自己生成\n            web3={this.state.web3}\n            truffleContract={this.state.truffleContract}\n            productId={productData.ID}\n                ></Resell>\n\n                </div>\n            ):null\n        }\n    </div>\n        \n\n            </Card>\n            </Paragraph>\n      \n\n      \n    </div>\n\n\n\n                        </Col>\n                        <Col span={12}>\n\n                        <div>\n                        <Text strong>竞拍流程</Text>\n                        <p></p>\n        <Timeline pending=\"进行中\" >\n\n          <Timeline.Item >\n              <div>\n          {\n            this.state.startTimeVisible?(\n                <Tag icon={<SyncOutlined spin />} color=\"processing\"><p>竞价开始时间<Tag icon={<ClockCircleOutlined />} color=\"default\">{productData.auctionStartTime}</Tag></p></Tag>\n            ):<p>竞价开始时间<Tag icon={<ClockCircleOutlined />} color=\"default\">{productData.auctionStartTime}</Tag></p>\n        }\n        </div>\n              </Timeline.Item>\n\n              <Timeline.Item>\n              <div>\n          {\n            this.state.bidVisible?(\n                <Tag icon={<SyncOutlined spin />} color=\"processing\"><p>竞价人匿名出价，并支付押金</p></Tag>\n            ):<p>竞价人匿名出价，并支付押金</p>\n        }\n        </div>\n            </Timeline.Item>\n            \n            <Timeline.Item>\n            <div>\n          {\n            this.state.bidVisible?(\n                <Tag icon={<SyncOutlined spin />} color=\"processing\"><p>竞价结束时间<Tag icon={<ClockCircleOutlined />} color=\"default\">{productData.auctionEndTime}</Tag></p></Tag>\n            ):<p>竞价结束时间<Tag icon={<ClockCircleOutlined />} color=\"default\">{productData.auctionEndTime}</Tag></p>\n        }\n        </div>\n              </Timeline.Item>\n\n              <Timeline.Item>\n              <div>\n          {\n            this.state.revealVisible?(\n                <Tag icon={<SyncOutlined spin />} color=\"processing\"><p>竞价人揭示报价，取回多余押金</p></Tag>\n            ):<p>竞价人揭示报价，取回多余押金</p>\n        }\n        </div>    \n            </Timeline.Item>\n          \n          <Timeline.Item>\n          <div>\n          {\n            this.state.revealVisible?(\n                <Tag icon={<SyncOutlined spin />} color=\"processing\"><p>揭示结束时间<Tag icon={<ClockCircleOutlined />} color=\"default\">{productData.auctionRevealEndTime}</Tag></p></Tag>\n            ):<p>揭示结束时间<Tag icon={<ClockCircleOutlined />} color=\"default\">{productData.auctionRevealEndTime}</Tag></p>\n        }\n        </div> \n          </Timeline.Item>\n\n          <Timeline.Item>\n          <div>\n          {\n            this.state.finalizeVisible?(\n                <Tag icon={<SyncOutlined spin />} color=\"processing\"><p>等待仲裁人加入，生成资金托管合约</p></Tag>\n            ):<p>等待仲裁人加入，生成资金托管合约</p>\n        }\n        </div>        \n          </Timeline.Item>\n\n          <Timeline.Item>\n          <div>\n          {\n            this.state.highestBidderInfoVisible?(\n                <Tag icon={<SyncOutlined spin />} color=\"processing\"><p>公布最高出价人身份</p></Tag>\n            ):<p>公布最高出价人身份</p>\n        }\n        </div>       \n          </Timeline.Item>\n\n          <Timeline.Item>\n          <div>\n          {\n            this.state.releaseAndRefundFundsVisible?(\n                <Tag icon={<SyncOutlined spin />} color=\"processing\"><p>买家、卖家、仲裁人投票</p></Tag>\n            ):<p>买家、卖家、仲裁人投票</p>\n        }\n        </div>   \n          </Timeline.Item>\n\n          <Timeline.Item>\n          <div>\n          {\n            (true == this.state.escrowInfoVisible && false == this.state.releaseAndRefundFundsVisible)?(\n                <Tag icon={<CheckCircleOutlined />} color=\"success\"><p>触发智能合约，达成交易</p></Tag>\n            ):<p>触发智能合约，达成交易</p>\n        }\n        </div>\n                \n          </Timeline.Item>\n          \n        </Timeline>\n      </div>\n\n\n\n\n                       \n\n\n\n\n                    \n                        </Col>\n                    </Row>\n\n                    <Divider />\n\n                    <Row>\n                        <Col span={12}>\n                            \n                        <Text strong>商品介绍</Text>\n                        <p></p>\n    <Paragraph>\n      {productData.descString}\n    </Paragraph>\n\n    <Paragraph>\n      <ul>\n\n      {\n                        productData.imageUrlArray.map ((item,index) => (\n                            <li>\n                            <Link href={item}>商品图片链接{index+1}</Link>\n                            </li>\n                        ))\n    }  \n        <li>\n          <Link href={ipfsReadUrlBefore + productData.descLink}>商品介绍链接</Link>\n        </li>\n        <p>Power by IPFS星际文件系统</p>\n      </ul>\n    </Paragraph>\n                        \n\n\n                        </Col>\n\n\n                        <Col span={12}>\n                        <Paragraph>\n                        <Text strong>关键点溯源</Text>\n                        <p></p>\n\n                        <Tracing \n                    web3={this.state.web3}\n                    //读取溯源合约上的信息\n                    // tracingContract={this.state.tracingContract}\n                    //入口合约\n                    truffleContract={this.state.truffleContract}\n                    //拍卖商品类\n                    class={1}\n                    id={productData.ID}\n                        ></Tracing>\n                        \n                    </Paragraph>\n                  </Col>\n                    </Row>\n                    \n                                   \n                    \n\n\n  </Typography>\n  \n    \n        </div>\n            );\n        }\n\n        //如果cookie 中没有记录，就询问用户要查询的信息\n        else {\n            return (\n                <div style={{display:'flex', justifyContent:'center'}}>\n                <Card title=\"查询商品\" bordered={false} style={{ width: '80%' }} headStyle={{display:'flex', justifyContent:'center'}}>\n                    <Form\n                        initialValues={{\n                            remember: true,\n                        }}\n                        onFinish={this.onFinish}\n                        onFinishFailed={this.onFinishFailed}\n                        style={{margin:\"auto\", width:\"60%\", marginTop:\"15px\"}}\n                    >\n                        <Form.Item\n                            name=\"ProductID\"\n                            rules={[\n                                {\n                                    required: true,\n                                    message: '请输入商品ID',\n                                },\n                            ]}\n                        >\n                            <InputNumber placeholder=\"商品ID\" \n                            style={{\n                            width: '100%',\n                            }}/>\n                        </Form.Item>\n    \n\n    \n                        <Form.Item\n                            wrapperCol={{\n                                offset: 10,\n                                span: 16,\n                            }}\n                        >\n                            <Button disabled={ this.state.truffleContract === null || this.state.web3 === null } type=\"primary\" htmlType=\"submit\">\n                                查询\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Card>\n            </div>\n            );\n        }\n        \n    }\n}\n\nexport default ProductInfo;\n\n","/home/kzj/project/finalize/final/code/react_code/src/utils/handlePrice.js",[],"/home/kzj/project/finalize/final/code/react_code/src/utils/handleTimeString.js",[],"/home/kzj/project/finalize/final/code/react_code/src/pages/HelpInfo/index.jsx",["313","314","315","316"],"import React, { Component } from \"react\";\nimport 'antd/dist/antd.css';\nimport { Typography, Divider } from 'antd';\n\n\nclass HelpInfo extends Component {\n\n    render() {\n        const { Title, Paragraph, Text, Link } = Typography;\n\n        const blockContent = `AntV 是蚂蚁金服全新一代数据可视化解决方案，致力于提供一套简单方便、专业可靠、不限可能的数据可视化最佳实践。得益于丰富的业务场景和用户需求挑战，AntV 经历多年积累与不断打磨，已支撑整个阿里集团内外 20000+ 业务系统，通过了日均千万级 UV 产品的严苛考验。\n我们正在基础图表，图分析，图编辑，地理空间可视智能可视化等各个可视化的领域耕耘，欢迎同路人一起前行。`;\n        return (\n\n            <\n            Typography >\n\n            <\n\n            Title > 介绍 < /Title> <\n            Paragraph >\n            这是一个去中心化的，所有的商业逻辑和数据将会放在以太坊区块链上，使用智能合约托管资金的电子商务系统，旨在降低用户交易的中间费用，同时具有溯源、防伪等功能。 <\n            /Paragraph> \n           \n            </Typography>\n\n        );\n\n    }\n}\n\nexport default HelpInfo;","/home/kzj/project/finalize/final/code/react_code/src/components/Notification/index.jsx",[],"/home/kzj/project/finalize/final/code/react_code/src/components/Auction/Bid/index.jsx",["317","318","319","320","321","322","323","324","325","326"],"import React, {Component} from \"react\";\nimport { Menu, Layout, message, Drawer, Space, Button, Divider, Form, InputNumber, Input, Select } from 'antd';\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\";\n//接入web3\n// import getWeb3 from \"../../../utils/getWeb3\";\n// import getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport openNotification from \"../../Notification\";\n\nconst { Option } = Select;\n\nconst suffixSelector = (\n    <Form.Item name=\"PriceUnit\" noStyle>\n      <Select\n        style={{\n          width: 70,\n        }}\n      >\n        <Option selected=\"selected\" value=\"ETH\">ETH</Option>\n        <Option value=\"wei\">wei</Option>\n      </Select>\n    </Form.Item>\n);\n\n\n\nclass Bid extends Component {\n\n    state = {\n        visible: false\n    }\n\n    constructor (props) {\n        super (props);\n    }\n\n    componentDidMount () {\n         console.log(\"生成Bid模块\");\n    }\n\n    showDrawer = () => {\n        this.setState({\n          visible: true,\n        });\n      };\n    \n    onClose = () => {\n        this.setState({\n          visible: false,\n        });\n      };\n      \n    //点击提交竞拍按钮，表单可以提交时\n    onFinishBid = (values) => {\n        console.log(\"竞拍提交按钮被点击，onFinishBid 得到的数据为 : \");\n        console.dir(values);\n        //values 中的数据示意\n        // BidAmount: 1\n        // BidSecret: \"33\"\n        // PriceUnit: \"ETH\"\n        // SendAmount: 2\n\n        if(this.props.dataArray.length === 0){\n            message.error(\"找不到正在竞拍的商品\");\n            return;\n        }\n        if(values.PriceUnit === undefined){\n            message.error(\"请指定价格单位\");\n            return;\n        }\n        //判断是否符合竞拍规则\n        if(values.BidAmount > values.SendAmount){\n            message.error(\"押金低于竞拍价\", 2);\n            return;\n        }\n        //把价格单位换算成wei进行比较，这里的换算写死了，后期改成 web3 中的换算方法\n        console.log(\"竞拍使用的价格单位 : \" + values.PriceUnit);\n        let bidPrice = (values.PriceUnit === \"ETH\") ? (values.BidAmount*1e18) : values.BidAmount;\n        let sendPrice = (values.PriceUnit === \"ETH\") ? (values.SendAmount*1e18) : values.SendAmount;\n        let startPrice = this.props.dataArray[0].originPrice;\n        //startPrice 与 bidPrice 的单位都是 wei\n        console.log(\"起拍价 : \" + startPrice + \", 竞拍价 : \" + bidPrice);\n        if(bidPrice < startPrice){\n            message.error(\"竞拍价低于起拍价\", 2);\n            return;\n        }\n        let blockChainID = this.props.dataArray[0].ID;\n        console.log(\"竞拍商品ID : \" + blockChainID);\n\n        let web3 = this.props.web3;\n\n        //注意这里的解析方式应和合约代码中的对应\n        // let sealedBid = web3.utils.keccak256(web3.utils.toWei(string(amount), 'ether'));\n        //这里传给toWei的第一个参数不要求是字符串类型的，与truffle中使用toWei不同\n        console.log(\"传给keccak256的参数是 \" + (\"\" + bidPrice) + values.BidSecret);\n        //信息加密\n        let sealedBid = web3.utils.keccak256((\"\" + bidPrice) + values.BidSecret).toString('hex');\n        console.log(\"用 keccak256 加密之后 sealedBid = \" + sealedBid);\n\n        //竞价信息上链\n\n        //注意回调函数中的this，和外界的this不同，如果向使用外界的this，要赋值成that传过去\n        //注意要使用async，确保先拿到地址，用await关键字确保运行的先后顺序，再用这个地址调用合约方法\n        let that = this;\n        this.props.truffleContract.deployed().then(async (i) => {\n            console.log(\"进入 this.props.truffleContract.deployed() 的回调函数\");\n            //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n            //即时获取当前地址，用该地址发交易\n            let currentAccount = await web3.eth.getAccounts();\n            message.info(\"交易发起地址为: \"+currentAccount, 2);\n            console.log(\"交易发起地址为: \"+currentAccount);\n\n            try{\n                //调用合约的 bid 方法\n                await i.bid(parseInt(blockChainID), sealedBid, { from: currentAccount.toString(), value: sendPrice}).then(res => {\n                    //注意这里调用合约方法使用的地址，必须是字符串形式，要用 toString() 转化为字符串\n                    message.success(\"竞价提交成功\");\n                    console.log(\"成功调用合约的bid方法，返回 : \");\n                    console.dir(res);\n                    //关闭侧边栏\n                    this.onClose();\n                    openNotification(\"竞价提交成功\",\n                                    \"您的报价: \" + values.BidAmount + values.PriceUnit + \", 您的押金: \" + values.SendAmount + values.PriceUnit + \", 距离揭示报价 \" + this.props.dataArray[0].processTime ,\n                                    'bottomLeft');\n                });\n            }catch(err) {\n                message.error(\"向链上提交竞价信息失败\",2);\n                console.log(\"调用合约的bid方法失败, err = \");\n                console.dir(err);\n                return;\n            }  \n        });\n\n    }\n\n    //点击提交竞拍按钮，表单不能提交时\n    onFinishFailedBid = (errorInfo) => {\n        message.warning(\"请正确填写竞拍信息\",2);\n    }\n    \n    render () {\n        return (\n\n\n            <div>\n\n                <Button type=\"primary\" icon={<RocketOutlined />} size={\"large\"} onClick={this.showDrawer}>\n                参与竞拍\n                </Button>\n\n            <Drawer\n          title=\"出示您的报价\"\n          width={400}\n          onClose={this.onClose}\n          visible={this.state.visible}\n          bodyStyle={{ paddingBottom: 80 }}\n          extra={\n            <Space>\n              <Button onClick={this.onClose}>取消</Button>\n            </Space>\n          }\n        >\n            <p>起拍价: <b>{this.props.startPrice}</b></p>\n            <Divider />\n          <Form \n            layout=\"vertical\" hideRequiredMark\n            onFinish={this.onFinishBid}\n            onFinishFailed={this.onFinishFailedBid}\n            \n          >\n            <Form.Item\n                name=\"BidAmount\"\n                label=\"竞拍价格\"\n                rules={[\n                        {\n                            required: true,\n                            message: '请输入竞拍价格',\n                        },\n                ]}\n            >\n            <InputNumber\n                min={0}\n                placeholder=\"竞拍价格不低于起拍价\"\n                addonAfter={suffixSelector}\n                style={{\n                    width: '100%',\n                }}\n            />\n            </Form.Item>\n            <Form.Item\n                name=\"SendAmount\"\n                label=\"竞拍押金\"\n                rules={[\n                        {\n                            required: true,\n                            message: '请输入竞拍押金',\n                        },\n                ]}\n            >\n            <InputNumber\n                min={0}\n                placeholder=\"竞拍押金不低于您出示的竞拍价格\"\n                addonAfter={suffixSelector}\n                style={{\n                    width: '100%',\n                }}\n            />\n            </Form.Item>\n\n            <Form.Item\n                name=\"BidSecret\"\n                label=\"加密口令\"\n                rules={[\n                        {\n                            required: true,\n                            message: '请输入加密口令',\n                        },\n                ]}\n            >\n                <Input.Password\n                placeholder=\"在之后的揭示报价环节中使用的加密口令\"\n                iconRender={visible => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\n                />\n            </Form.Item>\n            <Form.Item>\n                <Button \n                //这里不需要 onClick，不然会使函数 onFinishBid 收到参数 SyntheticBaseEvent\n                // onClick={this.onFinishBid}\n                type=\"primary\" \n                htmlType=\"submit\"\n                disabled={ this.props.truffleContract === null || this.props.web3 === null } \n                >\n                提交\n              </Button>\n            </Form.Item>\n\n          </Form>\n        </Drawer>\n\n            </div>\n        );\n    }\n}\n\nexport default Bid;\n","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/Reveal/index.jsx",["327","328","329","330","331","332","333","334","335","336","337"],"import React, {Component} from \"react\";\nimport { Menu, Layout, message, Drawer, Space, Button, Divider, Form, InputNumber, Input, Select } from 'antd';\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\";\n//接入web3\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport openNotification from \"../../Notification\";\n\nconst { Option } = Select;\n\nconst suffixSelector = (\n    <Form.Item name=\"PriceUnit\" noStyle>\n      <Select\n        style={{\n          width: 70,\n        }}\n      >\n        <Option selected=\"selected\" value=\"ETH\">ETH</Option>\n        <Option value=\"wei\">wei</Option>\n      </Select>\n    </Form.Item>\n);\n\n\n\nclass Reveal extends Component {\n\n    state = {\n        visible: false\n    }\n\n    constructor (props) {\n        super (props);\n    }\n\n    async componentDidMount () {\n        console.log(\"生成Reveal模块\");\n    }\n\n    showDrawer = () => {\n        this.setState({\n          visible: true,\n        });\n      };\n    \n    onClose = () => {\n        this.setState({\n          visible: false,\n        });\n      };\n\n    //点击提交竞拍按钮，表单可以提交时\n    onFinishReveal = (values) => {\n        console.log(\"揭示报价提交按钮被点击，onFinishReveal 得到的数据为 : \");\n        console.dir(values);\n        //values 中的数据示意\n        // BidSecret: \"k10\"\n        // PriceUnit: \"ETH\"\n        // RevealAmount: 4\n\n        if(this.props.dataArray.length === 0){\n            message.error(\"找不到正在竞拍的商品\");\n            return;\n        }\n        if(values.PriceUnit === undefined){\n            message.error(\"请指定价格单位\");\n            return;\n        }\n\n        let web3 = this.props.web3;\n        //把价格单位换算成wei进行比较，这里的换算写死了，后期改成 web3 中的换算方法\n        console.log(\"揭示报价使用的价格单位 : \" + values.PriceUnit);\n\n        //处理价格，把单位转为 wei\n        let revealPrice = -1;\n        if(values.PriceUnit === \"ETH\"){\n          revealPrice = web3.utils.toWei(values.RevealAmount+\"\", 'ether');\n        }else if(values.PriceUnit === \"wei\"){\n          revealPrice = parseInt(values.RevealAmount);\n        }\n        console.log(\"揭示价 : \" + revealPrice);\n        let blockChainID = this.props.dataArray[0].ID;\n        console.log(\"竞拍商品ID : \" + blockChainID);\n\n        //这里与 Bid 中的相同部位不同，Bid在这里加密，在传给区块链方法\n        //Reveal 这里不加密，将明文传递给区块链方法\n\n        //揭示报价信息上链\n        let that = this;\n        this.props.truffleContract.deployed().then(async (i) => {\n            console.log(\"进入 this.props.truffleContract.deployed() 的回调函数\");\n            //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n            //即时获取当前地址，用该地址发交易\n            let currentAccount = await web3.eth.getAccounts();\n            message.info(\"交易发起地址为: \"+currentAccount, 2);\n            console.log(\"交易发起地址为: \"+currentAccount);\n\n            try{\n                //调用合约的 revealBid 方法\n                //传入两个不同格式的 revealPrice\n                await i.revealBid(parseInt(blockChainID), revealPrice.toString(), revealPrice, values.BidSecret, { from: currentAccount.toString(), gas:440000 }).then(res => {\n                    //注意这里调用合约方法使用的地址，必须是字符串形式，要用 toString() 转化为字符串\n                    message.success(\"揭示报价成功\");\n                    console.log(\"成功调用合约的revealBid方法，返回 : \");\n                    console.dir(res);\n                    //关闭侧边栏\n                    this.onClose();\n                    openNotification(\"揭示报价成功\",\n                                    \"您的报价: \" + values.RevealAmount + values.PriceUnit + \", 您多余的押金已经退回, 在揭示报价时间截止时, 平台自动使用次高报价, 撮合最高报价者与卖家交易\" ,\n                                    'bottomLeft');\n                });\n            }catch(err) {\n                message.error(\"向链上提交揭示竞价信息失败\",2);\n                console.log(\"调用合约的revealBid方法失败 \");\n                console.dir(err);\n                return;\n            }  \n        });\n\n    }\n\n\n    //点击提交竞拍按钮，表单不能提交时\n    onFinishFailedReveal = (errorInfo) => {\n        message.warning(\"请正确填写竞拍信息\",2);\n    }\n\n   \n\n \n    \n    render () {\n        return (\n\n\n          <div>\n\n            <Button type=\"primary\" icon={<RocketOutlined />} size={\"large\"} onClick={this.showDrawer}>\n                揭示报价\n            </Button>\n\n            <Drawer\n          title=\"揭示您的报价\"\n          width={400}\n          onClose={this.onClose}\n          visible={this.state.visible}\n          bodyStyle={{ paddingBottom: 80 }}\n          extra={\n            <Space>\n              <Button onClick={this.onClose}>取消</Button>\n            </Space>\n          }\n        >\n            <Divider />\n          <Form \n            layout=\"vertical\" hideRequiredMark\n            onFinish={this.onFinishReveal}\n            onFinishFailed={this.onFinishFailedReveal}\n            \n          >\n            <Form.Item\n                name=\"RevealAmount\"\n                label=\"揭示报价\"\n                rules={[\n                        {\n                            required: true,\n                            message: '请揭示竞拍价格',\n                        },\n                ]}\n            >\n            <InputNumber\n                min={0}\n                placeholder=\"竞拍时输入的价格\"\n                addonAfter={suffixSelector}\n                style={{\n                    width: '100%',\n                }}\n            />\n            </Form.Item>\n            <Form.Item\n                name=\"BidSecret\"\n                label=\"加密口令\"\n                rules={[\n                        {\n                            required: true,\n                            message: '请与在竞价环节中输入的加密口令一致',\n                        },\n                ]}\n            >\n                <Input.Password\n                placeholder=\"您在竞价环节中使用的加密口令\"\n                iconRender={visible => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\n                />\n            </Form.Item>\n            <Form.Item>\n                <Button \n                type=\"primary\" \n                htmlType=\"submit\"\n                disabled={ this.props.truffleContract === null || this.props.web3 === null } \n                >\n                提交\n              </Button>\n            </Form.Item>\n\n          </Form>\n        </Drawer>\n\n            </div>\n\n            \n        );\n    }\n}\n\nexport default Reveal;\n","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/Finalize/index.jsx",["338","339","340","341","342","343","344","345","346","347","348","349"],"import React, {Component} from \"react\";\nimport { Menu, Layout, message, Drawer, Space, Button, Divider, Typography, Form, InputNumber, Input, Select, Tag } from 'antd';\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\";\n//接入web3\n\nimport openNotification from \"../../Notification\";\n\n\nconst { Option } = Select;\n\nconst suffixSelector = (\n    <Form.Item name=\"PriceUnit\" noStyle>\n      <Select\n        style={{\n          width: 70,\n        }}\n      >\n        <Option selected=\"selected\" value=\"ETH\">ETH</Option>\n        <Option value=\"wei\">wei</Option>\n      </Select>\n    </Form.Item>\n);\n\n\nclass Finalize extends Component {\n\n    state = {\n        visible: false\n    }\n\n    constructor (props) {\n        super (props);\n    }\n\n\n    async componentDidMount () {\n        console.log(\"生成Finalize模块\");\n    }\n\n    showDrawer = () => {\n        this.setState({\n          visible: true,\n        });\n      };\n    \n    onClose = () => {\n        this.setState({\n          visible: false,\n        });\n      };\n\n    //点击提交竞拍按钮，表单可以提交时\n    onFinishFinalize = (values) => {\n        console.log(\"申请成为仲裁人按钮被点击，onFinishFinalize 得到的数据为 : \");\n        console.dir(values);\n        //values 中的数据示意\n        // PriceUnit: \"ETH\"\n        // ArbiterAmount: 6\n\n        if(values.PriceUnit === undefined){\n          message.error(\"请指定价格单位\");\n          return;\n      }\n\n        if(this.props.dataArray.length === 0){\n            message.error(\"找不到正在竞拍的商品\");\n            return;\n        }\n\n        let web3 = this.props.web3;\n        //处理价格，把单位转为 wei\n        let arbiterPrice = -1;\n        if(values.PriceUnit === \"ETH\"){\n          arbiterPrice = web3.utils.toWei(values.ArbiterAmount.toString(), 'ether');\n        }else if(values.PriceUnit === \"wei\"){\n          arbiterPrice = parseInt(values.ArbiterAmount);\n        }\n\n        let blockChainID = this.props.dataArray[0].ID;\n        console.log(\"竞拍商品ID : \" + blockChainID + \"仲裁押金 : \" + arbiterPrice + \" wei\");\n\n\n        //仲裁人信息上链 和 支付押金\n        let that = this;\n        this.props.truffleContract.deployed().then(async (i) => {\n            console.log(\"进入 this.props.truffleContract.deployed() 的回调函数\");\n            //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n            //即时获取当前地址，用该地址发交易\n            let currentAccount = await web3.eth.getAccounts();\n            message.info(\"交易发起地址为: \"+currentAccount, 2);\n            console.log(\"交易发起地址为: \"+currentAccount);\n\n            try{\n\n                //调用合约的 finalizeAuction 方法\n                await i.finalizeAuction(parseInt(blockChainID), { from: currentAccount.toString(),  value: arbiterPrice }).then(res => {\n                    //注意这里调用合约方法使用的地址，必须是字符串形式，要用 toString() 转化为字符串\n                    message.success(\"仲裁人申请成功\");\n                    console.log(\"成功调用合约的finalizeAuction方法，返回 : \");\n                    console.dir(res);\n\n                    \n\n                    //关闭侧边栏\n                    this.onClose();\n                    openNotification(\"仲裁人申请成功\",\n                                    \"当买家与卖家发生交易纠纷时, 您可介入, 进行仲裁\" ,\n                                    'bottomLeft');\n                    \n                    //刷新显示的product信息\n                    this.props.onFinish();\n                });\n\n                // 新版本使用 合约调用合约的形式，避免多次使用钱包转账gas，体验更好\n                //废弃\n                // that.props.tracingContract.deployed().then(async (i) =>{\n                //     try{\n                //       await i.addOneLineToInfoLine(1, blockChainID, \"成为仲裁人\", moment(Date()).format('yy年M月D日, h:mm:ss a'), { from: currentAccount.toString() }).then(res =>{\n                //         console.log(\"成功添加成为仲裁人的溯源信息，返回 : \");\n                //         console.dir(res);\n                //       })\n                //     }catch(err){\n                //       message.error(\"添加仲裁人溯源信息失败\",2);\n                //       console.log(\"调用溯源合约的addOneLineToInfoLine方法失败 \" + err);\n                //       return;\n                //     }\n                // })\n\n            }catch(err) {\n                message.error(\"申请成为仲裁人失败, 买家和卖家不能申请当仲裁人, 任意的第三者可以\",2);\n                console.log(\"调用合约的finalizeAuction方法失败 \");\n                console.dir(err);\n                return;\n            }  \n\n          //   try{\n          //     //调用合约的 highestBidderInfo 方法\n          //     await i.highestBidderInfo(parseInt(blockChainID)).then(info => {\n          //         console.log(\"成功调用合约的highestBidderInfo方法，返回 : \");\n          //         console.dir(info);\n          //         let highestBidderString = \"\";\n          //         if (info[2].toLocaleString() == '0') {\n          //             //没有人揭示报价\n          //             highestBidderString = \"拍卖结束，没有人揭示报价\";\n          //         } else {\n          //             //有人出价\n          //             highestBidderString = \"拍卖结束，最高出价竞拍人 (\" + info[0] + \") 以次高价格 (\" + handlePrice(info[2]) + \") 赢得竞拍\";\n          //         }\n\n          //       // 新版本使用 合约调用合约的形式，避免多次使用钱包转账gas，体验更好\n          //       //废弃\n          //       // that.props.tracingContract.deployed().then(async (i) =>{\n          //       //     try{\n          //       //       await i.addOneLineToInfoLine(1, blockChainID, highestBidderString, moment(Date()).format('yy年M月D日, h:mm:ss a'), { from: currentAccount.toString() }).then(res =>{\n          //       //         console.log(\"成功添加最高出价者的溯源信息，返回 : \");\n          //       //         console.dir(res);\n          //       //       })\n          //       //     }catch(err){\n          //       //       message.error(\"添加仲裁人溯源信息失败\",2);\n          //       //       console.log(\"调用溯源合约的addOneLineToInfoLine方法失败 \" + err);\n          //       //       return;\n          //       //     }\n          //       // })\n\n\n                  \n          //     });\n          // }catch(err) {\n          //     message.error(\"查询最高竞价人信息失败\",2);\n          //     console.log(\"调用合约的highestBidderInfo方法失败 \" + err);\n          //     return;\n          // }  \n        });\n\n    }\n\n\n    //点击提交竞拍按钮，表单不能提交时\n    onFinishFailedFinalize = (errorInfo) => {\n        message.warning(\"请正确填写信息\",2);\n    }\n\n   \n\n \n    \n    render () {\n        const { Paragraph } = Typography;\n        return (\n          \n\n          <div>\n\n                          <Button type=\"primary\" icon={<RocketOutlined />} size={\"large\"} onClick={this.showDrawer}>\n                申请成为仲裁人\n            </Button>\n\n            <Drawer\n          title=\"申请成为仲裁人\"\n          width={400}\n          onClose={this.onClose}\n          visible={this.state.visible}\n          bodyStyle={{ paddingBottom: 80 }}\n          extra={\n            <Space>\n              <Button onClick={this.onClose}>取消</Button>\n            </Space>\n          }\n        >\n            <Divider />\n          <Form \n            layout=\"vertical\" hideRequiredMark\n            onFinish={this.onFinishFinalize}\n            onFinishFailed={this.onFinishFailedFinalize}\n            \n          >\n            <Form.Item\n                name=\"ArbiterAmount\"\n                label=\"仲裁押金\"\n                rules={[\n                        {\n                            required: true,\n                            message: '请输入仲裁押金',\n                        },\n                ]}\n            >\n            <InputNumber\n                min={0}\n                placeholder=\"当买家与卖家的交易完成后全额返还\"\n                addonAfter={suffixSelector}\n                style={{\n                    width: '100%',\n                }}\n            />\n            </Form.Item>\n\n            <Form.Item>\n                <Button \n                type=\"primary\" \n                htmlType=\"submit\"\n                disabled={ this.props.truffleContract === null || this.props.web3 === null } \n                >\n                提交\n              </Button>\n            </Form.Item>\n            <Paragraph >\n            <p> </p>\n            </Paragraph>\n            <Paragraph >\n            <blockquote> <p>当买家与卖家交易成功时，您会得到</p> <p><Tag>1% 买卖双方交易额</Tag>与<Tag>10% 仲裁押金</Tag></p> <p>中的<Tag>较小者</Tag>作为报酬</p></blockquote> \n            </Paragraph>\n\n          </Form>\n        </Drawer>\n\n            </div>\n\n          \n\n            \n        );\n    }\n}\n\nexport default Finalize;\n","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/ReleaseFunds/index.jsx",["350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365"],"import React, {Component} from \"react\";\nimport { Menu, Layout, message, Drawer, Space, Button, Divider, Form, InputNumber, Input, Select } from 'antd';\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\";\n//接入web3\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport openNotification from \"../../Notification\";\nimport moment from \"moment\";\n\nconst { Option } = Select;\n\n\nclass ReleaseFunds extends Component {\n\n    state = {\n        visible: false\n    }\n\n    constructor (props) {\n        super (props);\n    }\n\n    async componentDidMount () {\n        console.log(\"生成ReleaseFunds模块\");\n    }\n\n    showDrawer = () => {\n        this.setState({\n          visible: true,\n        });\n      };\n    \n    onClose = () => {\n        this.setState({\n          visible: false,\n        });\n      };\n\n    //点击提交竞拍按钮，表单可以提交时\n    onFinishReleaseFunds = (values) => {\n        console.log(\"申请成为仲裁人按钮被点击，onFinishReleaseFunds 得到的数据为 : \");\n        console.dir(values);\n        //values 中的数据示意\n\n        if(this.props.dataArray.length === 0){\n            message.error(\"找不到的商品\");\n            return;\n        }\n\n        let blockChainID = this.props.dataArray[0].ID;\n        console.log(\"竞拍商品ID : \" + blockChainID);\n\n        //仲裁人信息上链\n        let that = this;\n        this.props.truffleContract.deployed().then(async (i) => {\n            console.log(\"进入 this.props.truffleContract.deployed() 的回调函数\");\n            //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n            //即时获取当前地址，用该地址发交易\n            let currentAccount = await that.props.web3.eth.getAccounts();\n            message.info(\"交易发起地址为: \"+currentAccount, 2);\n            console.log(\"交易发起地址为: \"+currentAccount);\n\n            try{\n                //调用合约的 releaseAmountToSeller 方法\n                await i.releaseAmountToSeller(parseInt(blockChainID), { from: currentAccount.toString() }).then(res => {\n                    //注意这里调用合约方法使用的地址，必须是字符串形式，要用 toString() 转化为字符串\n                    message.success(\"提交放款申请成功\");\n                    console.log(\"成功调用合约的releaseAmountToSeller方法，返回 : \");\n                    console.dir(res);\n                    //关闭侧边栏\n                    this.onClose();\n                    openNotification(\"提交放款申请成功\",\n                                    \"三个人(卖家, 买家, 仲裁人)中的两人意见达成一致时, 会触发智能合约, 进行放款或退款的操作\" ,\n                                    'bottomLeft');\n\n                          //换用新版本\n                          //废弃\n                          // that.props.tracingContract.deployed().then(async (i) =>{\n                          //     try{\n                          //         await i.addOneLineToInfoLine(1, blockChainID, \"同意释放资金给卖家\", moment(Date()).format('yy年M月D日, h:mm:ss a'), { from: currentAccount.toString() }).then(res =>{\n                          //         console.log(\"成功添加释放资金的溯源信息，返回 : \");\n                          //         console.dir(res);\n                          //       })\n                          //     }catch(err){\n                          //       message.error(\"添加释放资金溯源信息失败\",2);\n                          //       console.log(\"调用溯源合约的addOneLineToInfoLine方法失败 \" + err);\n                          //       return;\n                          //     }\n                          // })                    \n                });\n            }catch(err) {\n                message.error(\"提交放款申请失败, 如果你不是(卖家, 买家, 仲裁人)三者之一, 这个操作对你来说是无效的\",2);\n                console.log(\"调用合约的releaseAmountToSeller方法失败 \");\n                console.dir(err);\n                return;\n            }  \n        });\n\n    }\n\n\n    //点击提交竞拍按钮，表单不能提交时\n    onFinishFailedReleaseFunds = (errorInfo) => {\n        message.warning(\"请正确填写信息\",2);\n    }\n\n   \n\n \n    \n    render () {\n        return (\n\n          <div>\n\n                          <Button type=\"primary\" icon={<RocketOutlined />} size={\"large\"} onClick={this.showDrawer}>\n                释放资金给卖家\n            </Button>\n\n            <Drawer\n          title=\"释放资金给卖家\"\n          width={400}\n          onClose={this.onClose}\n          visible={this.state.visible}\n          bodyStyle={{ paddingBottom: 80 }}\n          extra={\n            <Space>\n              <Button onClick={this.onClose}>取消</Button>\n            </Space>\n          }\n        >\n            <p>请确认您是 (卖家, 买家, 仲裁人) 三者之一</p>\n            <Divider />\n          <Form \n            layout=\"vertical\" hideRequiredMark\n            onFinish={this.onFinishReleaseFunds}\n            onFinishFailed={this.onFinishFailedReleaseFunds}\n            \n          >\n            <Form.Item>\n                <Button \n                type=\"primary\" \n                htmlType=\"submit\"\n                disabled={ this.props.truffleContract === null || this.props.web3 === null } \n                >\n                确定\n              </Button>\n            </Form.Item>\n\n          </Form>\n        </Drawer>\n\n            </div>\n\n        );\n    }\n}\n\nexport default ReleaseFunds;\n","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/RefundFunds/index.jsx",["366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381"],"import React, {Component} from \"react\";\nimport { Menu, Layout, message, Drawer, Space, Button, Divider, Form, InputNumber, Input, Select } from 'antd';\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\";\n//接入web3\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport openNotification from \"../../Notification\";\nimport moment from \"moment\";\n\nconst { Option } = Select;\n\n\nclass RefundFunds extends Component {\n\n    state = {\n        visible: false\n    }\n\n    constructor (props) {\n        super (props);\n    }\n\n    async componentDidMount () {\n        console.log(\"生成RefundFunds模块\");\n    }\n\n    showDrawer = () => {\n        this.setState({\n          visible: true,\n        });\n      };\n    \n    onClose = () => {\n        this.setState({\n          visible: false,\n        });\n      };\n\n    //点击提交竞拍按钮，表单可以提交时\n    onFinishRefundFunds = (values) => {\n        console.log(\"申请成为仲裁人按钮被点击，onFinishRefundFunds 得到的数据为 : \");\n        console.dir(values);\n        //values 中的数据示意\n\n        if(this.props.dataArray.length === 0){\n            message.error(\"找不到商品\");\n            return;\n        }\n\n        let blockChainID = this.props.dataArray[0].ID;\n        console.log(\"竞拍商品ID : \" + blockChainID);\n\n        //仲裁人信息上链\n        let that = this;\n        this.props.truffleContract.deployed().then(async (i) => {\n            console.log(\"进入 this.props.truffleContract.deployed() 的回调函数\");\n            //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n            //即时获取当前地址，用该地址发交易\n            let currentAccount = await that.props.web3.eth.getAccounts();\n            message.info(\"交易发起地址为: \"+currentAccount, 2);\n            console.log(\"交易发起地址为: \"+currentAccount);\n\n            try{\n              //调用合约的 refundAmountToBuyer 方法\n              await i.refundAmountToBuyer(parseInt(blockChainID), { from: currentAccount.toString() }).then(res => {\n                  //注意这里调用合约方法使用的地址，必须是字符串形式，要用 toString() 转化为字符串\n                  message.success(\"提交退款申请成功\");\n                  console.log(\"成功调用合约的refundAmountToBuyer方法，返回 : \");\n                  console.dir(res);\n                  //关闭侧边栏\n                  this.onClose();\n                  openNotification(\"提交退款申请成功\",\n                                  \"三个人(卖家, 买家, 仲裁人)中的两人意见达成一致时, 会触发智能合约, 进行放款或退款的操作\" ,\n                                  'bottomLeft');\n\n                        //同理废弃\n                        //   that.props.tracingContract.deployed().then(async (i) =>{\n                        //     try{\n                        //         await i.addOneLineToInfoLine(1, blockChainID, \"同意退还资金给买家\", moment(Date()).format('yy年M月D日, h:mm:ss a'), { from: currentAccount.toString() }).then(res =>{\n                        //         console.log(\"成功添加退还资金的溯源信息，返回 : \");\n                        //         console.dir(res);\n                        //       })\n                        //     }catch(err){\n                        //       message.error(\"添加退还资金溯源信息失败\",2);\n                        //       console.log(\"调用溯源合约的addOneLineToInfoLine方法失败 \" + err);\n                        //       return;\n                        //     }\n                        //  })\n              });\n          }catch(err) {\n              message.error(\"提交退款申请失败, 如果你不是(卖家, 买家, 仲裁人)三者之一, 这个操作对你来说是无效的\",2);\n              console.log(\"调用合约的releaseAmountToSeller方法失败 \");\n              console.dir(err);\n              return;\n          }  \n        });\n\n    }\n\n\n    //点击提交竞拍按钮，表单不能提交时\n    onFinishFailedRefundFunds = (errorInfo) => {\n        message.warning(\"请正确填写信息\",2);\n    }\n\n   \n\n \n    \n    render () {\n        return (\n\n          <div>\n\n                          <Button type=\"primary\" icon={<RocketOutlined />} size={\"large\"} onClick={this.showDrawer}>\n            退还资金给买家\n            </Button>\n\n            <Drawer\n          title=\"退还资金给买家\"\n          width={400}\n          onClose={this.onClose}\n          visible={this.state.visible}\n          bodyStyle={{ paddingBottom: 80 }}\n          extra={\n            <Space>\n              <Button onClick={this.onClose}>取消</Button>\n            </Space>\n          }\n        >\n            <p>请确认您是 (卖家, 买家, 仲裁人) 三者之一</p>\n            <Divider />\n          <Form \n            layout=\"vertical\" hideRequiredMark\n            onFinish={this.onFinishRefundFunds}\n            onFinishFailed={this.onFinishFailedRefundFunds}\n            \n          >\n            <Form.Item>\n                <Button \n                type=\"primary\" \n                htmlType=\"submit\"\n                disabled={ this.props.truffleContract === null || this.props.web3 === null } \n                >\n                确定\n              </Button>\n            </Form.Item>\n\n          </Form>\n        </Drawer>\n\n            </div>\n\n\n        );\n    }\n}\n\nexport default RefundFunds;\n","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/HighestBidderInfo/index.jsx",["382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404"],"import React, {Component} from \"react\";\nimport { Menu, Layout, message, Drawer, Space, Button, Divider, Form, InputNumber, Input, Select, Tag } from 'antd';\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\";\n//接入web3\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport openNotification from \"../../Notification\";\n//价格格式化\nimport handlePrice from '../../../utils/handlePrice';\n\n\n\nclass HighestBidderInfo extends Component {\n\n    state = {\n        highestBidderExist : false,\n        address : \"0x0\",\n        price : \"price\"\n\n    }\n\n    componentDidMount = async () => {\n        console.log(\"生成HighestBidderInfo模块\");\n        this.getInfoFromBlockchain();\n    }\n\n    getInfoFromBlockchain = () => {\n        let blockChainID = this.props.dataArray[0].ID;\n        console.log(\"竞拍商品ID : \" + blockChainID);\n\n        let that = this;\n        this.props.truffleContract.deployed().then(async (i) => {\n            console.log(\"进入 this.props.truffleContract.deployed() 的回调函数\");\n            //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n            //即时获取当前地址，用该地址发交易\n            let currentAccount = await that.props.web3.eth.getAccounts();\n            console.log(\"交易发起地址为: \"+currentAccount);\n\n            try{\n                //调用合约的 highestBidderInfo 方法\n                await i.highestBidderInfo(parseInt(blockChainID)).then(info => {\n                    console.log(\"成功调用合约的highestBidderInfo方法，返回 : \");\n                    console.dir(info);\n                    let highestBidderString = \"\";\n                    if (info[2].toLocaleString() != '0') {\n                        //有人揭示报价\n                        this.setState({\n                            highestBidderExist : true,\n                            address : info[0],\n                            price : handlePrice(info[2]),\n                        })\n                    } \n                    else {\n                        //没有人揭示报价\n                        //直接进入转卖阶段\n                        this.props.resellProcess();\n                    }\n                    message.success(\"查询最高竞价人信息成功\",2);\n                    \n                });\n            }catch(err) {\n                message.error(\"查询最高竞价人信息失败\",2);\n                console.log(\"调用合约的highestBidderInfo方法失败 \" + err);\n                return;\n            }  \n        });\n    }\n   \n\n \n    \n    render () {\n        return (\n        <div>\n\n            <div>\n          {\n            this.state.highestBidderExist?(\n                <div>\n                <p>最高出价人<Tag>{this.state.address}</Tag></p> \n                <p>成交价<Tag>{this.state.price}</Tag></p> \n                <p></p>\n                </div>\n            ):\n            <div>\n            <p>拍卖结束，没有人揭示报价</p>\n                <p></p>\n            </div>\n        }\n            </div>\n                 \n        </div>   \n\n        );\n    }\n}\n\nexport default HighestBidderInfo;\n","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/EscrowInfo/index.jsx",["405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431"],"import React, {Component} from \"react\";\nimport { Menu, Layout, message, Drawer, Space, Button, Divider, Form, InputNumber, Input, Select, Tag } from 'antd';\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\";\n//接入web3\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport openNotification from \"../../Notification\";\n\n\n//this.props.showButton用于在资金处理中，显示处理资金的按钮\n\nclass EscrowInfo extends Component {\n\n    state = {\n        seller : \"NULL\",\n        buyer : \"NULL\",\n        arbiter : \"NULL\",\n        release : -1,\n        refund : -1,\n        //资金转走为 true\n        fundsDisbursed : false,\n    }\n\n    componentDidMount = () => {\n        console.log(\"生成EscrowInfo模块\");\n        this.getInfoFromBlockchain();\n    }\n\n    getInfoFromBlockchain = () => {\n        let blockChainID = this.props.dataArray[0].ID;\n        console.log(\"竞拍商品ID : \" + blockChainID);\n\n        let that = this;\n        this.props.truffleContract.deployed().then(async (i) => {\n            console.log(\"进入 this.props.truffleContract.deployed() 的回调函数\");\n            //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n            //即时获取当前地址，用该地址发交易\n            let currentAccount = await that.props.web3.eth.getAccounts();\n            console.log(\"交易发起地址为: \"+currentAccount);\n\n            try{\n                //调用合约的 escrowInfo 方法\n                await i.escrowInfo(parseInt(blockChainID), { from: currentAccount.toString() }).then(async info => {\n                    console.log(\"成功调用合约的escrowInfo方法，返回 : \");\n                    console.dir(info);\n\n                    this.setState({\n                        seller : info[0],\n                        buyer : info[1],\n                        arbiter : info[2],\n                        release : parseInt(info[4]),\n                        refund  : parseInt(info[5]),\n                    })\n\n                    //合约中的钱已被转走\n                    if(info[3] == true){\n                        this.setState({\n                            fundsDisbursed : true,\n                        })\n                        //禁用 release 和 refund 按钮\n                        this.props.offButton();\n                        console.log(\"禁用投票按钮\");\n\n                        //启用转卖按钮\n                        let releaseCount = parseInt(info[4]);\n                        let refundCount  = parseInt(info[5]);\n                        //product已给买家\n                        if(releaseCount >= 2 && refundCount <= 1){\n                            //当前地址是买家\n                            if(currentAccount == info[1]){\n                                this.props.showResell();\n                            }\n                        }\n                        //product还在卖家\n                        else if(releaseCount <= 1 && refundCount >= 2){\n                            //当前地址是卖家\n                            if(currentAccount == info[0]){\n                                this.props.showResell();\n                            }\n                        }\n                    }\n                    //钱还在合约中\n                    else{\n                        //看是否是当前地址，控制一些信息只对相关的人展示\n                        if(currentAccount == info[0] || currentAccount == info[1] || currentAccount == info[2]){\n                            //启用 release 和 refund 按钮\n                            this.props.showButton();\n                            console.log(\"启用投票按钮\");\n                        }\n                        this.setState({\n                            fundsDisbursed : false,\n                        })\n                    }\n\n                    \n\n                    message.success(\"查询最终资金处理信息成功\",2);\n                });\n            }catch(err) {\n                message.error(\"查询最终资金处理信息失败\",2);\n                console.log(\"调用合约的escrowInfo方法失败 \" + err);\n                return;\n            }  \n        });\n    }\n   \n\n \n    \n    render () {\n        return (\n\n            <div>\n                <p></p>\n                <p>卖家 <Tag>{this.state.seller}</Tag></p>\n                <p>买家 <Tag>{this.state.buyer}</Tag></p>\n                <p>仲裁人 <Tag>{this.state.arbiter}</Tag> </p>\n\n                <p>放款  <b>{this.state.release}</b> / 3 人同意</p>\n                <p>退款  <b>{this.state.refund}</b> / 3 人同意</p>\n\n                <div>\n          {\n            this.state.fundsDisbursed?(\n                <div>\n                <p>资金已从合约中转出</p>\n                </div>\n            ):\n            <div>\n\n            </div>\n        }\n            </div>\n\n\n                \n\n            </div>\n\n        );\n    }\n}\n\nexport default EscrowInfo;\n","/home/kzj/project/finalize/final/code/react_code/src/pages/TotalChart/index.jsx",["432","433","434","435"],"import React, {Component} from 'react';\nimport * as echarts from 'echarts/core';\nimport {GridComponent, TitleComponent, TooltipComponent, ToolboxComponent } from 'echarts/components';\nimport {CanvasRenderer} from 'echarts/renderers';\nimport {Card} from 'antd';\n\nimport cookie from 'react-cookies';\n\nimport { LineChart } from 'echarts/charts';\nimport './index.css'\nimport renderStatistics from '../../utils/renderStatistics'\n\nimport ProductChart from \"../../components/ProductsChart\"\n\nimport getWeb3 from \"../../utils/getWeb3\";\n\necharts.use(\n    [GridComponent, LineChart, CanvasRenderer, TitleComponent, TooltipComponent, ToolboxComponent]\n);\n\nexport default class TotalChart extends Component {\n\n    state = {\n        web3 : null,\n        account : null,\n        escrow_through : null,\n        success_precent : null,\n        product_all_num : null,\n        product_user_num : null,\n        bid_user_num : null,\n        buy_user_num : null,\n        sell_earn : null,\n        arbit_earn : null,\n    }\n\n    async componentDidMount () {\n        const web3 = await getWeb3();\n        let account = await web3.eth.getAccounts();\n        console.log(\"---------------统计使用的userName为 : \" + cookie.load('username'));\n        let escrow_through = await this.getNumInfo(\"escrow_through\");\n        let success_precent = await this.getNumInfo(\"success_precent\");\n        let product_all_num = await this.getNumInfo(\"product_all_num\");\n        let product_user_num = await this.getNumInfo(\"product_user_num\");\n        let bid_user_num = await this.getNumInfo(\"bid_user_num\");\n        let buy_user_num = await this.getNumInfo(\"buy_user_num\");\n        let sell_earn = await this.getNumInfo(\"sell_earn\");\n        let arbit_earn = await this.getNumInfo(\"arbit_earn\");\n\n        this.setState({\n             web3: web3,\n             account: account,\n             escrow_through : escrow_through,\n            success_precent : success_precent,\n            product_all_num : product_all_num,\n            product_user_num : product_user_num,\n            bid_user_num : bid_user_num,\n            buy_user_num : buy_user_num ,\n            sell_earn : sell_earn,\n            arbit_earn : arbit_earn,\n        });\n            \n\n\n\n    }\n\n    //注意同步，不然还没得到结果，就把null返回了\n    getNumInfo = async(process) => {\n        //process 可能的值为\n        // escrow_through, success_precent, product_all_num, product_user_num, bid_user_num, buy_user_num, sell_earn, arbit_earn\n\n            let result = await renderStatistics({ process: process, userName:cookie.load('username') });\n            console.log(\"向后端请求数据 renderStatistics, process = \" + process + \" 请求到的数据为 : \");\n            console.dir(result.data);\n            return result.data;   \n    }\n\n\n    render () {\n        const {onlineNumber, offlineNumber, deviceArray} = this.state;\n        return (\n            <div>\n                {/* 函数组件的传参 */}\n                {/* , escrow_through, success_precent, product_all_num, product_user_num, bid_user_num, buy_user_num, sell_earn, arbit_earn */}\n            <ProductChart\n                escrow_through={this.state.escrow_through/10e18}\n                success_precent={this.state.success_precent}\n                product_all_num={this.state.product_all_num}\n                product_user_num={this.state.product_user_num}\n                bid_user_num={this.state.bid_user_num}\n                buy_user_num={this.state.buy_user_num}\n                sell_earn={this.state.sell_earn/10e18}\n                arbit_earn={this.state.arbit_earn/10e18}\n\n            ></ProductChart>\n\n            \n            \n        \n        </div>\n\n        );\n    }\n}","/home/kzj/project/finalize/final/code/react_code/src/components/ProductsChart/index.jsx",[],"/home/kzj/project/finalize/final/code/react_code/src/utils/getShopping.js",[],"/home/kzj/project/finalize/final/code/react_code/src/utils/renderGoods.js",[],"/home/kzj/project/finalize/final/code/react_code/src/components/GoodsList/index.jsx",["436","437","438","439","440","441"],"import React, {Component} from \"react\";\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\n// import './index.css';\nimport { List, Avatar, Space, message, Tag } from 'antd';\nimport { MessageOutlined, LikeOutlined, StarOutlined, FieldTimeOutlined, StrikethroughOutlined, ShoppingCartOutlined } from '@ant-design/icons';\nimport cookie from 'react-cookies';\nimport {Link} from \"react-router-dom\";\n\nconst IconText = ({ icon, text }) => (\n  <Space>\n    {React.createElement(icon)}\n    {text}\n  </Space>\n);\n\n\n\nclass GoodsList extends Component {\n  state = {\n    dataArray : []\n  }\n\n  //////////////////////重要\n  //this.props.productArray 为 promise\n  //promise需要解析才能使用\n  //要用.then拿promise的结果\n\n  // addressString: \"河北, 石家庄市\"\n  // blockchainId: 3\n  // category: \"艺术品,古董\"\n  // descString: \"额访问为\"\n  // imageUrl: \"http://localhost:8080/ipfs/Qma4Cm8m52QogsfMkZ3SE6dD1rrtcRqEs1zJ69BJT6kFoW\"\n  // inStockNum: 22\n  // key: 9\n  // name: \"新的\"\n  // price: \"22 ETH\"\n  // shippingTime: 3\n  \n\n  constructor (props) {\n    super(props);\n  }\n\n  //用来测试的模拟数据\n  // productListData = [];\n\n\n  //应该在调用 GoodsList 的函数中，将数据格式化好，在 GoodsList 中将传入的promise，用then解析出res，直接将数据放入 render，让 render 自动刷新\n  //传入的是 Promise 的嵌套，所以要用 then 嵌套地解析两次\n  componentWillMount  = () => {\n\n    // console.log(\"promise.then 前拿取的信息为 : \");\n    //这里输出一个 Promise\n    // console.dir(this.props.productArray);\n\n    this.props.productArray.then( res =>{\n\n      // console.log(\"promise.then 后拿取的信息为 : \");\n      //这里输出多个 Promise, 一个 Product 就是一个 Promise\n      // console.dir(res);\n\n      //解析每个Promise\n      let resLen = res.length;\n      for(let promiseIndex = 0; promiseIndex < resLen; promiseIndex++){\n        res[promiseIndex].then(productInfo => {\n\n        console.log(\"其中一个要渲染的信息为 : \");\n        console.dir(productInfo);\n          //得到每一个商品\n          //向 state 中的 dataArray 添加元素的方法\n          this.setState({dataArray : [...this.state.dataArray, productInfo]});\n        })\n      }\n\n    }).catch( err =>{\n      message.error(\"获得产品信息失败\", 2);\n      console.log(\"产品展示列表不能获得产品信息\" + err);\n    })\n    \n\n    //模拟数据，用来测试\n    // for (let i = 0; i < 2; i++) {\n    //   this.productListData.push({\n    //     href: 'https://ant.design',\n    //     name: '商品名称',\n    //     avatar: 'https://joeschmoe.io/api/v1/random',\n    //     category:\n    //       '商品类型',\n    //     descString:\n    //       '商品介绍',\n    //     price:\n    //       '1 ETH',\n    //     processTime:\n    //       '时间',\n    //     productCondition:\n    //       '全新',\n    //   });\n    // }\n\n  }\n              \n\n    render () {\n\n      console.log(\"GoodsList 进行了一次渲染\");\n\n        return (\n            <List\n    itemLayout=\"vertical\"\n    size=\"large\"\n    pagination={{\n      onChange: page => {\n        console.log(page);\n      },\n      pageSize: 5,\n    }}\n    dataSource={this.state.dataArray}\n    footer={\n      <div>\n        共 {this.state.dataArray.length} 个\n      </div>\n    }\n    renderItem={item => (\n      <List.Item\n        key={item.index}\n        actions={[\n          <IconText icon={StrikethroughOutlined} text={item.price} key=\"list-vertical-star-o\" />,\n          <IconText icon={ShoppingCartOutlined} text={\"剩余\" + item.inStockNum + \"件\"} key=\"list-vertical-like-o\" />,\n          <IconText icon={FieldTimeOutlined} text={\"发货时效\" + item.shippingTime + \"天\"} key=\"list-vertical-message\" />,\n        ]}\n        extra={\n          <img\n            width={130}\n            height={130}\n            alt=\"商品图片\"\n            src={item.imageUrl}\n          />\n        }\n        \n      >\n        <List.Item.Meta\n\n          title={<Link onClick={() => cookie.save('searchGoodsID', item.blockchainId, {path:'/'})} to={{pathname:'/index/goodsInfo'}}>{item.name}</Link>}\n          description={\n            <>\n              <Tag>ID: {item.blockchainId}</Tag>\n              <Tag>{item.category}</Tag>\n              <Tag>{item.addressString}</Tag>\n              <Tag>区块链存证技术</Tag>\n            </>\n          }\n        />\n        {item.descString}\n      </List.Item>\n    )}\n    />\n        );\n    }\n}\n\nexport default GoodsList;","/home/kzj/project/finalize/final/code/react_code/src/pages/Market/GoodsInfo/index.jsx",["442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464"],"import React, {Component} from 'react';\nimport cookie from 'react-cookies';\nimport ipfsAPI from 'ipfs-api';\n// import EditDeviceModal from \"../../EditDeviceModal\";\nimport { message, Card, Carousel, Drawer, Tag, Progress} from 'antd';\nimport {\n    Form,\n    Input,\n    InputNumber,\n    Cascader,\n    Select,\n    Row,\n    Col,\n    Checkbox,\n    Button,\n    Upload,\n    AutoComplete,\n    DatePicker,\n    Slider,\n    Image\n  } from 'antd';\nimport { Typography, Divider } from 'antd';\n// import axios from \"axios\";\n// import cookie from \"react-cookies\";\n\nimport 'antd/dist/antd.css';\n// import './index.css';\nimport { List, Avatar, Space} from 'antd';\n\n//竞拍模块\nimport Buy from '../../../components/Auction/Buy';\n//揭示报价模块\nimport Sell from '../../../components/Auction/Sell';\n\n\n//溯源信息展示模块\nimport Tracing from '../../../components/Tracing'; \n\n//接入合约\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getShopping from \"../../../utils/getShopping\";\nimport getTracing from '../../../utils/getTracing';\n\n//从IPFS读取\nimport ipfsReadUrlBefore from '../../../config/ipfsReadUrl';\nimport ipfsAddAndCatConfig from '../../../config/ipfsAddAndCat';\n\n//价格格式化\nimport handlePrice from '../../../utils/handlePrice';\n//地址解析\nimport handleAddress from '../../../utils/handleAddress';\n\nimport Meta from 'antd/lib/card/Meta';\nimport Countdown from 'antd/lib/statistic/Countdown';\nimport moment from 'moment';\nimport { CheckCircleOutlined, ClockCircleOutlined, CloseCircleOutlined, ExclamationCircleOutlined, MinusCircleOutlined, SyncOutlined } from '@ant-design/icons';\n\n\nconst IconText = ({ icon, text }) => (\n    <Space>\n      {React.createElement(icon)}\n      {text}\n    </Space>\n  );\n\n//ipfs实例\nconst ipfs = ipfsAPI({ host: ipfsAddAndCatConfig.host, port: ipfsAddAndCatConfig.port, protocol: ipfsAddAndCatConfig.protocol });\n\n\n//从区块链读出某件商品信息\nclass ProductInfo extends Component {\n\n    state = {\n        web3 : null,\n        truffleContract : null,\n        tracingContract : null,\n        dataArray : [],\n        //购买按钮\n        buyVisible : false,\n        //只有卖家可见按钮\n        sellVisible : false,\n    }\n\n    constructor (props) {\n        super(props);\n    }\n\n\n    //清除cookie\n    componentWillUnmount () {\n        cookie.remove('searchGoodsID', { path: '/' });\n    }\n\n    getBlockChainInfo = async() => {\n        try{\n            const web3 = await getWeb3();\n            const Shopping = await getShopping(web3);\n            const Tracing = await getTracing(web3);\n            this.setState({\n                web3: web3,\n                truffleContract:Shopping,\n                tracingContract:Tracing\n                \n            });\n            message.success(\"接入智能合约成功\", 2);\n            console.log(\"ProductInfo 的 web3 : \");\n            console.dir(web3);\n            console.log(\"ProductInfo 的 Shopping : \");\n            console.dir(this.state.truffleContract);\n            return true;\n        }catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n              `[ERROR]接入智能合约失败.`,\n            );\n            console.error(error);\n            return false;\n          }\n        \n    }\n\n    //componentWillMount在render之前运行\n    //componentDidMount 在render之后运行\n    //注意先后顺序，this.getBlockChainInfo 在前，that.renderGoodDetails 在后\n    async componentDidMount () {\n    // componentWillMount () {\n        let that = this;\n        console.log(\"生成GoodInfo模块\");\n        if(await this.getBlockChainInfo()){\n            console.log(\"获得合约信息成功\");\n\n            console.log(\"componentDidMount 中查询 cookie:searchGoodsID 为 : \" + cookie.load('searchGoodsID'));\n            console.log(\"componentDidMount 中查询 this.state.dataArray 的长度为 : \" + this.state.dataArray.length);\n            //利用 cookie，如果 cookie 中有商品ID，但是这个商品未显示，那就将它显示出来\n            //有了这个功能，从商品列表跳转到某个商品的详情页，不需要做其他操作\n            if(cookie.load('searchGoodsID') !==undefined && this.state.dataArray.length === 0) {\n                console.log(\"用 cookie 中包含的商品ID信息，加载商品详情页\");\n                let arg = {};\n                arg.ProductID = cookie.load('searchGoodsID');\n                that.renderGoodsDetails(arg);\n            }\n        }else{\n            console.log(\"获得合约信息失败\");\n        }\n    }\n\n\n    //控制显示与隐藏\n    //初始状态都为 false\n    // //购买按钮\n    // buyVisible \n    // //只有卖家可见按钮\n    // sellVisible \n    \n    controlButtonAndInfo = async (p) => {\n        //从区块链里拿到的信息是这样的 res为\n        // 0: BN  ID\n        // 1: String  name\n        // 2: String  class\n        // 3: [string] imageLink\n        // 4: string descLink\n        // 5: BN price\n        // 6: BN shippingTime\n        // 7: BN inStockNum\n        // 8: (2) [BN, BN] originPlace\n        // 9: BN status\n\n        // 0:open, 1:sold\n        let productStatus = parseInt(p[9]);\n\n        //如果该地址是卖家，显示出售按钮\n        //当时是否是卖家地址，决定是否显示转卖按钮\n        let currentAccount = await this.state.web3.eth.getAccounts();\n        this.state.truffleContract.deployed().then( (i) => {\n            console.log(\"进入 this.state.truffleContract.deployed() 的回调函数\");\n\n            //异步执行，可能报错\n            // let productId = this.state.dataArray[0].ID;\n            let productId = parseInt(p[0]);\n            try{\n                //获取卖家地址\n                i.sellerInfo(productId).then(res => {\n                    console.log(\"sellerInfo return : \");\n                    console.dir(res);\n                    //当时是卖家地址\n                    if(currentAccount == res){\n                        //显示卖家出售按钮\n                        this.setState({\n                            sellVisible : true,\n                        })\n                    }\n                    \n                });  \n            }catch(err) {\n                message.error(\"id = \" + productId + \"的商品的seller信息查询失败\",2);\n                console.log(\"调用合约的sellerInfo方法失败 \" + err);\n            }\n\n            \n        });\n\n\n        //p[9] = open\n        if (productStatus == 0) {\n            console.log(\"商品状态为 open\");\n            this.setState({\n                //开放购买按钮\n                buyVisible : true,\n            })\n        }\n        //p[9] = sold\n        else if (productStatus == 1) {\n            console.log(\"商品状态为 sold\");\n            this.setState({\n                //关闭购买按钮\n                buyVisible : false,\n            })\n        }\n        \n    }    \n\n\n    //点击提交按钮，表单可以提交时\n    onFinish = (values) => {\n        console.log('onFinish 的 values : ', values);\n\n        let decodedParams = {};\n        Object.keys(values).forEach(key => {\n            decodedParams[key] = decodeURIComponent(decodeURI(values[key]));\n        });\n        // console.log('onFinish 的 values 解析为 decodedParams : ', decodedParams);\n\n        //decodedParams 进一步格式化\n        //参数全都变成String\n        message.info(\"正在提交查询数据\",2);\n        try{\n            //调用之前就隐藏\n            this.renderGoodsDetails(decodedParams);\n        }catch(err){\n            console.log(\"在区块链中查询失败\" + err);\n            return;\n        }\n    }\n\n\n    //点击提交按钮，表单不能提交时\n    onFinishFailed = (errorInfo) => {\n        message.warning(\"请正确填写商品ID信息\",2);\n    }\n\n\n\n    //调用区块链方法，得到某个具体的商品信息\n    renderGoodsDetails = (params) => {\n\n        if(this.state.truffleContract === null || this.state.web3 === null){\n            message.error(\"连接合约失败\",2);\n            console.log(\"[ERROR]web3 或者 truffleContract 为 null\");\n            return;\n        }\n\n        //传来的数据已格式化为\n        //params.ProductID (String)\n        let productId = params.ProductID;\n\n        console.log(\"用来查询的信息 : \");\n        console.log(\"productId : \" + productId);\n\n        console.log(\"合约为 : \");\n        console.dir(this.state.truffleContract);\n        \n    \n        //注意回调函数中的this，和外界的this不同，如果向使用外界的this，要赋值成that传过去\n        //注意要使用async，确保先拿到地址，用await关键字确保运行的先后顺序，再用这个地址调用合约方法\n        let that = this;\n        this.state.truffleContract.deployed().then( async (i) => {\n            console.log(\"进入 this.state.truffleContract.deployed() 的回调函数\");\n            try{\n                //即时获取当前地址，用该地址发交易\n                let currentAccount = await that.state.web3.eth.getAccounts();\n                i.getGoods(productId, { from: currentAccount.toString()}).then(async res => {\n                    //可能返回为空，要判断是否真的取到了数据，如果不判断，直接调用 formatProductInfo(res)，里面的 ipfs 会报错\n                    console.log(\"getGoods 取到的原始数据为 : \");\n                    console.dir(res);\n                    //通过 res[1]，也就是产品的name是否为空来判断\n                    if(res[1]===\"\"){\n                        message.error(\"该ID没有对应的商品\",2);\n                        return;\n                    }\n                    //根据当前的 res 状况，判断显示什么信息\n                    this.controlButtonAndInfo(res);\n\n                    //格式化数据，便于显示\n                    let oneProductInfo = await this.formatProductInfo(res);\n                    console.log(\"格式化之后的数据 oneProductInfo 为 \");\n                    console.dir(oneProductInfo);\n\n                    this.setState({\n                        dataArray : [...this.state.dataArray, oneProductInfo]\n                    });\n\n                    //设置cookie，不怕刷新\n                    cookie.save('searchGoodsID', productId, {path:'/'});\n                    message.success(\"商品ID查询成功\",2);\n                    \n                });  \n            }catch(err) {\n                message.error(\"商品ID查询失败\",2);\n                console.log(\"调用合约的getGoods方法失败 \" + err);\n            }\n\n            \n        });\n    }\n\n    //格式化商品信息，为渲染界面做准备\n    formatProductInfo = async(originInfo) => {\n        //从区块链里拿到的信息是这样的 res为\n        // 0: BN  ID\n        // 1: String  name\n        // 2: String  class\n        // 3: [string] imageLink\n        // 4: string descLink\n        // 5: BN price\n        // 6: BN shippingTime\n        // 7: BN inStockNum\n        // 8: (2) [BN, BN] originPlace\n        // 9: BN status\n\n        let oneProductInfo = {};\n        //格式化数据后为\n        // ID\n        // name\n        // category\n        // imageUrlArray URL字符串数组\n        // descString\n        // price\n        // originPrice\n        // shippingTime\n        // inStockNum\n        // originPlace int数组\n        // sellStatus 正在售卖 or 已售空 \n\n        oneProductInfo.ID = parseInt(originInfo[0]);\n        oneProductInfo.name = originInfo[1];\n        oneProductInfo.category = originInfo[2];\n\n        //处理图片Url数组\n        let imageHashArray = originInfo[3];\n        let imageLinkArray = [];\n        let arrayLength = imageHashArray.length;\n        console.log(\"在详情页中渲染 \"+ arrayLength + \" 张图片\");\n        for(let index = 0; index < arrayLength; index++){\n            imageLinkArray[index] = ipfsReadUrlBefore + imageHashArray[index];\n        }\n        oneProductInfo.imageUrlArray = imageLinkArray;\n\n        let descString = \"商品介绍占位\";\n         await ipfs.cat(originInfo[4]).then(file => {\n             descString = file.toString();\n         })\n        oneProductInfo.descString = descString;\n\n        oneProductInfo.price = handlePrice(originInfo[5]);\n        oneProductInfo.originPrice = originInfo[5];\n        oneProductInfo.shippingTime = parseInt(originInfo[6]);\n        oneProductInfo.inStockNum = parseInt(originInfo[7]);\n        //把发货地址的 [int,int] 解析成 string\n        oneProductInfo.originPlace = handleAddress([parseInt(originInfo[8][0]), parseInt(originInfo[8][1])]);\n\n        // oneProductInfo.sellStatus = (parseInt(originInfo[9]) ==0) ? \"正在售卖\" : \"已售空\";\n        oneProductInfo.sellStatus = parseInt(originInfo[9]);\n        return oneProductInfo;\n    }\n\n    \n    render () {\n        //如果 cookie 中记录了 ID\n        // if(cookie.load('searchGoodsID') !== undefined){\n        //用 cookie 来判断显示哪个界面，要点两次提交，才能跳转到商品详情界面，并且传入了两个商品，改为使用 this.state.dataArray 是否有数据判断就好了\n        if(this.state.dataArray.length !== 0){\n            let productData = this.state.dataArray[0];\n\n            const { Title, Paragraph, Text, Link } = Typography;\n\n            //倒计时结束时触发\n            function onFinish() {\n                console.log(\"finished!\");\n              }\n\n            return (\n                <div>        \n        \n                    <Typography>\n\n                    <Row\n                        align=\"middle\"\n                        justify=\"center\"\n                    >\n                        <Col span={24}>\n                        <Paragraph>\n                    <Carousel \n                        autoplay \n                        afterChange={() => console.log(\"轮番播放\")}\n                    >\n                    {\n                        productData.imageUrlArray.map (item => (\n                            <div>\n                                <Image \n                                    height={400}\n                                    src={item}\n                                    fallback=\"%PUBLIC_URL%/images/nullicon.svg\"\n                                   />\n                            </div>\n                        ))\n                    }  \n                    </Carousel>\n                    </Paragraph>\n                    \n\n                    <Paragraph>\n                    <Image.PreviewGroup>\n                    {\n                        productData.imageUrlArray.map (item => (\n                                <Image height={40} width={40} src={item} fallback=\"%PUBLIC_URL%/images/nullicon.svg\"/>\n                        ))\n                    }\n                    </Image.PreviewGroup>\n                    </Paragraph>\n                        </Col>\n                    </Row>\n                    \n                    <Divider />\n\n\n                    <Row>\n                        <Col span={12}>\n                            \n\n                        <Paragraph>\n                        <Title level={3}>{productData.name}</Title>\n                        {productData.sellStatus}\n                        </Paragraph>\n\n                        <Paragraph>\n                        <span>\n                        <Tag icon={<CheckCircleOutlined />} color=\"success\">\n                            ID: {productData.ID}\n                        </Tag>\n                        <Tag icon={<MinusCircleOutlined />} color=\"default\">\n                            {productData.category}\n                        </Tag>\n                        <Tag icon={<SyncOutlined />} color=\"default\">\n                            {productData.originPlace}\n                        </Tag>\n                        <Tag icon={<CheckCircleOutlined />} color=\"success\">\n                            区块链存证技术\n                        </Tag>\n                        </span>\n                        </Paragraph>\n\n                        <div>\n\n    </div>\n\n\n                        </Col>\n                        <Col span={12}>\n\n\n\n\n                        <Paragraph>\n                    <Card\n                        hoverable\n                        style={{ width: 400 }}\n                        \n                    >\n                        <Col span={18} style={{ marginTop: 4 }}>\n\n                        </Col>\n\n                        <Meta description=\"售价\"/>\n                <p> <b>{productData.price}</b></p>\n                <p></p>\n                        <Meta description=\"库存\"/>\n                <p> <b>{productData.inStockNum}</b></p>\n                <p></p>\n\n            <div>\n\n                            \n                {\n                    this.state.buyVisible?(\n                        <div>\n                        \n                        <Buy\n                    //web3 和 truffleContract 由父组件传递进去，不用子组件自己生成\n                    web3={this.state.web3}\n                    truffleContract={this.state.truffleContract}\n                    price={productData.price}\n                    dataArray={this.state.dataArray}\n                    //库存数量\n                    sumNum={productData.inStockNum}\n                        ></Buy>\n\n                        </div>\n                    ):null\n                }\n            </div>\n\n            <div>\n                {\n                    this.state.sellVisible?(\n                        <div>\n                        \n                        <Sell \n                    web3={this.state.web3}\n                    truffleContract={this.state.truffleContract}\n                    dataArray={this.state.dataArray}\n                        ></Sell>\n\n                        </div>\n                    ):null\n                }\n            </div>\n\n\n\n                \n\n            \n                    </Card>\n                    </Paragraph>\n\n\n\n\n                    \n                        </Col>\n                    </Row>\n                    \n                                   \n     \n\n                    <Divider />\n\n<Row>\n    <Col span={12}>\n        \n    <Text strong>商品介绍</Text>\n                        <p></p>\n    <Paragraph>\n      {productData.descString}\n    </Paragraph>\n\n    <Paragraph>\n      <ul>\n\n      {\n                        productData.imageUrlArray.map ((item,index) => (\n                            <li>\n                            <Link href={item}>商品图片链接{index+1}</Link>\n                            </li>\n                        ))\n    }  \n        <li>\n          <Link href={ipfsReadUrlBefore + productData.descLink}>商品介绍链接</Link>\n        </li>\n        <p>Power by IPFS星际文件系统</p>\n      </ul>\n    </Paragraph>\n                        \n\n\n    </Col>\n\n\n    <Col span={12}>\n    <Paragraph>\n    <Text strong>商品溯源</Text>\n    <p></p>\n\n    <Tracing \nweb3={this.state.web3}\n//读取溯源合约上的信息\n// tracingContract={this.state.tracingContract}\n//入口合约\ntruffleContract={this.state.truffleContract}\n//普通商品类\nclass={2}\nid={productData.ID}\n    ></Tracing>\n    \n</Paragraph>\n</Col>\n</Row>\n\n\n  </Typography>\n  \n    \n        </div>\n            );\n        }\n\n        //如果cookie 中没有记录，就询问用户要查询的信息\n        else {\n            return (\n                <div style={{display:'flex', justifyContent:'center'}}>\n                <Card title=\"查询商品\" bordered={false} style={{ width: '80%' }} headStyle={{display:'flex', justifyContent:'center'}}>\n                    <Form\n                        initialValues={{\n                            remember: true,\n                        }}\n                        onFinish={this.onFinish}\n                        onFinishFailed={this.onFinishFailed}\n                        style={{margin:\"auto\", width:\"60%\", marginTop:\"15px\"}}\n                    >\n                        <Form.Item\n                            name=\"ProductID\"\n                            rules={[\n                                {\n                                    required: true,\n                                    message: '请输入商品ID',\n                                },\n                            ]}\n                        >\n                            <InputNumber placeholder=\"商品ID\" \n                            style={{\n                            width: '100%',\n                            }}/>\n                        </Form.Item>\n    \n\n    \n                        <Form.Item\n                            wrapperCol={{\n                                offset: 10,\n                                span: 16,\n                            }}\n                        >\n                            <Button disabled={ this.state.truffleContract === null || this.state.web3 === null } type=\"primary\" htmlType=\"submit\">\n                                查询\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Card>\n            </div>\n            );\n        }\n        \n    }\n}\n\nexport default ProductInfo;\n\n","/home/kzj/project/finalize/final/code/react_code/src/utils/handleAddress.js",[],"/home/kzj/project/finalize/final/code/react_code/src/components/Tracing/index.jsx",["465","466","467","468","469","470"],"import React, {Component} from \"react\";\nimport { message, Tag, Timeline } from 'antd';\nimport { SmileOutlined } from '@ant-design/icons';\nimport moment from \"moment\";\n//接入web3\n// import getWeb3 from \"../../../utils/getWeb3\";\n// import getEcommerceStore from \"../../../utils/getEcommerceStore\";\n\nclass Tracing extends Component {\n\n    state = {\n      //存储该商品的溯源时间轴数据\n      publisher:[],\n      //描述语句的IPFS解析链接\n      descLink:[],\n      //发生时间\n      exeTimeString:[]\n    }\n\n    // 父组件传入\n    // web3={this.state.web3}\n    // tracingContract={this.state.tracingContract}\n    // class={1}\n    // id={productData.ID}\n\n    constructor (props) {\n        super (props);\n    }\n\n\n    async componentDidMount () {\n          console.log(\"生成Tracing模块\");\n          //从区块链拿数据\n          this.renderTracingDetails();      \n    }\n\n\n      //调用区块链方法，得到该商品的溯源信息\n    renderTracingDetails = () => {\n\n      if(this.props.tracingContract === null || this.props.web3 === null){\n          message.error(\"连接溯源合约失败\",2);\n          console.log(\"[ERROR]web3 或者 tracingContract 为 null\");\n          return;\n      }\n\n      console.log(\"用来查询的信息 : \");\n      console.log(\"class : \" + this.props.class);\n      console.log(\"id : \" + this.props.id);\n\n      console.log(\"合约为 : \");\n      console.dir(this.props.tracingContract);\n      \n  \n      //注意回调函数中的this，和外界的this不同，如果向使用外界的this，要赋值成that传过去\n      //注意要使用async，确保先拿到地址，用await关键字确保运行的先后顺序，再用这个地址调用合约方法\n      let that = this;\n\n      // this.props.tracingContract.deployed().then( (i) => {\n      //     console.log(\"进入 this.props.tracingContract.deployed() 的回调函数\");\n      //     try{\n      //         i.getInfoLine(this.props.class, this.props.id).then(res => {\n      //             //可能返回为空，要判断是否真的取到了数据，如果不判断，直接调用，可能出错\n      //             console.log(\"getInfoLine 取到的原始数据为 : \");\n      //             console.dir(res);\n                \n\n      //             this.setState({\n      //                 Lines : res\n      //             })\n\n      //             console.log(\"this.state.Lines : \");\n      //             console.dir(this.state.Lines);\n                  \n      //         });  \n      //     }catch(err) {\n      //         message.error(\"商品溯源失败\",2);\n      //         console.log(\"调用合约的getInfoLine方法失败 \" + err);\n      //     }\n\n          \n      // });\n\n      this.props.truffleContract.deployed().then( (i) => {\n        console.log(\"进入 this.props.truffleContract.deployed() 的回调函数\");\n        try{\n            console.log(\"try getTracingInfo\");\n            i.getTracingInfo(this.props.id).then(res => {\n                //可能返回为空，要判断是否真的取到了数据，如果不判断，直接调用，可能出错\n                console.log(\"getInfoLine 取到的原始数据为 : \");\n                console.dir(res);\n              \n\n                this.setState({\n                  publisher:res[0],\n                  descLink:res[1],\n                  exeTimeString:res[2]\n                })\n\n                console.log(\"this.state.Lines : \");\n                console.dir(this.state.Lines);\n                \n            });  \n        }catch(err) {\n            message.error(\"商品溯源失败\",2);\n            console.log(\"调用合约的getInfoLine方法失败 \" + err);\n        }\n\n        \n    });\n  }\n\n  \n    \n\n\n    \n    render () {\n        return (\n\n\n            <div>\n\n<Timeline pending=\"关键事件持续监控中\">\n            <div>\n                {this.state.publisher.map((item,i)=>{\n                    {\n                      // 0, 1, 2, 3\n                      //blue、red、green、gray\n                      let iM4=i%4;\n                      var colorString = iM4==0 ? \"blue\" : (iM4==1 ? \"red\" : (iM4==2 ? \"green\" : \"gray\"));\n                    }\n                    // //item中的信息(数组形式)\n                    // // 信息发布人\n                    // // 描述语句的IPFS解析链接\n                    // // 发生时间\n\n                    // return <Timeline.Item color={colorString}>\n                    //   <p>{item[1]}</p>\n                    //   <p>创建于 {item[2]}</p>\n                    //   <p>来自 {item[0]}</p>\n                    //    </Timeline.Item>\n\n                    //item中的信息只有publisher, 另外两个信息用i索引\n\n                    return <Timeline.Item color={colorString}>\n                      <p>{this.state.descLink[i]}</p>\n                      <p>区块时间戳 <Tag>{moment(this.state.exeTimeString[i]).format('yy年M月D日, h:mm:ss a')}</Tag></p>\n                      <p>来自地址 <Tag>{item}</Tag></p>\n                       </Timeline.Item>\n                })}\n            </div>\n    \n  </Timeline>\n\n            </div>\n        );\n    }\n}\n\nexport default Tracing;\n","/home/kzj/project/finalize/final/code/react_code/src/utils/getTracing.js",[],"/home/kzj/project/finalize/final/code/react_code/src/components/Auction/Resell/index.jsx",["471","472","473","474","475","476","477","478","479","480","481","482","483"],"import React, {Component} from \"react\";\nimport { Menu, Layout, message, Drawer, Space, Button, Divider, Form, InputNumber, Input, Select, Slider, DatePicker } from 'antd';\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\";\n//接入web3\n// import getWeb3 from \"../../../utils/getWeb3\";\n// import getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport openNotification from \"../../Notification\";\nimport moment from \"moment\";\n\nconst { Option } = Select;\nconst { RangePicker } = DatePicker;\n\nconst suffixSelector = (\n    <Form.Item name=\"PriceUnit\" noStyle>\n      <Select\n        style={{\n          width: 70,\n        }}\n      >\n        <Option selected=\"selected\" value=\"ETH\">ETH</Option>\n        <Option value=\"wei\">wei</Option>\n      </Select>\n    </Form.Item>\n);\n\nconst rangeConfig = {\n  rules: [\n    {\n      type: 'array',\n      required: true,\n      message: '请选择时间',\n    },\n  ],\n};\n\n\n\nclass Resell extends Component {\n\n    state = {\n        visible: false\n    }\n\n    constructor (props) {\n        super (props);\n    }\n\n    componentDidMount () {\n         console.log(\"生成Resell模块\");\n    }\n\n    showDrawer = () => {\n        this.setState({\n          visible: true,\n        });\n      };\n    \n    onClose = () => {\n        this.setState({\n          visible: false,\n        });\n      };\n      \n    //点击提交竞拍按钮，表单可以提交时\n    onFinishResell = (values) => {\n        console.log(\"竞拍提交按钮被点击，onFinishBid 得到的数据为 : \");\n        console.dir(values);\n        //values 中的数据示意\n        // BeginAndEndTime (长度为2的Moment数组)\n        // PriceUnit: \"ETH\"\n        // ProductRevealTime: 7\n        // StartPrice: 11\n\n        if(values.PriceUnit === undefined){\n            message.error(\"请指定价格单位\");\n            return;\n        }\n        let web3 = this.props.web3;\n\n        //处理时间成int\n        let auctionStartTime = Date.parse(values.BeginAndEndTime[0]) / 1000;\n        let auctionEndTime = Date.parse(values.BeginAndEndTime[1]) / 1000;\n\n        //处理价格，把单位转为 wei\n        let startPrice = -1;\n        if(values.PriceUnit === \"ETH\"){\n            startPrice = web3.utils.toWei(values.StartPrice.toString(), 'ether');\n        }else if(values.PriceUnit === \"wei\"){\n            startPrice = parseInt(values.StartPrice);\n        }\n\n        //处理揭示报价时间，从String变成int\n        let productRevealTime = parseInt(values.ProductRevealTime);\n\n        // 处理后的值, 需要传入区块链\n        // auctionStartTime\n        // auctionEndTime\n        // startPrice\n        // productRevealTime\n        // this.props.productId\n\n        //注意回调函数中的this，和外界的this不同，如果向使用外界的this，要赋值成that传过去\n        //注意要使用async，确保先拿到地址，用await关键字确保运行的先后顺序，再用这个地址调用合约方法\n        let that = this;\n        this.props.truffleContract.deployed().then(async (i) => {\n            console.log(\"进入 this.props.truffleContract.deployed() 的回调函数\");\n            //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n            //即时获取当前地址，用该地址发交易\n            let currentAccount = await web3.eth.getAccounts();\n            message.info(\"交易发起地址为: \"+currentAccount, 2);\n            console.log(\"交易发起地址为: \"+currentAccount);\n\n            try{\n                //调用合约的 bid 方法\n                await i.changeInfoToSellAgain(parseInt(this.props.productId), auctionStartTime, auctionEndTime, startPrice, productRevealTime, \n                { from: currentAccount.toString()}).then(res => {\n                    //注意这里调用合约方法使用的地址，必须是字符串形式，要用 toString() 转化为字符串\n                    message.success(\"转卖发起成功\");\n                    console.log(\"成功调用合约的changeInfoToSellAgain方法，返回 : \");\n                    console.dir(res);\n                    //关闭侧边栏\n                    this.onClose();\n                    openNotification(\"转卖发起成功\",\n                    \"起拍价格: \" + values.StartPrice + values.PriceUnit + \", 拍卖开始时间: \" + moment(values.AuctionStartTime).format('yy年M月D日, h:mm:ss a') + \", 拍卖结束时间: \" + moment(values.AuctionEndTime).format('yy年M月D日, h:mm:ss a'),\n                                    'bottomLeft');\n                });\n            }catch(err) {\n                message.error(\"向链上提交竞价信息失败\",2);\n                console.log(\"调用合约的bid方法失败, err = \");\n                console.dir(err);\n                return;\n            }  \n        });\n\n    }\n\n    //点击提交竞拍按钮，表单不能提交时\n    onFinishFailedBid = (errorInfo) => {\n        message.warning(\"请正确填写竞拍信息\",2);\n    }\n\n    //智能合约中的方法需传入\n    // uint _productId(this.props.productId), \n    // uint _auctionStartTime, uint _auctionEndTime, uint _startPrice, uint _auctionRevealTime (这四个需要用户输入)\n    \n    render () {\n        return (\n\n\n            <div>\n\n                <Button type=\"primary\" icon={<RocketOutlined />} size={\"large\"} onClick={this.showDrawer}>\n                转卖\n                </Button>\n\n            <Drawer\n          title=\"转卖商品\"\n          width={400}\n          onClose={this.onClose}\n          visible={this.state.visible}\n          bodyStyle={{ paddingBottom: 80 }}\n          extra={\n            <Space>\n              <Button onClick={this.onClose}>取消</Button>\n            </Space>\n          }\n        >\n          <Form \n            layout=\"vertical\" hideRequiredMark\n            onFinish={this.onFinishResell}\n            onFinishFailed={this.onFinishFailedBid}\n          >\n\n<Form.Item\n                        name=\"StartPrice\"\n                        label=\"起拍价格\"\n                        rules={[\n                                {\n                                    required: true,\n                                    message: '请输入起拍价格',\n                                },\n                            ]}\n                    >\n                    <InputNumber\n                        min={0}\n                        addonAfter={suffixSelector}\n                        style={{\n                            width: '100%',\n                        }}\n                    />\n                    </Form.Item>\n\n                    <Form.Item name=\"BeginAndEndTime\" label=\"起止时间\" {...rangeConfig}>\n                        <RangePicker showTime format=\"YYYY-MM-DD HH:mm:ss\" />\n                    </Form.Item>\n\n\n                    <Form.Item name=\"ProductRevealTime\" label=\"揭示报价持续时间\">\n                        <Slider\n                            marks={{\n                                0: '0',\n                                20: '20',\n                                40: '40',\n                                60: '60',\n                                80: '80',\n                                100: '100 分钟',\n                            }}\n                        />\n                    </Form.Item>\n            \n            <Form.Item>\n                <Button \n                type=\"primary\" \n                htmlType=\"submit\"\n                disabled={ this.props.truffleContract === null || this.props.web3 === null } \n                >\n                提交\n              </Button>\n            </Form.Item>\n\n          </Form>\n        </Drawer>\n\n            </div>\n        );\n    }\n}\n\nexport default Resell;\n","/home/kzj/project/finalize/final/code/react_code/src/utils/renderStatistics.js",[],"/home/kzj/project/finalize/final/code/react_code/src/components/Auction/Buy/index.jsx",["484","485","486","487","488","489","490","491","492","493","494","495","496","497"],"import React, {Component} from \"react\";\nimport { Menu, Layout, message, Drawer, Space, Button, Divider, Form, InputNumber, Input, Select } from 'antd';\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\";\n//接入web3\n// import getWeb3 from \"../../../utils/getWeb3\";\n// import getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport openNotification from \"../../Notification\";\n\nconst { Option } = Select;\n\n\n\nclass Buy extends Component {\n\n    state = {\n        visible: false\n    }\n\n    constructor (props) {\n        super (props);\n    }\n\n    componentDidMount () {\n         console.log(\"生成Buy模块\");\n    }\n\n    showDrawer = () => {\n        this.setState({\n          visible: true,\n        });\n      };\n    \n    onClose = () => {\n        this.setState({\n          visible: false,\n        });\n      };\n      \n    //点击提交竞拍按钮，表单可以提交时\n    onFinishBuy = (values) => {\n        console.log(\"购买按钮被点击，onFinishBuy 得到的数据为 : \");\n        console.dir(values);\n        //values 中的数据示意\n        // buyNum: 2\n\n        \n        if(values.buyNum > this.props.dataArray[0].inStockNum){\n          message.error(\"库存不足\");\n          return;\n        }\n\n        if(this.props.dataArray.length == 0){\n            message.error(\"找不到被购买的商品\");\n            return;\n        }\n\n        //计算需要支付的金额\n        let price = this.props.dataArray[0].originPrice;\n        //单位是wei\n        let priceSum = price * values.buyNum;\n        \n        let blockChainID = this.props.dataArray[0].ID;\n        console.log(\"购买商品ID : \" + blockChainID);\n\n\n        let web3 = this.props.web3;\n\n        //购买信息上链\n\n        //注意回调函数中的this，和外界的this不同，如果向使用外界的this，要赋值成that传过去\n        //注意要使用async，确保先拿到地址，用await关键字确保运行的先后顺序，再用这个地址调用合约方法\n        let that = this;\n        this.props.truffleContract.deployed().then(async (i) => {\n            console.log(\"进入 this.props.truffleContract.deployed() 的回调函数\");\n            //测试时要在MetaMask中选中ganache提供的10个地址之一，from自己创建的地址会失败\n\n            try{\n                //调用合约的 order 方法\n                //即时获取当前地址，用该地址发交易\n                let currentAccount = await web3.eth.getAccounts();\n                message.info(\"交易发起地址为: \"+currentAccount, 2);\n                console.log(\"交易发起地址为: \"+currentAccount);\n\n                await i.order(parseInt(blockChainID), values.buyNum, { from: currentAccount.toString(), value: priceSum}).then(res => {\n                    //注意这里调用合约方法使用的地址，必须是字符串形式，要用 toString() 转化为字符串\n                    message.success(\"购买提交成功\");\n                    console.log(\"成功调用合约的buy方法，返回 : \");\n                    console.dir(res);\n                    //关闭侧边栏\n                    this.onClose();\n                    openNotification(\"购买信息提交成功\",\n                                    \"购买个数: \" + values.buyNum ,\n                                    'bottomLeft');\n                });\n            }catch(err) {\n                message.error(\"向链上提交购买信息失败\",2);\n                console.log(\"调用合约的buy方法失败, err = \");\n                console.dir(err);\n                return;\n            }  \n        });\n\n    }\n\n    //点击购买按钮，表单不能提交时\n    onFinishFailedBuy = (errorInfo) => {\n        message.warning(\"请正确填写购买信息\",2);\n    }\n    \n    render () {\n        return (\n\n\n            <div>\n\n                <Button type=\"primary\" icon={<RocketOutlined />} size={\"large\"} onClick={this.showDrawer}>\n                购买\n                </Button>\n\n            <Drawer\n          title=\"输入购买数量\"\n          width={400}\n          onClose={this.onClose}\n          visible={this.state.visible}\n          bodyStyle={{ paddingBottom: 80 }}\n          extra={\n            <Space>\n              <Button onClick={this.onClose}>取消</Button>\n            </Space>\n          }\n        >\n            <p>售价: <b>{this.props.price}</b></p>\n            <p></p>\n            <p>库存: <b>{this.props.sumNum}</b></p>\n            <Divider />\n          <Form \n            layout=\"vertical\" hideRequiredMark\n            onFinish={this.onFinishBuy}\n            onFinishFailed={this.onFinishFailedBuy}\n            \n          >\n            <Form.Item\n                name=\"buyNum\"\n                label=\"购买个数\"\n                rules={[\n                        {\n                            required: true,\n                            message: '请输入购买个数',\n                        },\n                ]}\n            >\n            <InputNumber\n                min={0}\n                placeholder=\"购买个数不可超过商品库存\"\n                style={{\n                    width: '100%',\n                }}\n            />\n            </Form.Item>\n            \n            <Form.Item>\n                <Button \n                type=\"primary\" \n                htmlType=\"submit\"\n                disabled={ this.props.truffleContract === null || this.props.web3 === null } \n                >\n                提交\n              </Button>\n            </Form.Item>\n\n          </Form>\n        </Drawer>\n\n            </div>\n        );\n    }\n}\n\nexport default Buy;\n","/home/kzj/project/finalize/final/code/react_code/src/components/Auction/Sell/index.jsx",["498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520"],"import React, {Component} from \"react\";\nimport { Menu, Layout, message, Drawer, Space, Button, Divider, Form, InputNumber, Input, Select, List, Avatar, Skeleton } from 'antd';\nimport { UserOutlined, LaptopOutlined, FileSearchOutlined, HomeOutlined, EyeTwoTone, EyeInvisibleOutlined, RocketOutlined } from '@ant-design/icons';\nimport cookie from \"react-cookies\";\n//接入web3\nimport getWeb3 from \"../../../utils/getWeb3\";\nimport getEcommerceStore from \"../../../utils/getEcommerceStore\";\nimport openNotification from \"../../Notification\";\n\nconst { Option } = Select;\n\nconst count = 6;\n\n\nclass Sell extends Component {\n\n    state = {\n        visible: false,\n        //list\n        loading: false,\n        list: [],\n    }\n\n    constructor (props) {\n        super (props);\n    }\n\n        //格式化商品信息，为渲染界面做准备\n      formatOrderInfo = async(originInfo) => {\n\n\n\n          let afterInfo = originInfo[0].map((item, index) => {\n            if(false == originInfo[2][index]){\n              return {\n                //key从0开始\n                key: index,\n                buyer: item,\n                sum: parseInt(originInfo[1][index]),\n              }\n            }\n            \n          });\n          //去除空元素\n          afterInfo = afterInfo.filter(this.checkNotNull);\n     \n          return afterInfo;\n      }\n\n      //去除空元素\n      checkNotNull = (item) => {\n        return item!=null;\n    }\n\n      \n\n\n    async componentDidMount () {\n        console.log(\"生成Sell模块\");\n\n        //注意回调函数中的this，和外界的this不同，如果向使用外界的this，要赋值成that传过去\n        //注意要使用async，确保先拿到地址，用await关键字确保运行的先后顺序，再用这个地址调用合约方法\n        let that = this;\n        this.props.truffleContract.deployed().then( async (i) => {\n            console.log(\"获取订单信息 调用合约的函数\");\n            try{\n                //即时获取当前地址，用该地址发交易\n                let currentAccount = await that.props.web3.eth.getAccounts();\n\n                //ID\n                let blockChainID = this.props.dataArray[0].ID;\n\n                i.orderInfo(blockChainID, { from: currentAccount.toString()}).then(async res => {\n                    //可能返回为空，要判断是否真的取到了数据，如果不判断，直接调用 formatProductInfo(res)，里面的 ipfs 会报错\n                    console.log(\"orderInfo 取到的原始数据为 : \");\n                    console.dir(res);\n\n                    // 0: (3) ['0xaB16f539d0935C81bfd3fe6c2354D111e859cA53',...]\n                    // 1: (3) [BN, BN, BN]\n                    // 2: (3) [false, false, false]\n\n                    //格式化数据，便于显示\n                    let OrderArrayInfo = await this.formatOrderInfo(res);\n                    console.log(\"格式化之后的数据 OrderArrayInfo 为 \");\n                    console.dir(OrderArrayInfo);\n\n                    this.setState({\n                        list: OrderArrayInfo,\n                    });\n                    \n                });  \n            }catch(err) {\n                message.error(\"商品订单查询失败\",2);\n                console.log(\"调用合约的orderInfo方法失败 \" + err);\n            }\n\n            \n        });\n    }\n\n    showDrawer = () => {\n        this.setState({\n          visible: true,\n        });\n      };\n    \n    onClose = () => {\n        this.setState({\n          visible: false,\n        });\n      };\n\n      //处理卖家发货，从合约得到买家的押金\n      sellerDealOrder = (orderIndex) => {\n        console.log(\"orderIndex为 \" + orderIndex + \" 的order信息被卖家处理中\");\n\n        let that = this;\n        this.props.truffleContract.deployed().then( async (i) => {\n          console.log(\"卖家发货 调用合约的函数\");\n          try{\n              //即时获取当前地址，用该地址发交易\n              let currentAccount = await that.props.web3.eth.getAccounts();\n\n              //ID\n              let blockChainID = this.props.dataArray[0].ID;\n\n              i.sendBySeller(blockChainID, orderIndex, { from: currentAccount.toString()}).then(async res => {\n                \n                message.success(\"商品发货成功\",2);\n                  \n              });  \n          }catch(err) {\n              message.error(\"商品发货提交失败\",2);\n              console.log(\"调用合约的sendBySeller方法失败 \" + err);\n          }\n\n          \n      });\n\n      }\n\n\n   \n    render () {\n\n\n      const { loading, list } = this.state;\n\n\n        return (\n\n\n          <div>\n\n            <Button type=\"primary\" icon={<RocketOutlined />} size={\"large\"} onClick={this.showDrawer}>\n                发货\n            </Button>\n\n            <Drawer\n          title=\"发货\"\n          width={600}\n          onClose={this.onClose}\n          visible={this.state.visible}\n          bodyStyle={{ paddingBottom: 80 }}\n          extra={\n            <Space>\n              <Button onClick={this.onClose}>取消</Button>\n            </Space>\n          }\n        >\n            <Divider />\n\n          <List\n        className=\"demo-loadmore-list\"\n        itemLayout=\"horizontal\"\n        dataSource={list}\n        renderItem={item => (\n          <List.Item\n            actions={[<a onClick={(e) => this.sellerDealOrder(item.key)} key=\"list-loadmore-more\">确认</a>]}\n          >\n            <Skeleton avatar title={false} loading={item.loading} active>\n              <List.Item.Meta\n                title={<p>买家: {item.buyer}</p>}\n                description={<p>{item.sum} 件</p>}\n              />\n              <div></div>\n            </Skeleton>\n          </List.Item>\n        )}\n      />\n\n\n        </Drawer>\n\n            </div>\n\n            \n        );\n    }\n}\n\nexport default Sell;\n",{"ruleId":"521","replacedBy":"522"},{"ruleId":"523","replacedBy":"524"},{"ruleId":"525","severity":1,"message":"526","line":5,"column":8,"nodeType":"527","messageId":"528","endLine":5,"endColumn":13},{"ruleId":"521","replacedBy":"529"},{"ruleId":"523","replacedBy":"530"},{"ruleId":"525","severity":1,"message":"531","line":14,"column":13,"nodeType":"527","messageId":"528","endLine":14,"endColumn":16},{"ruleId":"525","severity":1,"message":"532","line":6,"column":9,"nodeType":"527","messageId":"528","endLine":6,"endColumn":13},{"ruleId":"533","severity":1,"message":"534","line":94,"column":25,"nodeType":"535","messageId":"536","endLine":103,"endColumn":18},{"ruleId":"533","severity":1,"message":"537","line":103,"column":27,"nodeType":"535","messageId":"536","endLine":106,"endColumn":18},{"ruleId":"525","severity":1,"message":"538","line":2,"column":8,"nodeType":"527","messageId":"528","endLine":2,"endColumn":14},{"ruleId":"525","severity":1,"message":"539","line":3,"column":23,"nodeType":"527","messageId":"528","endLine":3,"endColumn":30},{"ruleId":"525","severity":1,"message":"540","line":3,"column":32,"nodeType":"527","messageId":"528","endLine":3,"endColumn":36},{"ruleId":"525","severity":1,"message":"541","line":3,"column":38,"nodeType":"527","messageId":"528","endLine":3,"endColumn":43},{"ruleId":"525","severity":1,"message":"542","line":3,"column":45,"nodeType":"527","messageId":"528","endLine":3,"endColumn":48},{"ruleId":"543","severity":1,"message":"544","line":33,"column":5,"nodeType":"545","messageId":"546","endLine":35,"endColumn":6},{"ruleId":"525","severity":1,"message":"526","line":2,"column":8,"nodeType":"527","messageId":"528","endLine":2,"endColumn":13},{"ruleId":"525","severity":1,"message":"547","line":12,"column":5,"nodeType":"527","messageId":"528","endLine":12,"endColumn":8},{"ruleId":"525","severity":1,"message":"548","line":13,"column":5,"nodeType":"527","messageId":"528","endLine":13,"endColumn":8},{"ruleId":"525","severity":1,"message":"549","line":14,"column":5,"nodeType":"527","messageId":"528","endLine":14,"endColumn":13},{"ruleId":"525","severity":1,"message":"550","line":17,"column":5,"nodeType":"527","messageId":"528","endLine":17,"endColumn":17},{"ruleId":"525","severity":1,"message":"551","line":19,"column":5,"nodeType":"527","messageId":"528","endLine":19,"endColumn":11},{"ruleId":"525","severity":1,"message":"552","line":24,"column":26,"nodeType":"527","messageId":"528","endLine":24,"endColumn":39},{"ruleId":"525","severity":1,"message":"553","line":41,"column":8,"nodeType":"527","messageId":"528","endLine":41,"endColumn":14},{"ruleId":"525","severity":1,"message":"554","line":44,"column":9,"nodeType":"527","messageId":"528","endLine":44,"endColumn":20},{"ruleId":"543","severity":1,"message":"544","line":75,"column":5,"nodeType":"545","messageId":"546","endLine":77,"endColumn":6},{"ruleId":"533","severity":1,"message":"537","line":259,"column":30,"nodeType":"535","messageId":"536","endLine":264,"endColumn":22},{"ruleId":"525","severity":1,"message":"538","line":2,"column":8,"nodeType":"527","messageId":"528","endLine":2,"endColumn":14},{"ruleId":"525","severity":1,"message":"539","line":3,"column":23,"nodeType":"527","messageId":"528","endLine":3,"endColumn":30},{"ruleId":"525","severity":1,"message":"540","line":3,"column":32,"nodeType":"527","messageId":"528","endLine":3,"endColumn":36},{"ruleId":"525","severity":1,"message":"541","line":3,"column":38,"nodeType":"527","messageId":"528","endLine":3,"endColumn":43},{"ruleId":"525","severity":1,"message":"542","line":3,"column":45,"nodeType":"527","messageId":"528","endLine":3,"endColumn":48},{"ruleId":"543","severity":1,"message":"544","line":33,"column":5,"nodeType":"545","messageId":"546","endLine":35,"endColumn":6},{"ruleId":"525","severity":1,"message":"526","line":2,"column":8,"nodeType":"527","messageId":"528","endLine":2,"endColumn":13},{"ruleId":"525","severity":1,"message":"547","line":12,"column":5,"nodeType":"527","messageId":"528","endLine":12,"endColumn":8},{"ruleId":"525","severity":1,"message":"548","line":13,"column":5,"nodeType":"527","messageId":"528","endLine":13,"endColumn":8},{"ruleId":"525","severity":1,"message":"549","line":14,"column":5,"nodeType":"527","messageId":"528","endLine":14,"endColumn":13},{"ruleId":"525","severity":1,"message":"550","line":17,"column":5,"nodeType":"527","messageId":"528","endLine":17,"endColumn":17},{"ruleId":"525","severity":1,"message":"552","line":24,"column":26,"nodeType":"527","messageId":"528","endLine":24,"endColumn":39},{"ruleId":"543","severity":1,"message":"544","line":86,"column":5,"nodeType":"545","messageId":"546","endLine":88,"endColumn":6},{"ruleId":"533","severity":1,"message":"537","line":279,"column":30,"nodeType":"535","messageId":"536","endLine":284,"endColumn":22},{"ruleId":"525","severity":1,"message":"555","line":2,"column":8,"nodeType":"527","messageId":"528","endLine":2,"endColumn":16},{"ruleId":"525","severity":1,"message":"556","line":5,"column":16,"nodeType":"527","messageId":"528","endLine":5,"endColumn":22},{"ruleId":"525","severity":1,"message":"557","line":6,"column":10,"nodeType":"527","messageId":"528","endLine":6,"endColumn":25},{"ruleId":"525","severity":1,"message":"558","line":6,"column":27,"nodeType":"527","messageId":"528","endLine":6,"endColumn":39},{"ruleId":"525","severity":1,"message":"559","line":6,"column":41,"nodeType":"527","messageId":"528","endLine":6,"endColumn":53},{"ruleId":"543","severity":1,"message":"544","line":39,"column":3,"nodeType":"545","messageId":"546","endLine":41,"endColumn":4},{"ruleId":"525","severity":1,"message":"560","line":5,"column":35,"nodeType":"527","messageId":"528","endLine":5,"endColumn":41},{"ruleId":"525","severity":1,"message":"561","line":5,"column":48,"nodeType":"527","messageId":"528","endLine":5,"endColumn":56},{"ruleId":"525","severity":1,"message":"562","line":8,"column":5,"nodeType":"527","messageId":"528","endLine":8,"endColumn":10},{"ruleId":"525","severity":1,"message":"563","line":10,"column":5,"nodeType":"527","messageId":"528","endLine":10,"endColumn":13},{"ruleId":"525","severity":1,"message":"564","line":11,"column":5,"nodeType":"527","messageId":"528","endLine":11,"endColumn":11},{"ruleId":"525","severity":1,"message":"549","line":14,"column":5,"nodeType":"527","messageId":"528","endLine":14,"endColumn":13},{"ruleId":"525","severity":1,"message":"565","line":16,"column":5,"nodeType":"527","messageId":"528","endLine":16,"endColumn":11},{"ruleId":"525","severity":1,"message":"550","line":17,"column":5,"nodeType":"527","messageId":"528","endLine":17,"endColumn":17},{"ruleId":"525","severity":1,"message":"566","line":18,"column":5,"nodeType":"527","messageId":"528","endLine":18,"endColumn":15},{"ruleId":"525","severity":1,"message":"551","line":19,"column":5,"nodeType":"527","messageId":"528","endLine":19,"endColumn":11},{"ruleId":"525","severity":1,"message":"567","line":28,"column":10,"nodeType":"527","messageId":"528","endLine":28,"endColumn":14},{"ruleId":"525","severity":1,"message":"556","line":28,"column":16,"nodeType":"527","messageId":"528","endLine":28,"endColumn":22},{"ruleId":"525","severity":1,"message":"568","line":67,"column":52,"nodeType":"527","messageId":"528","endLine":67,"endColumn":71},{"ruleId":"525","severity":1,"message":"569","line":70,"column":7,"nodeType":"527","messageId":"528","endLine":70,"endColumn":15},{"ruleId":"543","severity":1,"message":"544","line":113,"column":5,"nodeType":"545","messageId":"546","endLine":115,"endColumn":6},{"ruleId":"570","severity":1,"message":"571","line":223,"column":27,"nodeType":"572","messageId":"573","endLine":223,"endColumn":29},{"ruleId":"570","severity":1,"message":"571","line":232,"column":32,"nodeType":"572","messageId":"573","endLine":232,"endColumn":34},{"ruleId":"570","severity":1,"message":"571","line":252,"column":43,"nodeType":"572","messageId":"573","endLine":252,"endColumn":45},{"ruleId":"525","severity":1,"message":"574","line":390,"column":13,"nodeType":"527","messageId":"528","endLine":390,"endColumn":17},{"ruleId":"570","severity":1,"message":"571","line":501,"column":52,"nodeType":"572","messageId":"573","endLine":501,"endColumn":54},{"ruleId":"570","severity":1,"message":"571","line":501,"column":84,"nodeType":"572","messageId":"573","endLine":501,"endColumn":86},{"ruleId":"570","severity":1,"message":"571","line":897,"column":19,"nodeType":"572","messageId":"573","endLine":897,"endColumn":21},{"ruleId":"570","severity":1,"message":"571","line":897,"column":60,"nodeType":"572","messageId":"573","endLine":897,"endColumn":62},{"ruleId":"525","severity":1,"message":"575","line":3,"column":22,"nodeType":"527","messageId":"528","endLine":3,"endColumn":29},{"ruleId":"525","severity":1,"message":"576","line":9,"column":35,"nodeType":"527","messageId":"528","endLine":9,"endColumn":39},{"ruleId":"525","severity":1,"message":"577","line":9,"column":41,"nodeType":"527","messageId":"528","endLine":9,"endColumn":45},{"ruleId":"525","severity":1,"message":"578","line":11,"column":15,"nodeType":"527","messageId":"528","endLine":11,"endColumn":27},{"ruleId":"525","severity":1,"message":"579","line":2,"column":10,"nodeType":"527","messageId":"528","endLine":2,"endColumn":14},{"ruleId":"525","severity":1,"message":"580","line":2,"column":16,"nodeType":"527","messageId":"528","endLine":2,"endColumn":22},{"ruleId":"525","severity":1,"message":"581","line":3,"column":10,"nodeType":"527","messageId":"528","endLine":3,"endColumn":22},{"ruleId":"525","severity":1,"message":"582","line":3,"column":24,"nodeType":"527","messageId":"528","endLine":3,"endColumn":38},{"ruleId":"525","severity":1,"message":"583","line":3,"column":40,"nodeType":"527","messageId":"528","endLine":3,"endColumn":58},{"ruleId":"525","severity":1,"message":"584","line":3,"column":60,"nodeType":"527","messageId":"528","endLine":3,"endColumn":72},{"ruleId":"525","severity":1,"message":"538","line":4,"column":8,"nodeType":"527","messageId":"528","endLine":4,"endColumn":14},{"ruleId":"543","severity":1,"message":"544","line":33,"column":5,"nodeType":"545","messageId":"546","endLine":35,"endColumn":6},{"ruleId":"585","severity":1,"message":"586","line":95,"column":40,"nodeType":"572","messageId":"587","endLine":95,"endColumn":41},{"ruleId":"525","severity":1,"message":"574","line":104,"column":13,"nodeType":"527","messageId":"528","endLine":104,"endColumn":17},{"ruleId":"525","severity":1,"message":"579","line":2,"column":10,"nodeType":"527","messageId":"528","endLine":2,"endColumn":14},{"ruleId":"525","severity":1,"message":"580","line":2,"column":16,"nodeType":"527","messageId":"528","endLine":2,"endColumn":22},{"ruleId":"525","severity":1,"message":"581","line":3,"column":10,"nodeType":"527","messageId":"528","endLine":3,"endColumn":22},{"ruleId":"525","severity":1,"message":"582","line":3,"column":24,"nodeType":"527","messageId":"528","endLine":3,"endColumn":38},{"ruleId":"525","severity":1,"message":"583","line":3,"column":40,"nodeType":"527","messageId":"528","endLine":3,"endColumn":58},{"ruleId":"525","severity":1,"message":"584","line":3,"column":60,"nodeType":"527","messageId":"528","endLine":3,"endColumn":72},{"ruleId":"525","severity":1,"message":"538","line":4,"column":8,"nodeType":"527","messageId":"528","endLine":4,"endColumn":14},{"ruleId":"525","severity":1,"message":"588","line":6,"column":8,"nodeType":"527","messageId":"528","endLine":6,"endColumn":15},{"ruleId":"525","severity":1,"message":"589","line":7,"column":8,"nodeType":"527","messageId":"528","endLine":7,"endColumn":25},{"ruleId":"543","severity":1,"message":"544","line":33,"column":5,"nodeType":"545","messageId":"546","endLine":35,"endColumn":6},{"ruleId":"525","severity":1,"message":"574","line":90,"column":13,"nodeType":"527","messageId":"528","endLine":90,"endColumn":17},{"ruleId":"525","severity":1,"message":"579","line":2,"column":10,"nodeType":"527","messageId":"528","endLine":2,"endColumn":14},{"ruleId":"525","severity":1,"message":"580","line":2,"column":16,"nodeType":"527","messageId":"528","endLine":2,"endColumn":22},{"ruleId":"525","severity":1,"message":"562","line":2,"column":96,"nodeType":"527","messageId":"528","endLine":2,"endColumn":101},{"ruleId":"525","severity":1,"message":"581","line":3,"column":10,"nodeType":"527","messageId":"528","endLine":3,"endColumn":22},{"ruleId":"525","severity":1,"message":"582","line":3,"column":24,"nodeType":"527","messageId":"528","endLine":3,"endColumn":38},{"ruleId":"525","severity":1,"message":"583","line":3,"column":40,"nodeType":"527","messageId":"528","endLine":3,"endColumn":58},{"ruleId":"525","severity":1,"message":"584","line":3,"column":60,"nodeType":"527","messageId":"528","endLine":3,"endColumn":72},{"ruleId":"525","severity":1,"message":"590","line":3,"column":74,"nodeType":"527","messageId":"528","endLine":3,"endColumn":84},{"ruleId":"525","severity":1,"message":"591","line":3,"column":86,"nodeType":"527","messageId":"528","endLine":3,"endColumn":106},{"ruleId":"525","severity":1,"message":"538","line":4,"column":8,"nodeType":"527","messageId":"528","endLine":4,"endColumn":14},{"ruleId":"543","severity":1,"message":"544","line":32,"column":5,"nodeType":"545","messageId":"546","endLine":34,"endColumn":6},{"ruleId":"525","severity":1,"message":"574","line":85,"column":13,"nodeType":"527","messageId":"528","endLine":85,"endColumn":17},{"ruleId":"525","severity":1,"message":"579","line":2,"column":10,"nodeType":"527","messageId":"528","endLine":2,"endColumn":14},{"ruleId":"525","severity":1,"message":"580","line":2,"column":16,"nodeType":"527","messageId":"528","endLine":2,"endColumn":22},{"ruleId":"525","severity":1,"message":"592","line":2,"column":71,"nodeType":"527","messageId":"528","endLine":2,"endColumn":82},{"ruleId":"525","severity":1,"message":"562","line":2,"column":84,"nodeType":"527","messageId":"528","endLine":2,"endColumn":89},{"ruleId":"525","severity":1,"message":"581","line":3,"column":10,"nodeType":"527","messageId":"528","endLine":3,"endColumn":22},{"ruleId":"525","severity":1,"message":"582","line":3,"column":24,"nodeType":"527","messageId":"528","endLine":3,"endColumn":38},{"ruleId":"525","severity":1,"message":"583","line":3,"column":40,"nodeType":"527","messageId":"528","endLine":3,"endColumn":58},{"ruleId":"525","severity":1,"message":"584","line":3,"column":60,"nodeType":"527","messageId":"528","endLine":3,"endColumn":72},{"ruleId":"525","severity":1,"message":"590","line":3,"column":74,"nodeType":"527","messageId":"528","endLine":3,"endColumn":84},{"ruleId":"525","severity":1,"message":"591","line":3,"column":86,"nodeType":"527","messageId":"528","endLine":3,"endColumn":106},{"ruleId":"525","severity":1,"message":"538","line":4,"column":8,"nodeType":"527","messageId":"528","endLine":4,"endColumn":14},{"ruleId":"525","severity":1,"message":"588","line":6,"column":8,"nodeType":"527","messageId":"528","endLine":6,"endColumn":15},{"ruleId":"525","severity":1,"message":"589","line":7,"column":8,"nodeType":"527","messageId":"528","endLine":7,"endColumn":25},{"ruleId":"525","severity":1,"message":"553","line":9,"column":8,"nodeType":"527","messageId":"528","endLine":9,"endColumn":14},{"ruleId":"525","severity":1,"message":"593","line":11,"column":9,"nodeType":"527","messageId":"528","endLine":11,"endColumn":15},{"ruleId":"543","severity":1,"message":"544","line":20,"column":5,"nodeType":"545","messageId":"546","endLine":22,"endColumn":6},{"ruleId":"525","severity":1,"message":"579","line":2,"column":10,"nodeType":"527","messageId":"528","endLine":2,"endColumn":14},{"ruleId":"525","severity":1,"message":"580","line":2,"column":16,"nodeType":"527","messageId":"528","endLine":2,"endColumn":22},{"ruleId":"525","severity":1,"message":"592","line":2,"column":71,"nodeType":"527","messageId":"528","endLine":2,"endColumn":82},{"ruleId":"525","severity":1,"message":"562","line":2,"column":84,"nodeType":"527","messageId":"528","endLine":2,"endColumn":89},{"ruleId":"525","severity":1,"message":"581","line":3,"column":10,"nodeType":"527","messageId":"528","endLine":3,"endColumn":22},{"ruleId":"525","severity":1,"message":"582","line":3,"column":24,"nodeType":"527","messageId":"528","endLine":3,"endColumn":38},{"ruleId":"525","severity":1,"message":"583","line":3,"column":40,"nodeType":"527","messageId":"528","endLine":3,"endColumn":58},{"ruleId":"525","severity":1,"message":"584","line":3,"column":60,"nodeType":"527","messageId":"528","endLine":3,"endColumn":72},{"ruleId":"525","severity":1,"message":"590","line":3,"column":74,"nodeType":"527","messageId":"528","endLine":3,"endColumn":84},{"ruleId":"525","severity":1,"message":"591","line":3,"column":86,"nodeType":"527","messageId":"528","endLine":3,"endColumn":106},{"ruleId":"525","severity":1,"message":"538","line":4,"column":8,"nodeType":"527","messageId":"528","endLine":4,"endColumn":14},{"ruleId":"525","severity":1,"message":"588","line":6,"column":8,"nodeType":"527","messageId":"528","endLine":6,"endColumn":15},{"ruleId":"525","severity":1,"message":"589","line":7,"column":8,"nodeType":"527","messageId":"528","endLine":7,"endColumn":25},{"ruleId":"525","severity":1,"message":"553","line":9,"column":8,"nodeType":"527","messageId":"528","endLine":9,"endColumn":14},{"ruleId":"525","severity":1,"message":"593","line":11,"column":9,"nodeType":"527","messageId":"528","endLine":11,"endColumn":15},{"ruleId":"543","severity":1,"message":"544","line":20,"column":5,"nodeType":"545","messageId":"546","endLine":22,"endColumn":6},{"ruleId":"525","severity":1,"message":"579","line":2,"column":10,"nodeType":"527","messageId":"528","endLine":2,"endColumn":14},{"ruleId":"525","severity":1,"message":"580","line":2,"column":16,"nodeType":"527","messageId":"528","endLine":2,"endColumn":22},{"ruleId":"525","severity":1,"message":"560","line":2,"column":33,"nodeType":"527","messageId":"528","endLine":2,"endColumn":39},{"ruleId":"525","severity":1,"message":"594","line":2,"column":41,"nodeType":"527","messageId":"528","endLine":2,"endColumn":46},{"ruleId":"525","severity":1,"message":"595","line":2,"column":48,"nodeType":"527","messageId":"528","endLine":2,"endColumn":54},{"ruleId":"525","severity":1,"message":"575","line":2,"column":56,"nodeType":"527","messageId":"528","endLine":2,"endColumn":63},{"ruleId":"525","severity":1,"message":"596","line":2,"column":65,"nodeType":"527","messageId":"528","endLine":2,"endColumn":69},{"ruleId":"525","severity":1,"message":"592","line":2,"column":71,"nodeType":"527","messageId":"528","endLine":2,"endColumn":82},{"ruleId":"525","severity":1,"message":"562","line":2,"column":84,"nodeType":"527","messageId":"528","endLine":2,"endColumn":89},{"ruleId":"525","severity":1,"message":"564","line":2,"column":91,"nodeType":"527","messageId":"528","endLine":2,"endColumn":97},{"ruleId":"525","severity":1,"message":"581","line":3,"column":10,"nodeType":"527","messageId":"528","endLine":3,"endColumn":22},{"ruleId":"525","severity":1,"message":"582","line":3,"column":24,"nodeType":"527","messageId":"528","endLine":3,"endColumn":38},{"ruleId":"525","severity":1,"message":"583","line":3,"column":40,"nodeType":"527","messageId":"528","endLine":3,"endColumn":58},{"ruleId":"525","severity":1,"message":"584","line":3,"column":60,"nodeType":"527","messageId":"528","endLine":3,"endColumn":72},{"ruleId":"525","severity":1,"message":"590","line":3,"column":74,"nodeType":"527","messageId":"528","endLine":3,"endColumn":84},{"ruleId":"525","severity":1,"message":"591","line":3,"column":86,"nodeType":"527","messageId":"528","endLine":3,"endColumn":106},{"ruleId":"525","severity":1,"message":"597","line":3,"column":108,"nodeType":"527","messageId":"528","endLine":3,"endColumn":122},{"ruleId":"525","severity":1,"message":"538","line":4,"column":8,"nodeType":"527","messageId":"528","endLine":4,"endColumn":14},{"ruleId":"525","severity":1,"message":"588","line":6,"column":8,"nodeType":"527","messageId":"528","endLine":6,"endColumn":15},{"ruleId":"525","severity":1,"message":"589","line":7,"column":8,"nodeType":"527","messageId":"528","endLine":7,"endColumn":25},{"ruleId":"525","severity":1,"message":"598","line":8,"column":8,"nodeType":"527","messageId":"528","endLine":8,"endColumn":24},{"ruleId":"525","severity":1,"message":"599","line":45,"column":25,"nodeType":"527","messageId":"528","endLine":45,"endColumn":44},{"ruleId":"570","severity":1,"message":"600","line":46,"column":50,"nodeType":"572","messageId":"573","endLine":46,"endColumn":52},{"ruleId":"525","severity":1,"message":"579","line":2,"column":10,"nodeType":"527","messageId":"528","endLine":2,"endColumn":14},{"ruleId":"525","severity":1,"message":"580","line":2,"column":16,"nodeType":"527","messageId":"528","endLine":2,"endColumn":22},{"ruleId":"525","severity":1,"message":"560","line":2,"column":33,"nodeType":"527","messageId":"528","endLine":2,"endColumn":39},{"ruleId":"525","severity":1,"message":"594","line":2,"column":41,"nodeType":"527","messageId":"528","endLine":2,"endColumn":46},{"ruleId":"525","severity":1,"message":"595","line":2,"column":48,"nodeType":"527","messageId":"528","endLine":2,"endColumn":54},{"ruleId":"525","severity":1,"message":"575","line":2,"column":56,"nodeType":"527","messageId":"528","endLine":2,"endColumn":63},{"ruleId":"525","severity":1,"message":"596","line":2,"column":65,"nodeType":"527","messageId":"528","endLine":2,"endColumn":69},{"ruleId":"525","severity":1,"message":"592","line":2,"column":71,"nodeType":"527","messageId":"528","endLine":2,"endColumn":82},{"ruleId":"525","severity":1,"message":"562","line":2,"column":84,"nodeType":"527","messageId":"528","endLine":2,"endColumn":89},{"ruleId":"525","severity":1,"message":"564","line":2,"column":91,"nodeType":"527","messageId":"528","endLine":2,"endColumn":97},{"ruleId":"525","severity":1,"message":"581","line":3,"column":10,"nodeType":"527","messageId":"528","endLine":3,"endColumn":22},{"ruleId":"525","severity":1,"message":"582","line":3,"column":24,"nodeType":"527","messageId":"528","endLine":3,"endColumn":38},{"ruleId":"525","severity":1,"message":"583","line":3,"column":40,"nodeType":"527","messageId":"528","endLine":3,"endColumn":58},{"ruleId":"525","severity":1,"message":"584","line":3,"column":60,"nodeType":"527","messageId":"528","endLine":3,"endColumn":72},{"ruleId":"525","severity":1,"message":"590","line":3,"column":74,"nodeType":"527","messageId":"528","endLine":3,"endColumn":84},{"ruleId":"525","severity":1,"message":"591","line":3,"column":86,"nodeType":"527","messageId":"528","endLine":3,"endColumn":106},{"ruleId":"525","severity":1,"message":"597","line":3,"column":108,"nodeType":"527","messageId":"528","endLine":3,"endColumn":122},{"ruleId":"525","severity":1,"message":"538","line":4,"column":8,"nodeType":"527","messageId":"528","endLine":4,"endColumn":14},{"ruleId":"525","severity":1,"message":"588","line":6,"column":8,"nodeType":"527","messageId":"528","endLine":6,"endColumn":15},{"ruleId":"525","severity":1,"message":"589","line":7,"column":8,"nodeType":"527","messageId":"528","endLine":7,"endColumn":25},{"ruleId":"525","severity":1,"message":"598","line":8,"column":8,"nodeType":"527","messageId":"528","endLine":8,"endColumn":24},{"ruleId":"570","severity":1,"message":"571","line":57,"column":32,"nodeType":"572","messageId":"573","endLine":57,"endColumn":34},{"ruleId":"570","severity":1,"message":"571","line":71,"column":47,"nodeType":"572","messageId":"573","endLine":71,"endColumn":49},{"ruleId":"570","severity":1,"message":"571","line":78,"column":47,"nodeType":"572","messageId":"573","endLine":78,"endColumn":49},{"ruleId":"570","severity":1,"message":"571","line":86,"column":43,"nodeType":"572","messageId":"573","endLine":86,"endColumn":45},{"ruleId":"570","severity":1,"message":"571","line":86,"column":72,"nodeType":"572","messageId":"573","endLine":86,"endColumn":74},{"ruleId":"570","severity":1,"message":"571","line":86,"column":101,"nodeType":"572","messageId":"573","endLine":86,"endColumn":103},{"ruleId":"525","severity":1,"message":"601","line":5,"column":9,"nodeType":"527","messageId":"528","endLine":5,"endColumn":13},{"ruleId":"525","severity":1,"message":"602","line":80,"column":16,"nodeType":"527","messageId":"528","endLine":80,"endColumn":28},{"ruleId":"525","severity":1,"message":"603","line":80,"column":30,"nodeType":"527","messageId":"528","endLine":80,"endColumn":43},{"ruleId":"525","severity":1,"message":"604","line":80,"column":45,"nodeType":"527","messageId":"528","endLine":80,"endColumn":56},{"ruleId":"525","severity":1,"message":"555","line":2,"column":8,"nodeType":"527","messageId":"528","endLine":2,"endColumn":16},{"ruleId":"525","severity":1,"message":"556","line":5,"column":16,"nodeType":"527","messageId":"528","endLine":5,"endColumn":22},{"ruleId":"525","severity":1,"message":"557","line":6,"column":10,"nodeType":"527","messageId":"528","endLine":6,"endColumn":25},{"ruleId":"525","severity":1,"message":"558","line":6,"column":27,"nodeType":"527","messageId":"528","endLine":6,"endColumn":39},{"ruleId":"525","severity":1,"message":"559","line":6,"column":41,"nodeType":"527","messageId":"528","endLine":6,"endColumn":53},{"ruleId":"543","severity":1,"message":"544","line":41,"column":3,"nodeType":"545","messageId":"546","endLine":43,"endColumn":4},{"ruleId":"525","severity":1,"message":"560","line":5,"column":35,"nodeType":"527","messageId":"528","endLine":5,"endColumn":41},{"ruleId":"525","severity":1,"message":"561","line":5,"column":48,"nodeType":"527","messageId":"528","endLine":5,"endColumn":56},{"ruleId":"525","severity":1,"message":"562","line":8,"column":5,"nodeType":"527","messageId":"528","endLine":8,"endColumn":10},{"ruleId":"525","severity":1,"message":"563","line":10,"column":5,"nodeType":"527","messageId":"528","endLine":10,"endColumn":13},{"ruleId":"525","severity":1,"message":"564","line":11,"column":5,"nodeType":"527","messageId":"528","endLine":11,"endColumn":11},{"ruleId":"525","severity":1,"message":"549","line":14,"column":5,"nodeType":"527","messageId":"528","endLine":14,"endColumn":13},{"ruleId":"525","severity":1,"message":"565","line":16,"column":5,"nodeType":"527","messageId":"528","endLine":16,"endColumn":11},{"ruleId":"525","severity":1,"message":"550","line":17,"column":5,"nodeType":"527","messageId":"528","endLine":17,"endColumn":17},{"ruleId":"525","severity":1,"message":"566","line":18,"column":5,"nodeType":"527","messageId":"528","endLine":18,"endColumn":15},{"ruleId":"525","severity":1,"message":"551","line":19,"column":5,"nodeType":"527","messageId":"528","endLine":19,"endColumn":11},{"ruleId":"525","severity":1,"message":"567","line":28,"column":10,"nodeType":"527","messageId":"528","endLine":28,"endColumn":14},{"ruleId":"525","severity":1,"message":"556","line":28,"column":16,"nodeType":"527","messageId":"528","endLine":28,"endColumn":22},{"ruleId":"525","severity":1,"message":"605","line":54,"column":8,"nodeType":"527","messageId":"528","endLine":54,"endColumn":17},{"ruleId":"525","severity":1,"message":"553","line":55,"column":8,"nodeType":"527","messageId":"528","endLine":55,"endColumn":14},{"ruleId":"525","severity":1,"message":"606","line":56,"column":31,"nodeType":"527","messageId":"528","endLine":56,"endColumn":50},{"ruleId":"525","severity":1,"message":"568","line":56,"column":52,"nodeType":"527","messageId":"528","endLine":56,"endColumn":71},{"ruleId":"525","severity":1,"message":"607","line":56,"column":73,"nodeType":"527","messageId":"528","endLine":56,"endColumn":98},{"ruleId":"525","severity":1,"message":"569","line":59,"column":7,"nodeType":"527","messageId":"528","endLine":59,"endColumn":15},{"ruleId":"543","severity":1,"message":"544","line":84,"column":5,"nodeType":"545","messageId":"546","endLine":86,"endColumn":6},{"ruleId":"570","severity":1,"message":"571","line":186,"column":39,"nodeType":"572","messageId":"573","endLine":186,"endColumn":41},{"ruleId":"570","severity":1,"message":"571","line":204,"column":27,"nodeType":"572","messageId":"573","endLine":204,"endColumn":29},{"ruleId":"570","severity":1,"message":"571","line":212,"column":32,"nodeType":"572","messageId":"573","endLine":212,"endColumn":34},{"ruleId":"525","severity":1,"message":"608","line":387,"column":22,"nodeType":"527","messageId":"528","endLine":387,"endColumn":30},{"ruleId":"525","severity":1,"message":"609","line":3,"column":10,"nodeType":"527","messageId":"528","endLine":3,"endColumn":23},{"ruleId":"543","severity":1,"message":"544","line":26,"column":5,"nodeType":"545","messageId":"546","endLine":28,"endColumn":6},{"ruleId":"525","severity":1,"message":"574","line":57,"column":11,"nodeType":"527","messageId":"528","endLine":57,"endColumn":15},{"ruleId":"570","severity":1,"message":"571","line":131,"column":44,"nodeType":"572","messageId":"573","endLine":131,"endColumn":46},{"ruleId":"570","severity":1,"message":"571","line":131,"column":63,"nodeType":"572","messageId":"573","endLine":131,"endColumn":65},{"ruleId":"570","severity":1,"message":"571","line":131,"column":81,"nodeType":"572","messageId":"573","endLine":131,"endColumn":83},{"ruleId":"525","severity":1,"message":"579","line":2,"column":10,"nodeType":"527","messageId":"528","endLine":2,"endColumn":14},{"ruleId":"525","severity":1,"message":"580","line":2,"column":16,"nodeType":"527","messageId":"528","endLine":2,"endColumn":22},{"ruleId":"525","severity":1,"message":"575","line":2,"column":56,"nodeType":"527","messageId":"528","endLine":2,"endColumn":63},{"ruleId":"525","severity":1,"message":"562","line":2,"column":84,"nodeType":"527","messageId":"528","endLine":2,"endColumn":89},{"ruleId":"525","severity":1,"message":"581","line":3,"column":10,"nodeType":"527","messageId":"528","endLine":3,"endColumn":22},{"ruleId":"525","severity":1,"message":"582","line":3,"column":24,"nodeType":"527","messageId":"528","endLine":3,"endColumn":38},{"ruleId":"525","severity":1,"message":"583","line":3,"column":40,"nodeType":"527","messageId":"528","endLine":3,"endColumn":58},{"ruleId":"525","severity":1,"message":"584","line":3,"column":60,"nodeType":"527","messageId":"528","endLine":3,"endColumn":72},{"ruleId":"525","severity":1,"message":"590","line":3,"column":74,"nodeType":"527","messageId":"528","endLine":3,"endColumn":84},{"ruleId":"525","severity":1,"message":"591","line":3,"column":86,"nodeType":"527","messageId":"528","endLine":3,"endColumn":106},{"ruleId":"525","severity":1,"message":"538","line":4,"column":8,"nodeType":"527","messageId":"528","endLine":4,"endColumn":14},{"ruleId":"543","severity":1,"message":"544","line":45,"column":5,"nodeType":"545","messageId":"546","endLine":47,"endColumn":6},{"ruleId":"525","severity":1,"message":"574","line":105,"column":13,"nodeType":"527","messageId":"528","endLine":105,"endColumn":17},{"ruleId":"525","severity":1,"message":"579","line":2,"column":10,"nodeType":"527","messageId":"528","endLine":2,"endColumn":14},{"ruleId":"525","severity":1,"message":"580","line":2,"column":16,"nodeType":"527","messageId":"528","endLine":2,"endColumn":22},{"ruleId":"525","severity":1,"message":"562","line":2,"column":84,"nodeType":"527","messageId":"528","endLine":2,"endColumn":89},{"ruleId":"525","severity":1,"message":"581","line":3,"column":10,"nodeType":"527","messageId":"528","endLine":3,"endColumn":22},{"ruleId":"525","severity":1,"message":"582","line":3,"column":24,"nodeType":"527","messageId":"528","endLine":3,"endColumn":38},{"ruleId":"525","severity":1,"message":"583","line":3,"column":40,"nodeType":"527","messageId":"528","endLine":3,"endColumn":58},{"ruleId":"525","severity":1,"message":"584","line":3,"column":60,"nodeType":"527","messageId":"528","endLine":3,"endColumn":72},{"ruleId":"525","severity":1,"message":"590","line":3,"column":74,"nodeType":"527","messageId":"528","endLine":3,"endColumn":84},{"ruleId":"525","severity":1,"message":"591","line":3,"column":86,"nodeType":"527","messageId":"528","endLine":3,"endColumn":106},{"ruleId":"525","severity":1,"message":"538","line":4,"column":8,"nodeType":"527","messageId":"528","endLine":4,"endColumn":14},{"ruleId":"525","severity":1,"message":"593","line":10,"column":9,"nodeType":"527","messageId":"528","endLine":10,"endColumn":15},{"ruleId":"543","severity":1,"message":"544","line":20,"column":5,"nodeType":"545","messageId":"546","endLine":22,"endColumn":6},{"ruleId":"570","severity":1,"message":"571","line":53,"column":40,"nodeType":"572","messageId":"573","endLine":53,"endColumn":42},{"ruleId":"525","severity":1,"message":"574","line":73,"column":13,"nodeType":"527","messageId":"528","endLine":73,"endColumn":17},{"ruleId":"525","severity":1,"message":"579","line":2,"column":10,"nodeType":"527","messageId":"528","endLine":2,"endColumn":14},{"ruleId":"525","severity":1,"message":"580","line":2,"column":16,"nodeType":"527","messageId":"528","endLine":2,"endColumn":22},{"ruleId":"525","severity":1,"message":"596","line":2,"column":65,"nodeType":"527","messageId":"528","endLine":2,"endColumn":69},{"ruleId":"525","severity":1,"message":"592","line":2,"column":71,"nodeType":"527","messageId":"528","endLine":2,"endColumn":82},{"ruleId":"525","severity":1,"message":"562","line":2,"column":84,"nodeType":"527","messageId":"528","endLine":2,"endColumn":89},{"ruleId":"525","severity":1,"message":"556","line":2,"column":105,"nodeType":"527","messageId":"528","endLine":2,"endColumn":111},{"ruleId":"525","severity":1,"message":"581","line":3,"column":10,"nodeType":"527","messageId":"528","endLine":3,"endColumn":22},{"ruleId":"525","severity":1,"message":"582","line":3,"column":24,"nodeType":"527","messageId":"528","endLine":3,"endColumn":38},{"ruleId":"525","severity":1,"message":"583","line":3,"column":40,"nodeType":"527","messageId":"528","endLine":3,"endColumn":58},{"ruleId":"525","severity":1,"message":"584","line":3,"column":60,"nodeType":"527","messageId":"528","endLine":3,"endColumn":72},{"ruleId":"525","severity":1,"message":"590","line":3,"column":74,"nodeType":"527","messageId":"528","endLine":3,"endColumn":84},{"ruleId":"525","severity":1,"message":"591","line":3,"column":86,"nodeType":"527","messageId":"528","endLine":3,"endColumn":106},{"ruleId":"525","severity":1,"message":"538","line":4,"column":8,"nodeType":"527","messageId":"528","endLine":4,"endColumn":14},{"ruleId":"525","severity":1,"message":"588","line":6,"column":8,"nodeType":"527","messageId":"528","endLine":6,"endColumn":15},{"ruleId":"525","severity":1,"message":"589","line":7,"column":8,"nodeType":"527","messageId":"528","endLine":7,"endColumn":25},{"ruleId":"525","severity":1,"message":"598","line":8,"column":8,"nodeType":"527","messageId":"528","endLine":8,"endColumn":24},{"ruleId":"525","severity":1,"message":"593","line":10,"column":9,"nodeType":"527","messageId":"528","endLine":10,"endColumn":15},{"ruleId":"525","severity":1,"message":"610","line":12,"column":7,"nodeType":"527","messageId":"528","endLine":12,"endColumn":12},{"ruleId":"543","severity":1,"message":"544","line":24,"column":5,"nodeType":"545","messageId":"546","endLine":26,"endColumn":6},{"ruleId":"611","severity":1,"message":"612","line":33,"column":59,"nodeType":"535","messageId":"613","endLine":33,"endColumn":61},{"ruleId":"570","severity":1,"message":"571","line":34,"column":22,"nodeType":"572","messageId":"573","endLine":34,"endColumn":24},{"ruleId":"525","severity":1,"message":"614","line":147,"column":15,"nodeType":"527","messageId":"528","endLine":147,"endColumn":22},{"ruleId":"615","severity":1,"message":"616","line":179,"column":23,"nodeType":"617","endLine":179,"endColumn":99},"no-native-reassign",["618"],"no-negated-in-lhs",["619"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar",["618"],["619"],"'str' is assigned a value but never used.","'Link' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'isChange', 'isSuccess'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'isSuccess'.","'cookie' is defined but never used.","'message' is defined but never used.","'Spin' is defined but never used.","'Table' is defined but never used.","'Tag' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Row' is defined but never used.","'Col' is defined but never used.","'Checkbox' is defined but never used.","'AutoComplete' is defined but never used.","'Slider' is defined but never used.","'InboxOutlined' is defined but never used.","'moment' is defined but never used.","'RangePicker' is assigned a value but never used.","'ReactDOM' is defined but never used.","'Avatar' is defined but never used.","'MessageOutlined' is defined but never used.","'LikeOutlined' is defined but never used.","'StarOutlined' is defined but never used.","'Drawer' is defined but never used.","'Progress' is defined but never used.","'Input' is defined but never used.","'Cascader' is defined but never used.","'Select' is defined but never used.","'Upload' is defined but never used.","'DatePicker' is defined but never used.","'List' is defined but never used.","'CloseCircleOutlined' is defined but never used.","'IconText' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'that' is assigned a value but never used.","'Divider' is defined but never used.","'Text' is assigned a value but never used.","'Link' is assigned a value but never used.","'blockContent' is assigned a value but never used.","'Menu' is defined but never used.","'Layout' is defined but never used.","'UserOutlined' is defined but never used.","'LaptopOutlined' is defined but never used.","'FileSearchOutlined' is defined but never used.","'HomeOutlined' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'getWeb3' is defined but never used.","'getEcommerceStore' is defined but never used.","'EyeTwoTone' is defined but never used.","'EyeInvisibleOutlined' is defined but never used.","'InputNumber' is defined but never used.","'Option' is assigned a value but never used.","'Space' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'RocketOutlined' is defined but never used.","'openNotification' is defined but never used.","'highestBidderString' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Card' is defined but never used.","'onlineNumber' is assigned a value but never used.","'offlineNumber' is assigned a value but never used.","'deviceArray' is assigned a value but never used.","'Countdown' is defined but never used.","'ClockCircleOutlined' is defined but never used.","'ExclamationCircleOutlined' is defined but never used.","'onFinish' is defined but never used.","'SmileOutlined' is defined but never used.","'count' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'loading' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]