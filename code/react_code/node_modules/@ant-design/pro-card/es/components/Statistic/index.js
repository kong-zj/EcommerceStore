import "antd/es/statistic/style";
import _Statistic from "antd/es/statistic";
import _extends from "@babel/runtime/helpers/esm/extends";
import "antd/es/badge/style";
import _Badge from "antd/es/badge";
import "antd/es/tooltip/style";
import _Tooltip from "antd/es/tooltip";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["className", "layout", "style", "description", "children", "title", "tip", "status", "trend", "prefix", "icon"];
import React, { useContext } from 'react';
import classNames from 'classnames';
import { QuestionCircleOutlined } from '@ant-design/icons';
import './index.less';

var Statistic = function Statistic(props) {
  var _classNames;

  var className = props.className,
      _props$layout = props.layout,
      layout = _props$layout === void 0 ? 'inline' : _props$layout,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      description = props.description,
      children = props.children,
      title = props.title,
      tip = props.tip,
      status = props.status,
      trend = props.trend,
      prefix = props.prefix,
      icon = props.icon,
      others = _objectWithoutProperties(props, _excluded);

  var _useContext = useContext(_ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('pro-card-statistic');
  var classString = classNames(prefixCls, className);
  var statusClass = classNames("".concat(prefixCls, "-status"));
  var iconClass = classNames("".concat(prefixCls, "-icon"));
  var wrapperClass = classNames("".concat(prefixCls, "-wrapper"));
  var contentClass = classNames("".concat(prefixCls, "-content"));
  var statisticClassName = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-layout-").concat(layout), layout), _defineProperty(_classNames, "".concat(prefixCls, "-trend-").concat(trend), trend), _classNames));
  var tipDom = tip && /*#__PURE__*/React.createElement(_Tooltip, {
    title: tip
  }, /*#__PURE__*/React.createElement(QuestionCircleOutlined, {
    className: "".concat(prefixCls, "-tip")
  }));
  var trendIconClassName = classNames("".concat(prefixCls, "-trend-icon"), _defineProperty({}, "".concat(prefixCls, "-trend-icon-").concat(trend), trend));
  var trendDom = trend && /*#__PURE__*/React.createElement("div", {
    className: trendIconClassName
  });
  var statusDom = status && /*#__PURE__*/React.createElement("div", {
    className: statusClass
  }, /*#__PURE__*/React.createElement(_Badge, {
    status: status,
    text: null
  }));
  var iconDom = icon && /*#__PURE__*/React.createElement("div", {
    className: iconClass
  }, icon);
  return /*#__PURE__*/React.createElement("div", {
    className: classString,
    style: style
  }, iconDom, /*#__PURE__*/React.createElement("div", {
    className: wrapperClass
  }, statusDom, /*#__PURE__*/React.createElement("div", {
    className: contentClass
  }, /*#__PURE__*/React.createElement(_Statistic, _extends({
    title: (title || tipDom) && /*#__PURE__*/React.createElement(React.Fragment, null, title, tipDom),
    prefix: (trendDom || prefix) && /*#__PURE__*/React.createElement(React.Fragment, null, trendDom, prefix),
    className: statisticClassName
  }, others)), description && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-description")
  }, description))));
};

export default Statistic;