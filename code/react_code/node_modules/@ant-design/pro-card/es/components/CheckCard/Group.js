import _extends from "@babel/runtime/helpers/esm/extends";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import "antd/es/row/style";
import _Row from "antd/es/row";
import "antd/es/col/style";
import _Col from "antd/es/col";
var _excluded = ["prefixCls", "className", "style", "options", "loading", "multiple", "bordered", "onChange"];
import React, { createContext, useCallback, useMemo, useRef, useContext } from 'react';
import classNames from 'classnames';
import omit from 'omit.js';
import CheckCard from './index';
import './index.less';
import { useMountMergeState } from '@ant-design/pro-utils';
export var CardLoading = function CardLoading(_ref) {
  var prefixCls = _ref.prefixCls;
  var loadingBlockClass = "".concat(prefixCls, "-loading-block");
  return /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-loading-content")
  }, /*#__PURE__*/React.createElement(_Row, {
    gutter: 8
  }, /*#__PURE__*/React.createElement(_Col, {
    span: 22
  }, /*#__PURE__*/React.createElement("div", {
    className: loadingBlockClass
  }))), /*#__PURE__*/React.createElement(_Row, {
    gutter: 8
  }, /*#__PURE__*/React.createElement(_Col, {
    span: 8
  }, /*#__PURE__*/React.createElement("div", {
    className: loadingBlockClass
  })), /*#__PURE__*/React.createElement(_Col, {
    span: 15
  }, /*#__PURE__*/React.createElement("div", {
    className: loadingBlockClass
  }))), /*#__PURE__*/React.createElement(_Row, {
    gutter: 8
  }, /*#__PURE__*/React.createElement(_Col, {
    span: 6
  }, /*#__PURE__*/React.createElement("div", {
    className: loadingBlockClass
  })), /*#__PURE__*/React.createElement(_Col, {
    span: 18
  }, /*#__PURE__*/React.createElement("div", {
    className: loadingBlockClass
  }))), /*#__PURE__*/React.createElement(_Row, {
    gutter: 8
  }, /*#__PURE__*/React.createElement(_Col, {
    span: 13
  }, /*#__PURE__*/React.createElement("div", {
    className: loadingBlockClass
  })), /*#__PURE__*/React.createElement(_Col, {
    span: 9
  }, /*#__PURE__*/React.createElement("div", {
    className: loadingBlockClass
  }))), /*#__PURE__*/React.createElement(_Row, {
    gutter: 8
  }, /*#__PURE__*/React.createElement(_Col, {
    span: 4
  }, /*#__PURE__*/React.createElement("div", {
    className: loadingBlockClass
  })), /*#__PURE__*/React.createElement(_Col, {
    span: 3
  }, /*#__PURE__*/React.createElement("div", {
    className: loadingBlockClass
  })), /*#__PURE__*/React.createElement(_Col, {
    span: 16
  }, /*#__PURE__*/React.createElement("div", {
    className: loadingBlockClass
  }))));
};
export var CheckCardGroupConnext = /*#__PURE__*/createContext(null);

var CheckCardGroup = function CheckCardGroup(props) {
  var customizePrefixCls = props.prefixCls,
      className = props.className,
      style = props.style,
      _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      _props$loading = props.loading,
      loading = _props$loading === void 0 ? false : _props$loading,
      _props$multiple = props.multiple,
      multiple = _props$multiple === void 0 ? false : _props$multiple,
      _props$bordered = props.bordered,
      bordered = _props$bordered === void 0 ? true : _props$bordered,
      onChange = props.onChange,
      restProps = _objectWithoutProperties(props, _excluded);

  var antdContext = useContext(_ConfigProvider.ConfigContext);
  var getOptions = useCallback(function () {
    return options === null || options === void 0 ? void 0 : options.map(function (option) {
      if (typeof option === 'string') {
        return {
          title: option,
          value: option
        };
      }

      return option;
    });
  }, [options]);
  var prefixCls = antdContext.getPrefixCls('pro-checkcard', customizePrefixCls);
  var groupPrefixCls = "".concat(prefixCls, "-group");
  var domProps = omit(restProps, ['children', 'defaultValue', 'value', 'disabled', 'size']);

  var _useMountMergeState = useMountMergeState(props.defaultValue, {
    value: props.value,
    onChange: props.onChange
  }),
      _useMountMergeState2 = _slicedToArray(_useMountMergeState, 2),
      stateValue = _useMountMergeState2[0],
      setStateValue = _useMountMergeState2[1];

  var registerValueMap = useRef(new Map());

  var registerValue = function registerValue(value) {
    var _registerValueMap$cur;

    (_registerValueMap$cur = registerValueMap.current) === null || _registerValueMap$cur === void 0 ? void 0 : _registerValueMap$cur.set(value, true);
  };

  var cancelValue = function cancelValue(value) {
    var _registerValueMap$cur2;

    (_registerValueMap$cur2 = registerValueMap.current) === null || _registerValueMap$cur2 === void 0 ? void 0 : _registerValueMap$cur2.delete(value);
  };

  var toggleOption = function toggleOption(option) {
    if (!multiple) {
      var changeValue;
      changeValue = stateValue; // 单选模式

      if (changeValue === option.value) {
        changeValue = undefined;
      } else {
        changeValue = option.value;
      }

      setStateValue === null || setStateValue === void 0 ? void 0 : setStateValue(changeValue);
    }

    if (multiple) {
      var _changeValue2, _changeValue2$filter;

      var _changeValue = [];
      var stateValues = stateValue;
      var hasOption = stateValues === null || stateValues === void 0 ? void 0 : stateValues.includes(option.value);
      _changeValue = _toConsumableArray(stateValues || []);

      if (!hasOption) {
        _changeValue.push(option.value);
      }

      if (hasOption) {
        _changeValue = _changeValue.filter(function (itemValue) {
          return itemValue !== option.value;
        });
      }

      var newOptions = getOptions();
      var newValue = (_changeValue2 = _changeValue) === null || _changeValue2 === void 0 ? void 0 : (_changeValue2$filter = _changeValue2.filter(function (val) {
        return registerValueMap.current.has(val);
      })) === null || _changeValue2$filter === void 0 ? void 0 : _changeValue2$filter.sort(function (a, b) {
        var indexA = newOptions.findIndex(function (opt) {
          return opt.value === a;
        });
        var indexB = newOptions.findIndex(function (opt) {
          return opt.value === b;
        });
        return indexA - indexB;
      });
      setStateValue(newValue);
    }
  };

  var children = useMemo(function () {
    if (loading) {
      return new Array(options.length || React.Children.toArray(props.children).length || 1).fill(0) // eslint-disable-next-line react/no-array-index-key
      .map(function (_, index) {
        return /*#__PURE__*/React.createElement(CheckCard, {
          key: index,
          loading: true
        });
      });
    }

    if (options && options.length > 0) {
      var optionValue = stateValue;
      return getOptions().map(function (option) {
        var _option$size;

        return /*#__PURE__*/React.createElement(CheckCard, {
          key: option.value.toString(),
          disabled: option.disabled,
          size: (_option$size = option.size) !== null && _option$size !== void 0 ? _option$size : props.size,
          value: option.value,
          checked: multiple ? optionValue === null || optionValue === void 0 ? void 0 : optionValue.includes(option.value) : optionValue === option.value,
          onChange: option.onChange,
          title: option.title,
          avatar: option.avatar,
          description: option.description,
          cover: option.cover
        });
      });
    }

    return props.children;
  }, [getOptions, loading, multiple, options, props.children, props.size, stateValue]);
  var classString = classNames(groupPrefixCls, className);
  return /*#__PURE__*/React.createElement(CheckCardGroupConnext.Provider, {
    value: {
      toggleOption: toggleOption,
      bordered: bordered,
      value: stateValue,
      disabled: props.disabled,
      size: props.size,
      loading: props.loading,
      multiple: props.multiple,
      // https://github.com/ant-design/ant-design/issues/16376
      registerValue: registerValue,
      cancelValue: cancelValue
    }
  }, /*#__PURE__*/React.createElement("div", _extends({
    className: classString,
    style: style
  }, domProps), children));
};

export default CheckCardGroup;