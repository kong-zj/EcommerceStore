import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import useMergedState from "rc-util/es/hooks/useMergedState";
import { useEffect, useRef } from 'react';

function useMountMergeState(initialState, option) {
  var mountRef = useRef(false);
  var frame = useRef(undefined);
  useEffect(function () {
    mountRef.current = true;
    return function () {
      clearTimeout(frame.current);
      mountRef.current = false;
    };
  }, []);

  var _useMergedState = useMergedState(initialState, option),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      state = _useMergedState2[0],
      setState = _useMergedState2[1];

  var mountSetState = function mountSetState(prevState) {
    clearTimeout(frame.current);
    frame.current = window.setTimeout(function () {
      if (mountRef.current) {
        setState(prevState);
      }
    }, 16);
  };

  return [state, mountSetState];
}

export default useMountMergeState;